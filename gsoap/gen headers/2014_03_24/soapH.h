/* soapH.h
   Generated by gSOAP 2.8.16 from damis.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap*, const char*, void*, size_t, int, int, size_t, unsigned int);

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_byte(soap, data),0) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_int(soap, data),0) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_double
#define SOAP_TYPE_double (10)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap*, double *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap*, const char*, double *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap*, const double *, const char*, const char*);

#ifndef soap_write_double
#define soap_write_double(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_double(soap, data),0) || soap_put_double(soap, data, "double", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap*, double *, const char*, const char*);

#ifndef soap_read_double
#define soap_read_double(soap, data) ( soap_begin_recv(soap) || !soap_get_double(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_bool
#define SOAP_TYPE_bool (11)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap*, bool *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

#ifndef soap_write_bool
#define soap_write_bool(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_bool(soap, data),0) || soap_put_bool(soap, data, "boolean", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

#ifndef soap_read_bool
#define soap_read_bool(soap, data) ( soap_begin_recv(soap) || !soap_get_bool(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (9)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_std__string
#define soap_write_std__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_std__string(soap, data),0) || soap_put_std__string(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_std__string
#define soap_read_std__string(soap, data) ( soap_begin_recv(soap) || !soap_get_std__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1) { return soap_instantiate_std__string(soap, n, NULL, NULL, NULL); }

inline std::string * soap_new_req_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline std::string * soap_new_set_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline void soap_delete_std__string(struct soap *soap, std::string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (82)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, data),0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (81)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, data),0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (78)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, data),0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (76)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, data),0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (75)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, data),0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE_Damis__NORMDATA
#define SOAP_TYPE_Damis__NORMDATA (74)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__NORMDATA(struct soap*, struct Damis__NORMDATA *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__NORMDATA(struct soap*, const struct Damis__NORMDATA *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__NORMDATA(struct soap*, const char*, int, const struct Damis__NORMDATA *, const char*);
SOAP_FMAC3 struct Damis__NORMDATA * SOAP_FMAC4 soap_in_Damis__NORMDATA(struct soap*, const char*, struct Damis__NORMDATA *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__NORMDATA(struct soap*, const struct Damis__NORMDATA *, const char*, const char*);

#ifndef soap_write_Damis__NORMDATA
#define soap_write_Damis__NORMDATA(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_Damis__NORMDATA(soap, data),0) || soap_put_Damis__NORMDATA(soap, data, "Damis:NORMDATA", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct Damis__NORMDATA * SOAP_FMAC4 soap_get_Damis__NORMDATA(struct soap*, struct Damis__NORMDATA *, const char*, const char*);

#ifndef soap_read_Damis__NORMDATA
#define soap_read_Damis__NORMDATA(soap, data) ( soap_begin_recv(soap) || !soap_get_Damis__NORMDATA(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct Damis__NORMDATA * SOAP_FMAC2 soap_instantiate_Damis__NORMDATA(struct soap*, int, const char*, const char*, size_t*);

inline struct Damis__NORMDATA * soap_new_Damis__NORMDATA(struct soap *soap, int n = -1) { return soap_instantiate_Damis__NORMDATA(soap, n, NULL, NULL, NULL); }

inline struct Damis__NORMDATA * soap_new_req_Damis__NORMDATA(struct soap *soap, std::string& X, bool normMeanStd, double a, double b, int maxCalcTime) { struct Damis__NORMDATA *_p = soap_instantiate_Damis__NORMDATA(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__NORMDATA(soap, _p); _p->X = X; _p->normMeanStd = normMeanStd; _p->a = a; _p->b = b; _p->maxCalcTime = maxCalcTime; } return _p; }

inline struct Damis__NORMDATA * soap_new_set_Damis__NORMDATA(struct soap *soap, std::string& X, bool normMeanStd, double a, double b, int maxCalcTime) { struct Damis__NORMDATA *_p = soap_instantiate_Damis__NORMDATA(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__NORMDATA(soap, _p); _p->X = X; _p->normMeanStd = normMeanStd; _p->a = a; _p->b = b; _p->maxCalcTime = maxCalcTime; } return _p; }

inline void soap_delete_Damis__NORMDATA(struct soap *soap, struct Damis__NORMDATA *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__NORMDATA(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Damis__NORMDATAResponse
#define SOAP_TYPE_Damis__NORMDATAResponse (71)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__NORMDATAResponse(struct soap*, struct Damis__NORMDATAResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__NORMDATAResponse(struct soap*, const struct Damis__NORMDATAResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__NORMDATAResponse(struct soap*, const char*, int, const struct Damis__NORMDATAResponse *, const char*);
SOAP_FMAC3 struct Damis__NORMDATAResponse * SOAP_FMAC4 soap_in_Damis__NORMDATAResponse(struct soap*, const char*, struct Damis__NORMDATAResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__NORMDATAResponse(struct soap*, const struct Damis__NORMDATAResponse *, const char*, const char*);

#ifndef soap_write_Damis__NORMDATAResponse
#define soap_write_Damis__NORMDATAResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_Damis__NORMDATAResponse(soap, data),0) || soap_put_Damis__NORMDATAResponse(soap, data, "Damis:NORMDATAResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct Damis__NORMDATAResponse * SOAP_FMAC4 soap_get_Damis__NORMDATAResponse(struct soap*, struct Damis__NORMDATAResponse *, const char*, const char*);

#ifndef soap_read_Damis__NORMDATAResponse
#define soap_read_Damis__NORMDATAResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_Damis__NORMDATAResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct Damis__NORMDATAResponse * SOAP_FMAC2 soap_instantiate_Damis__NORMDATAResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct Damis__NORMDATAResponse * soap_new_Damis__NORMDATAResponse(struct soap *soap, int n = -1) { return soap_instantiate_Damis__NORMDATAResponse(soap, n, NULL, NULL, NULL); }

inline struct Damis__NORMDATAResponse * soap_new_req_Damis__NORMDATAResponse(struct soap *soap, std::string& Y, double calcTime) { struct Damis__NORMDATAResponse *_p = soap_instantiate_Damis__NORMDATAResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__NORMDATAResponse(soap, _p); _p->Y = Y; _p->calcTime = calcTime; } return _p; }

inline struct Damis__NORMDATAResponse * soap_new_set_Damis__NORMDATAResponse(struct soap *soap, std::string& Y, double calcTime) { struct Damis__NORMDATAResponse *_p = soap_instantiate_Damis__NORMDATAResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__NORMDATAResponse(soap, _p); _p->Y = Y; _p->calcTime = calcTime; } return _p; }

inline void soap_delete_Damis__NORMDATAResponse(struct soap *soap, struct Damis__NORMDATAResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__NORMDATAResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Damis__TRANSPOSEDATA
#define SOAP_TYPE_Damis__TRANSPOSEDATA (70)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__TRANSPOSEDATA(struct soap*, struct Damis__TRANSPOSEDATA *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__TRANSPOSEDATA(struct soap*, const struct Damis__TRANSPOSEDATA *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__TRANSPOSEDATA(struct soap*, const char*, int, const struct Damis__TRANSPOSEDATA *, const char*);
SOAP_FMAC3 struct Damis__TRANSPOSEDATA * SOAP_FMAC4 soap_in_Damis__TRANSPOSEDATA(struct soap*, const char*, struct Damis__TRANSPOSEDATA *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__TRANSPOSEDATA(struct soap*, const struct Damis__TRANSPOSEDATA *, const char*, const char*);

#ifndef soap_write_Damis__TRANSPOSEDATA
#define soap_write_Damis__TRANSPOSEDATA(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_Damis__TRANSPOSEDATA(soap, data),0) || soap_put_Damis__TRANSPOSEDATA(soap, data, "Damis:TRANSPOSEDATA", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct Damis__TRANSPOSEDATA * SOAP_FMAC4 soap_get_Damis__TRANSPOSEDATA(struct soap*, struct Damis__TRANSPOSEDATA *, const char*, const char*);

#ifndef soap_read_Damis__TRANSPOSEDATA
#define soap_read_Damis__TRANSPOSEDATA(soap, data) ( soap_begin_recv(soap) || !soap_get_Damis__TRANSPOSEDATA(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct Damis__TRANSPOSEDATA * SOAP_FMAC2 soap_instantiate_Damis__TRANSPOSEDATA(struct soap*, int, const char*, const char*, size_t*);

inline struct Damis__TRANSPOSEDATA * soap_new_Damis__TRANSPOSEDATA(struct soap *soap, int n = -1) { return soap_instantiate_Damis__TRANSPOSEDATA(soap, n, NULL, NULL, NULL); }

inline struct Damis__TRANSPOSEDATA * soap_new_req_Damis__TRANSPOSEDATA(struct soap *soap, std::string& X, int maxCalcTime) { struct Damis__TRANSPOSEDATA *_p = soap_instantiate_Damis__TRANSPOSEDATA(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__TRANSPOSEDATA(soap, _p); _p->X = X; _p->maxCalcTime = maxCalcTime; } return _p; }

inline struct Damis__TRANSPOSEDATA * soap_new_set_Damis__TRANSPOSEDATA(struct soap *soap, std::string& X, int maxCalcTime) { struct Damis__TRANSPOSEDATA *_p = soap_instantiate_Damis__TRANSPOSEDATA(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__TRANSPOSEDATA(soap, _p); _p->X = X; _p->maxCalcTime = maxCalcTime; } return _p; }

inline void soap_delete_Damis__TRANSPOSEDATA(struct soap *soap, struct Damis__TRANSPOSEDATA *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__TRANSPOSEDATA(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Damis__TRANSPOSEDATAResponse
#define SOAP_TYPE_Damis__TRANSPOSEDATAResponse (67)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__TRANSPOSEDATAResponse(struct soap*, struct Damis__TRANSPOSEDATAResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__TRANSPOSEDATAResponse(struct soap*, const struct Damis__TRANSPOSEDATAResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__TRANSPOSEDATAResponse(struct soap*, const char*, int, const struct Damis__TRANSPOSEDATAResponse *, const char*);
SOAP_FMAC3 struct Damis__TRANSPOSEDATAResponse * SOAP_FMAC4 soap_in_Damis__TRANSPOSEDATAResponse(struct soap*, const char*, struct Damis__TRANSPOSEDATAResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__TRANSPOSEDATAResponse(struct soap*, const struct Damis__TRANSPOSEDATAResponse *, const char*, const char*);

#ifndef soap_write_Damis__TRANSPOSEDATAResponse
#define soap_write_Damis__TRANSPOSEDATAResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_Damis__TRANSPOSEDATAResponse(soap, data),0) || soap_put_Damis__TRANSPOSEDATAResponse(soap, data, "Damis:TRANSPOSEDATAResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct Damis__TRANSPOSEDATAResponse * SOAP_FMAC4 soap_get_Damis__TRANSPOSEDATAResponse(struct soap*, struct Damis__TRANSPOSEDATAResponse *, const char*, const char*);

#ifndef soap_read_Damis__TRANSPOSEDATAResponse
#define soap_read_Damis__TRANSPOSEDATAResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_Damis__TRANSPOSEDATAResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct Damis__TRANSPOSEDATAResponse * SOAP_FMAC2 soap_instantiate_Damis__TRANSPOSEDATAResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct Damis__TRANSPOSEDATAResponse * soap_new_Damis__TRANSPOSEDATAResponse(struct soap *soap, int n = -1) { return soap_instantiate_Damis__TRANSPOSEDATAResponse(soap, n, NULL, NULL, NULL); }

inline struct Damis__TRANSPOSEDATAResponse * soap_new_req_Damis__TRANSPOSEDATAResponse(struct soap *soap, std::string& Y, double calcTime) { struct Damis__TRANSPOSEDATAResponse *_p = soap_instantiate_Damis__TRANSPOSEDATAResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__TRANSPOSEDATAResponse(soap, _p); _p->Y = Y; _p->calcTime = calcTime; } return _p; }

inline struct Damis__TRANSPOSEDATAResponse * soap_new_set_Damis__TRANSPOSEDATAResponse(struct soap *soap, std::string& Y, double calcTime) { struct Damis__TRANSPOSEDATAResponse *_p = soap_instantiate_Damis__TRANSPOSEDATAResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__TRANSPOSEDATAResponse(soap, _p); _p->Y = Y; _p->calcTime = calcTime; } return _p; }

inline void soap_delete_Damis__TRANSPOSEDATAResponse(struct soap *soap, struct Damis__TRANSPOSEDATAResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__TRANSPOSEDATAResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Damis__SPLITDATA
#define SOAP_TYPE_Damis__SPLITDATA (66)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__SPLITDATA(struct soap*, struct Damis__SPLITDATA *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__SPLITDATA(struct soap*, const struct Damis__SPLITDATA *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__SPLITDATA(struct soap*, const char*, int, const struct Damis__SPLITDATA *, const char*);
SOAP_FMAC3 struct Damis__SPLITDATA * SOAP_FMAC4 soap_in_Damis__SPLITDATA(struct soap*, const char*, struct Damis__SPLITDATA *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__SPLITDATA(struct soap*, const struct Damis__SPLITDATA *, const char*, const char*);

#ifndef soap_write_Damis__SPLITDATA
#define soap_write_Damis__SPLITDATA(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_Damis__SPLITDATA(soap, data),0) || soap_put_Damis__SPLITDATA(soap, data, "Damis:SPLITDATA", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct Damis__SPLITDATA * SOAP_FMAC4 soap_get_Damis__SPLITDATA(struct soap*, struct Damis__SPLITDATA *, const char*, const char*);

#ifndef soap_read_Damis__SPLITDATA
#define soap_read_Damis__SPLITDATA(soap, data) ( soap_begin_recv(soap) || !soap_get_Damis__SPLITDATA(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct Damis__SPLITDATA * SOAP_FMAC2 soap_instantiate_Damis__SPLITDATA(struct soap*, int, const char*, const char*, size_t*);

inline struct Damis__SPLITDATA * soap_new_Damis__SPLITDATA(struct soap *soap, int n = -1) { return soap_instantiate_Damis__SPLITDATA(soap, n, NULL, NULL, NULL); }

inline struct Damis__SPLITDATA * soap_new_req_Damis__SPLITDATA(struct soap *soap, std::string& X, bool reshufleObjects, double firstSubsetPerc, double secondSubsetPerc, int maxCalcTime) { struct Damis__SPLITDATA *_p = soap_instantiate_Damis__SPLITDATA(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__SPLITDATA(soap, _p); _p->X = X; _p->reshufleObjects = reshufleObjects; _p->firstSubsetPerc = firstSubsetPerc; _p->secondSubsetPerc = secondSubsetPerc; _p->maxCalcTime = maxCalcTime; } return _p; }

inline struct Damis__SPLITDATA * soap_new_set_Damis__SPLITDATA(struct soap *soap, std::string& X, bool reshufleObjects, double firstSubsetPerc, double secondSubsetPerc, int maxCalcTime) { struct Damis__SPLITDATA *_p = soap_instantiate_Damis__SPLITDATA(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__SPLITDATA(soap, _p); _p->X = X; _p->reshufleObjects = reshufleObjects; _p->firstSubsetPerc = firstSubsetPerc; _p->secondSubsetPerc = secondSubsetPerc; _p->maxCalcTime = maxCalcTime; } return _p; }

inline void soap_delete_Damis__SPLITDATA(struct soap *soap, struct Damis__SPLITDATA *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__SPLITDATA(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Damis__SPLITDATAResponse
#define SOAP_TYPE_Damis__SPLITDATAResponse (63)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__SPLITDATAResponse(struct soap*, struct Damis__SPLITDATAResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__SPLITDATAResponse(struct soap*, const struct Damis__SPLITDATAResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__SPLITDATAResponse(struct soap*, const char*, int, const struct Damis__SPLITDATAResponse *, const char*);
SOAP_FMAC3 struct Damis__SPLITDATAResponse * SOAP_FMAC4 soap_in_Damis__SPLITDATAResponse(struct soap*, const char*, struct Damis__SPLITDATAResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__SPLITDATAResponse(struct soap*, const struct Damis__SPLITDATAResponse *, const char*, const char*);

#ifndef soap_write_Damis__SPLITDATAResponse
#define soap_write_Damis__SPLITDATAResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_Damis__SPLITDATAResponse(soap, data),0) || soap_put_Damis__SPLITDATAResponse(soap, data, "Damis:SPLITDATAResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct Damis__SPLITDATAResponse * SOAP_FMAC4 soap_get_Damis__SPLITDATAResponse(struct soap*, struct Damis__SPLITDATAResponse *, const char*, const char*);

#ifndef soap_read_Damis__SPLITDATAResponse
#define soap_read_Damis__SPLITDATAResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_Damis__SPLITDATAResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct Damis__SPLITDATAResponse * SOAP_FMAC2 soap_instantiate_Damis__SPLITDATAResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct Damis__SPLITDATAResponse * soap_new_Damis__SPLITDATAResponse(struct soap *soap, int n = -1) { return soap_instantiate_Damis__SPLITDATAResponse(soap, n, NULL, NULL, NULL); }

inline struct Damis__SPLITDATAResponse * soap_new_req_Damis__SPLITDATAResponse(struct soap *soap, std::string& Y, std::string& Yalt, double calcTime) { struct Damis__SPLITDATAResponse *_p = soap_instantiate_Damis__SPLITDATAResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__SPLITDATAResponse(soap, _p); _p->Y = Y; _p->Yalt = Yalt; _p->calcTime = calcTime; } return _p; }

inline struct Damis__SPLITDATAResponse * soap_new_set_Damis__SPLITDATAResponse(struct soap *soap, std::string& Y, std::string& Yalt, double calcTime) { struct Damis__SPLITDATAResponse *_p = soap_instantiate_Damis__SPLITDATAResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__SPLITDATAResponse(soap, _p); _p->Y = Y; _p->Yalt = Yalt; _p->calcTime = calcTime; } return _p; }

inline void soap_delete_Damis__SPLITDATAResponse(struct soap *soap, struct Damis__SPLITDATAResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__SPLITDATAResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Damis__FILTERDATA
#define SOAP_TYPE_Damis__FILTERDATA (62)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__FILTERDATA(struct soap*, struct Damis__FILTERDATA *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__FILTERDATA(struct soap*, const struct Damis__FILTERDATA *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__FILTERDATA(struct soap*, const char*, int, const struct Damis__FILTERDATA *, const char*);
SOAP_FMAC3 struct Damis__FILTERDATA * SOAP_FMAC4 soap_in_Damis__FILTERDATA(struct soap*, const char*, struct Damis__FILTERDATA *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__FILTERDATA(struct soap*, const struct Damis__FILTERDATA *, const char*, const char*);

#ifndef soap_write_Damis__FILTERDATA
#define soap_write_Damis__FILTERDATA(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_Damis__FILTERDATA(soap, data),0) || soap_put_Damis__FILTERDATA(soap, data, "Damis:FILTERDATA", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct Damis__FILTERDATA * SOAP_FMAC4 soap_get_Damis__FILTERDATA(struct soap*, struct Damis__FILTERDATA *, const char*, const char*);

#ifndef soap_read_Damis__FILTERDATA
#define soap_read_Damis__FILTERDATA(soap, data) ( soap_begin_recv(soap) || !soap_get_Damis__FILTERDATA(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct Damis__FILTERDATA * SOAP_FMAC2 soap_instantiate_Damis__FILTERDATA(struct soap*, int, const char*, const char*, size_t*);

inline struct Damis__FILTERDATA * soap_new_Damis__FILTERDATA(struct soap *soap, int n = -1) { return soap_instantiate_Damis__FILTERDATA(soap, n, NULL, NULL, NULL); }

inline struct Damis__FILTERDATA * soap_new_req_Damis__FILTERDATA(struct soap *soap, std::string& X, bool retFilteredData, double zValue, int attrIndex, int maxCalcTime) { struct Damis__FILTERDATA *_p = soap_instantiate_Damis__FILTERDATA(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__FILTERDATA(soap, _p); _p->X = X; _p->retFilteredData = retFilteredData; _p->zValue = zValue; _p->attrIndex = attrIndex; _p->maxCalcTime = maxCalcTime; } return _p; }

inline struct Damis__FILTERDATA * soap_new_set_Damis__FILTERDATA(struct soap *soap, std::string& X, bool retFilteredData, double zValue, int attrIndex, int maxCalcTime) { struct Damis__FILTERDATA *_p = soap_instantiate_Damis__FILTERDATA(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__FILTERDATA(soap, _p); _p->X = X; _p->retFilteredData = retFilteredData; _p->zValue = zValue; _p->attrIndex = attrIndex; _p->maxCalcTime = maxCalcTime; } return _p; }

inline void soap_delete_Damis__FILTERDATA(struct soap *soap, struct Damis__FILTERDATA *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__FILTERDATA(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Damis__FILTERDATAResponse
#define SOAP_TYPE_Damis__FILTERDATAResponse (59)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__FILTERDATAResponse(struct soap*, struct Damis__FILTERDATAResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__FILTERDATAResponse(struct soap*, const struct Damis__FILTERDATAResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__FILTERDATAResponse(struct soap*, const char*, int, const struct Damis__FILTERDATAResponse *, const char*);
SOAP_FMAC3 struct Damis__FILTERDATAResponse * SOAP_FMAC4 soap_in_Damis__FILTERDATAResponse(struct soap*, const char*, struct Damis__FILTERDATAResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__FILTERDATAResponse(struct soap*, const struct Damis__FILTERDATAResponse *, const char*, const char*);

#ifndef soap_write_Damis__FILTERDATAResponse
#define soap_write_Damis__FILTERDATAResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_Damis__FILTERDATAResponse(soap, data),0) || soap_put_Damis__FILTERDATAResponse(soap, data, "Damis:FILTERDATAResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct Damis__FILTERDATAResponse * SOAP_FMAC4 soap_get_Damis__FILTERDATAResponse(struct soap*, struct Damis__FILTERDATAResponse *, const char*, const char*);

#ifndef soap_read_Damis__FILTERDATAResponse
#define soap_read_Damis__FILTERDATAResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_Damis__FILTERDATAResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct Damis__FILTERDATAResponse * SOAP_FMAC2 soap_instantiate_Damis__FILTERDATAResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct Damis__FILTERDATAResponse * soap_new_Damis__FILTERDATAResponse(struct soap *soap, int n = -1) { return soap_instantiate_Damis__FILTERDATAResponse(soap, n, NULL, NULL, NULL); }

inline struct Damis__FILTERDATAResponse * soap_new_req_Damis__FILTERDATAResponse(struct soap *soap, std::string& Y, double calcTime) { struct Damis__FILTERDATAResponse *_p = soap_instantiate_Damis__FILTERDATAResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__FILTERDATAResponse(soap, _p); _p->Y = Y; _p->calcTime = calcTime; } return _p; }

inline struct Damis__FILTERDATAResponse * soap_new_set_Damis__FILTERDATAResponse(struct soap *soap, std::string& Y, double calcTime) { struct Damis__FILTERDATAResponse *_p = soap_instantiate_Damis__FILTERDATAResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__FILTERDATAResponse(soap, _p); _p->Y = Y; _p->calcTime = calcTime; } return _p; }

inline void soap_delete_Damis__FILTERDATAResponse(struct soap *soap, struct Damis__FILTERDATAResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__FILTERDATAResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Damis__CLEANDATA
#define SOAP_TYPE_Damis__CLEANDATA (58)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__CLEANDATA(struct soap*, struct Damis__CLEANDATA *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__CLEANDATA(struct soap*, const struct Damis__CLEANDATA *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__CLEANDATA(struct soap*, const char*, int, const struct Damis__CLEANDATA *, const char*);
SOAP_FMAC3 struct Damis__CLEANDATA * SOAP_FMAC4 soap_in_Damis__CLEANDATA(struct soap*, const char*, struct Damis__CLEANDATA *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__CLEANDATA(struct soap*, const struct Damis__CLEANDATA *, const char*, const char*);

#ifndef soap_write_Damis__CLEANDATA
#define soap_write_Damis__CLEANDATA(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_Damis__CLEANDATA(soap, data),0) || soap_put_Damis__CLEANDATA(soap, data, "Damis:CLEANDATA", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct Damis__CLEANDATA * SOAP_FMAC4 soap_get_Damis__CLEANDATA(struct soap*, struct Damis__CLEANDATA *, const char*, const char*);

#ifndef soap_read_Damis__CLEANDATA
#define soap_read_Damis__CLEANDATA(soap, data) ( soap_begin_recv(soap) || !soap_get_Damis__CLEANDATA(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct Damis__CLEANDATA * SOAP_FMAC2 soap_instantiate_Damis__CLEANDATA(struct soap*, int, const char*, const char*, size_t*);

inline struct Damis__CLEANDATA * soap_new_Damis__CLEANDATA(struct soap *soap, int n = -1) { return soap_instantiate_Damis__CLEANDATA(soap, n, NULL, NULL, NULL); }

inline struct Damis__CLEANDATA * soap_new_req_Damis__CLEANDATA(struct soap *soap, std::string& X, int maxCalcTime) { struct Damis__CLEANDATA *_p = soap_instantiate_Damis__CLEANDATA(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__CLEANDATA(soap, _p); _p->X = X; _p->maxCalcTime = maxCalcTime; } return _p; }

inline struct Damis__CLEANDATA * soap_new_set_Damis__CLEANDATA(struct soap *soap, std::string& X, int maxCalcTime) { struct Damis__CLEANDATA *_p = soap_instantiate_Damis__CLEANDATA(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__CLEANDATA(soap, _p); _p->X = X; _p->maxCalcTime = maxCalcTime; } return _p; }

inline void soap_delete_Damis__CLEANDATA(struct soap *soap, struct Damis__CLEANDATA *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__CLEANDATA(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Damis__CLEANDATAResponse
#define SOAP_TYPE_Damis__CLEANDATAResponse (55)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__CLEANDATAResponse(struct soap*, struct Damis__CLEANDATAResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__CLEANDATAResponse(struct soap*, const struct Damis__CLEANDATAResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__CLEANDATAResponse(struct soap*, const char*, int, const struct Damis__CLEANDATAResponse *, const char*);
SOAP_FMAC3 struct Damis__CLEANDATAResponse * SOAP_FMAC4 soap_in_Damis__CLEANDATAResponse(struct soap*, const char*, struct Damis__CLEANDATAResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__CLEANDATAResponse(struct soap*, const struct Damis__CLEANDATAResponse *, const char*, const char*);

#ifndef soap_write_Damis__CLEANDATAResponse
#define soap_write_Damis__CLEANDATAResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_Damis__CLEANDATAResponse(soap, data),0) || soap_put_Damis__CLEANDATAResponse(soap, data, "Damis:CLEANDATAResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct Damis__CLEANDATAResponse * SOAP_FMAC4 soap_get_Damis__CLEANDATAResponse(struct soap*, struct Damis__CLEANDATAResponse *, const char*, const char*);

#ifndef soap_read_Damis__CLEANDATAResponse
#define soap_read_Damis__CLEANDATAResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_Damis__CLEANDATAResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct Damis__CLEANDATAResponse * SOAP_FMAC2 soap_instantiate_Damis__CLEANDATAResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct Damis__CLEANDATAResponse * soap_new_Damis__CLEANDATAResponse(struct soap *soap, int n = -1) { return soap_instantiate_Damis__CLEANDATAResponse(soap, n, NULL, NULL, NULL); }

inline struct Damis__CLEANDATAResponse * soap_new_req_Damis__CLEANDATAResponse(struct soap *soap, std::string& Y, double calcTime) { struct Damis__CLEANDATAResponse *_p = soap_instantiate_Damis__CLEANDATAResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__CLEANDATAResponse(soap, _p); _p->Y = Y; _p->calcTime = calcTime; } return _p; }

inline struct Damis__CLEANDATAResponse * soap_new_set_Damis__CLEANDATAResponse(struct soap *soap, std::string& Y, double calcTime) { struct Damis__CLEANDATAResponse *_p = soap_instantiate_Damis__CLEANDATAResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__CLEANDATAResponse(soap, _p); _p->Y = Y; _p->calcTime = calcTime; } return _p; }

inline void soap_delete_Damis__CLEANDATAResponse(struct soap *soap, struct Damis__CLEANDATAResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__CLEANDATAResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Damis__STATPRIMITIVES
#define SOAP_TYPE_Damis__STATPRIMITIVES (54)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__STATPRIMITIVES(struct soap*, struct Damis__STATPRIMITIVES *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__STATPRIMITIVES(struct soap*, const struct Damis__STATPRIMITIVES *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__STATPRIMITIVES(struct soap*, const char*, int, const struct Damis__STATPRIMITIVES *, const char*);
SOAP_FMAC3 struct Damis__STATPRIMITIVES * SOAP_FMAC4 soap_in_Damis__STATPRIMITIVES(struct soap*, const char*, struct Damis__STATPRIMITIVES *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__STATPRIMITIVES(struct soap*, const struct Damis__STATPRIMITIVES *, const char*, const char*);

#ifndef soap_write_Damis__STATPRIMITIVES
#define soap_write_Damis__STATPRIMITIVES(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_Damis__STATPRIMITIVES(soap, data),0) || soap_put_Damis__STATPRIMITIVES(soap, data, "Damis:STATPRIMITIVES", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct Damis__STATPRIMITIVES * SOAP_FMAC4 soap_get_Damis__STATPRIMITIVES(struct soap*, struct Damis__STATPRIMITIVES *, const char*, const char*);

#ifndef soap_read_Damis__STATPRIMITIVES
#define soap_read_Damis__STATPRIMITIVES(soap, data) ( soap_begin_recv(soap) || !soap_get_Damis__STATPRIMITIVES(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct Damis__STATPRIMITIVES * SOAP_FMAC2 soap_instantiate_Damis__STATPRIMITIVES(struct soap*, int, const char*, const char*, size_t*);

inline struct Damis__STATPRIMITIVES * soap_new_Damis__STATPRIMITIVES(struct soap *soap, int n = -1) { return soap_instantiate_Damis__STATPRIMITIVES(soap, n, NULL, NULL, NULL); }

inline struct Damis__STATPRIMITIVES * soap_new_req_Damis__STATPRIMITIVES(struct soap *soap, std::string& X, int maxCalcTime) { struct Damis__STATPRIMITIVES *_p = soap_instantiate_Damis__STATPRIMITIVES(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__STATPRIMITIVES(soap, _p); _p->X = X; _p->maxCalcTime = maxCalcTime; } return _p; }

inline struct Damis__STATPRIMITIVES * soap_new_set_Damis__STATPRIMITIVES(struct soap *soap, std::string& X, int maxCalcTime) { struct Damis__STATPRIMITIVES *_p = soap_instantiate_Damis__STATPRIMITIVES(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__STATPRIMITIVES(soap, _p); _p->X = X; _p->maxCalcTime = maxCalcTime; } return _p; }

inline void soap_delete_Damis__STATPRIMITIVES(struct soap *soap, struct Damis__STATPRIMITIVES *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__STATPRIMITIVES(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Damis__STATPRIMITIVESResponse
#define SOAP_TYPE_Damis__STATPRIMITIVESResponse (51)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__STATPRIMITIVESResponse(struct soap*, struct Damis__STATPRIMITIVESResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__STATPRIMITIVESResponse(struct soap*, const struct Damis__STATPRIMITIVESResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__STATPRIMITIVESResponse(struct soap*, const char*, int, const struct Damis__STATPRIMITIVESResponse *, const char*);
SOAP_FMAC3 struct Damis__STATPRIMITIVESResponse * SOAP_FMAC4 soap_in_Damis__STATPRIMITIVESResponse(struct soap*, const char*, struct Damis__STATPRIMITIVESResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__STATPRIMITIVESResponse(struct soap*, const struct Damis__STATPRIMITIVESResponse *, const char*, const char*);

#ifndef soap_write_Damis__STATPRIMITIVESResponse
#define soap_write_Damis__STATPRIMITIVESResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_Damis__STATPRIMITIVESResponse(soap, data),0) || soap_put_Damis__STATPRIMITIVESResponse(soap, data, "Damis:STATPRIMITIVESResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct Damis__STATPRIMITIVESResponse * SOAP_FMAC4 soap_get_Damis__STATPRIMITIVESResponse(struct soap*, struct Damis__STATPRIMITIVESResponse *, const char*, const char*);

#ifndef soap_read_Damis__STATPRIMITIVESResponse
#define soap_read_Damis__STATPRIMITIVESResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_Damis__STATPRIMITIVESResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct Damis__STATPRIMITIVESResponse * SOAP_FMAC2 soap_instantiate_Damis__STATPRIMITIVESResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct Damis__STATPRIMITIVESResponse * soap_new_Damis__STATPRIMITIVESResponse(struct soap *soap, int n = -1) { return soap_instantiate_Damis__STATPRIMITIVESResponse(soap, n, NULL, NULL, NULL); }

inline struct Damis__STATPRIMITIVESResponse * soap_new_req_Damis__STATPRIMITIVESResponse(struct soap *soap, std::string& Y, double calcTime) { struct Damis__STATPRIMITIVESResponse *_p = soap_instantiate_Damis__STATPRIMITIVESResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__STATPRIMITIVESResponse(soap, _p); _p->Y = Y; _p->calcTime = calcTime; } return _p; }

inline struct Damis__STATPRIMITIVESResponse * soap_new_set_Damis__STATPRIMITIVESResponse(struct soap *soap, std::string& Y, double calcTime) { struct Damis__STATPRIMITIVESResponse *_p = soap_instantiate_Damis__STATPRIMITIVESResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__STATPRIMITIVESResponse(soap, _p); _p->Y = Y; _p->calcTime = calcTime; } return _p; }

inline void soap_delete_Damis__STATPRIMITIVESResponse(struct soap *soap, struct Damis__STATPRIMITIVESResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__STATPRIMITIVESResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Damis__KMEANS
#define SOAP_TYPE_Damis__KMEANS (50)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__KMEANS(struct soap*, struct Damis__KMEANS *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__KMEANS(struct soap*, const struct Damis__KMEANS *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__KMEANS(struct soap*, const char*, int, const struct Damis__KMEANS *, const char*);
SOAP_FMAC3 struct Damis__KMEANS * SOAP_FMAC4 soap_in_Damis__KMEANS(struct soap*, const char*, struct Damis__KMEANS *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__KMEANS(struct soap*, const struct Damis__KMEANS *, const char*, const char*);

#ifndef soap_write_Damis__KMEANS
#define soap_write_Damis__KMEANS(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_Damis__KMEANS(soap, data),0) || soap_put_Damis__KMEANS(soap, data, "Damis:KMEANS", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct Damis__KMEANS * SOAP_FMAC4 soap_get_Damis__KMEANS(struct soap*, struct Damis__KMEANS *, const char*, const char*);

#ifndef soap_read_Damis__KMEANS
#define soap_read_Damis__KMEANS(soap, data) ( soap_begin_recv(soap) || !soap_get_Damis__KMEANS(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct Damis__KMEANS * SOAP_FMAC2 soap_instantiate_Damis__KMEANS(struct soap*, int, const char*, const char*, size_t*);

inline struct Damis__KMEANS * soap_new_Damis__KMEANS(struct soap *soap, int n = -1) { return soap_instantiate_Damis__KMEANS(soap, n, NULL, NULL, NULL); }

inline struct Damis__KMEANS * soap_new_req_Damis__KMEANS(struct soap *soap, std::string& X, int kMax, int maxIteration, int maxCalcTime) { struct Damis__KMEANS *_p = soap_instantiate_Damis__KMEANS(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__KMEANS(soap, _p); _p->X = X; _p->kMax = kMax; _p->maxIteration = maxIteration; _p->maxCalcTime = maxCalcTime; } return _p; }

inline struct Damis__KMEANS * soap_new_set_Damis__KMEANS(struct soap *soap, std::string& X, int kMax, int maxIteration, int maxCalcTime) { struct Damis__KMEANS *_p = soap_instantiate_Damis__KMEANS(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__KMEANS(soap, _p); _p->X = X; _p->kMax = kMax; _p->maxIteration = maxIteration; _p->maxCalcTime = maxCalcTime; } return _p; }

inline void soap_delete_Damis__KMEANS(struct soap *soap, struct Damis__KMEANS *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__KMEANS(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Damis__KMEANSResponse
#define SOAP_TYPE_Damis__KMEANSResponse (47)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__KMEANSResponse(struct soap*, struct Damis__KMEANSResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__KMEANSResponse(struct soap*, const struct Damis__KMEANSResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__KMEANSResponse(struct soap*, const char*, int, const struct Damis__KMEANSResponse *, const char*);
SOAP_FMAC3 struct Damis__KMEANSResponse * SOAP_FMAC4 soap_in_Damis__KMEANSResponse(struct soap*, const char*, struct Damis__KMEANSResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__KMEANSResponse(struct soap*, const struct Damis__KMEANSResponse *, const char*, const char*);

#ifndef soap_write_Damis__KMEANSResponse
#define soap_write_Damis__KMEANSResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_Damis__KMEANSResponse(soap, data),0) || soap_put_Damis__KMEANSResponse(soap, data, "Damis:KMEANSResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct Damis__KMEANSResponse * SOAP_FMAC4 soap_get_Damis__KMEANSResponse(struct soap*, struct Damis__KMEANSResponse *, const char*, const char*);

#ifndef soap_read_Damis__KMEANSResponse
#define soap_read_Damis__KMEANSResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_Damis__KMEANSResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct Damis__KMEANSResponse * SOAP_FMAC2 soap_instantiate_Damis__KMEANSResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct Damis__KMEANSResponse * soap_new_Damis__KMEANSResponse(struct soap *soap, int n = -1) { return soap_instantiate_Damis__KMEANSResponse(soap, n, NULL, NULL, NULL); }

inline struct Damis__KMEANSResponse * soap_new_req_Damis__KMEANSResponse(struct soap *soap, std::string& Y, double calcTime, int kBest) { struct Damis__KMEANSResponse *_p = soap_instantiate_Damis__KMEANSResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__KMEANSResponse(soap, _p); _p->Y = Y; _p->calcTime = calcTime; _p->kBest = kBest; } return _p; }

inline struct Damis__KMEANSResponse * soap_new_set_Damis__KMEANSResponse(struct soap *soap, std::string& Y, double calcTime, int kBest) { struct Damis__KMEANSResponse *_p = soap_instantiate_Damis__KMEANSResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__KMEANSResponse(soap, _p); _p->Y = Y; _p->calcTime = calcTime; _p->kBest = kBest; } return _p; }

inline void soap_delete_Damis__KMEANSResponse(struct soap *soap, struct Damis__KMEANSResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__KMEANSResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Damis__C45
#define SOAP_TYPE_Damis__C45 (46)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__C45(struct soap*, struct Damis__C45 *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__C45(struct soap*, const struct Damis__C45 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__C45(struct soap*, const char*, int, const struct Damis__C45 *, const char*);
SOAP_FMAC3 struct Damis__C45 * SOAP_FMAC4 soap_in_Damis__C45(struct soap*, const char*, struct Damis__C45 *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__C45(struct soap*, const struct Damis__C45 *, const char*, const char*);

#ifndef soap_write_Damis__C45
#define soap_write_Damis__C45(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_Damis__C45(soap, data),0) || soap_put_Damis__C45(soap, data, "Damis:C45", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct Damis__C45 * SOAP_FMAC4 soap_get_Damis__C45(struct soap*, struct Damis__C45 *, const char*, const char*);

#ifndef soap_read_Damis__C45
#define soap_read_Damis__C45(soap, data) ( soap_begin_recv(soap) || !soap_get_Damis__C45(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct Damis__C45 * SOAP_FMAC2 soap_instantiate_Damis__C45(struct soap*, int, const char*, const char*, size_t*);

inline struct Damis__C45 * soap_new_Damis__C45(struct soap *soap, int n = -1) { return soap_instantiate_Damis__C45(soap, n, NULL, NULL, NULL); }

inline struct Damis__C45 * soap_new_req_Damis__C45(struct soap *soap, std::string& X, double q, double dL, double dT, int maxCalcTime) { struct Damis__C45 *_p = soap_instantiate_Damis__C45(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__C45(soap, _p); _p->X = X; _p->q = q; _p->dL = dL; _p->dT = dT; _p->maxCalcTime = maxCalcTime; } return _p; }

inline struct Damis__C45 * soap_new_set_Damis__C45(struct soap *soap, std::string& X, double q, double dL, double dT, int maxCalcTime) { struct Damis__C45 *_p = soap_instantiate_Damis__C45(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__C45(soap, _p); _p->X = X; _p->q = q; _p->dL = dL; _p->dT = dT; _p->maxCalcTime = maxCalcTime; } return _p; }

inline void soap_delete_Damis__C45(struct soap *soap, struct Damis__C45 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__C45(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Damis__C45Response
#define SOAP_TYPE_Damis__C45Response (43)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__C45Response(struct soap*, struct Damis__C45Response *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__C45Response(struct soap*, const struct Damis__C45Response *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__C45Response(struct soap*, const char*, int, const struct Damis__C45Response *, const char*);
SOAP_FMAC3 struct Damis__C45Response * SOAP_FMAC4 soap_in_Damis__C45Response(struct soap*, const char*, struct Damis__C45Response *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__C45Response(struct soap*, const struct Damis__C45Response *, const char*, const char*);

#ifndef soap_write_Damis__C45Response
#define soap_write_Damis__C45Response(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_Damis__C45Response(soap, data),0) || soap_put_Damis__C45Response(soap, data, "Damis:C45Response", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct Damis__C45Response * SOAP_FMAC4 soap_get_Damis__C45Response(struct soap*, struct Damis__C45Response *, const char*, const char*);

#ifndef soap_read_Damis__C45Response
#define soap_read_Damis__C45Response(soap, data) ( soap_begin_recv(soap) || !soap_get_Damis__C45Response(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct Damis__C45Response * SOAP_FMAC2 soap_instantiate_Damis__C45Response(struct soap*, int, const char*, const char*, size_t*);

inline struct Damis__C45Response * soap_new_Damis__C45Response(struct soap *soap, int n = -1) { return soap_instantiate_Damis__C45Response(soap, n, NULL, NULL, NULL); }

inline struct Damis__C45Response * soap_new_req_Damis__C45Response(struct soap *soap, std::string& Y, double calcTime, double algorithmError) { struct Damis__C45Response *_p = soap_instantiate_Damis__C45Response(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__C45Response(soap, _p); _p->Y = Y; _p->calcTime = calcTime; _p->algorithmError = algorithmError; } return _p; }

inline struct Damis__C45Response * soap_new_set_Damis__C45Response(struct soap *soap, std::string& Y, double calcTime, double algorithmError) { struct Damis__C45Response *_p = soap_instantiate_Damis__C45Response(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__C45Response(soap, _p); _p->Y = Y; _p->calcTime = calcTime; _p->algorithmError = algorithmError; } return _p; }

inline void soap_delete_Damis__C45Response(struct soap *soap, struct Damis__C45Response *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__C45Response(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Damis__MLP
#define SOAP_TYPE_Damis__MLP (42)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__MLP(struct soap*, struct Damis__MLP *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__MLP(struct soap*, const struct Damis__MLP *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__MLP(struct soap*, const char*, int, const struct Damis__MLP *, const char*);
SOAP_FMAC3 struct Damis__MLP * SOAP_FMAC4 soap_in_Damis__MLP(struct soap*, const char*, struct Damis__MLP *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__MLP(struct soap*, const struct Damis__MLP *, const char*, const char*);

#ifndef soap_write_Damis__MLP
#define soap_write_Damis__MLP(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_Damis__MLP(soap, data),0) || soap_put_Damis__MLP(soap, data, "Damis:MLP", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct Damis__MLP * SOAP_FMAC4 soap_get_Damis__MLP(struct soap*, struct Damis__MLP *, const char*, const char*);

#ifndef soap_read_Damis__MLP
#define soap_read_Damis__MLP(soap, data) ( soap_begin_recv(soap) || !soap_get_Damis__MLP(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct Damis__MLP * SOAP_FMAC2 soap_instantiate_Damis__MLP(struct soap*, int, const char*, const char*, size_t*);

inline struct Damis__MLP * soap_new_Damis__MLP(struct soap *soap, int n = -1) { return soap_instantiate_Damis__MLP(soap, n, NULL, NULL, NULL); }

inline struct Damis__MLP * soap_new_req_Damis__MLP(struct soap *soap, std::string& X, int h1pNo, int h2pNo, int h3pNo, double dL, double dT, double dV, int maxIteration, int p, int maxCalcTime) { struct Damis__MLP *_p = soap_instantiate_Damis__MLP(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__MLP(soap, _p); _p->X = X; _p->h1pNo = h1pNo; _p->h2pNo = h2pNo; _p->h3pNo = h3pNo; _p->dL = dL; _p->dT = dT; _p->dV = dV; _p->maxIteration = maxIteration; _p->p = p; _p->maxCalcTime = maxCalcTime; } return _p; }

inline struct Damis__MLP * soap_new_set_Damis__MLP(struct soap *soap, std::string& X, int h1pNo, int h2pNo, int h3pNo, double dL, double dT, double dV, int maxIteration, int p, int maxCalcTime) { struct Damis__MLP *_p = soap_instantiate_Damis__MLP(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__MLP(soap, _p); _p->X = X; _p->h1pNo = h1pNo; _p->h2pNo = h2pNo; _p->h3pNo = h3pNo; _p->dL = dL; _p->dT = dT; _p->dV = dV; _p->maxIteration = maxIteration; _p->p = p; _p->maxCalcTime = maxCalcTime; } return _p; }

inline void soap_delete_Damis__MLP(struct soap *soap, struct Damis__MLP *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__MLP(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Damis__MLPResponse
#define SOAP_TYPE_Damis__MLPResponse (39)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__MLPResponse(struct soap*, struct Damis__MLPResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__MLPResponse(struct soap*, const struct Damis__MLPResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__MLPResponse(struct soap*, const char*, int, const struct Damis__MLPResponse *, const char*);
SOAP_FMAC3 struct Damis__MLPResponse * SOAP_FMAC4 soap_in_Damis__MLPResponse(struct soap*, const char*, struct Damis__MLPResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__MLPResponse(struct soap*, const struct Damis__MLPResponse *, const char*, const char*);

#ifndef soap_write_Damis__MLPResponse
#define soap_write_Damis__MLPResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_Damis__MLPResponse(soap, data),0) || soap_put_Damis__MLPResponse(soap, data, "Damis:MLPResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct Damis__MLPResponse * SOAP_FMAC4 soap_get_Damis__MLPResponse(struct soap*, struct Damis__MLPResponse *, const char*, const char*);

#ifndef soap_read_Damis__MLPResponse
#define soap_read_Damis__MLPResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_Damis__MLPResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct Damis__MLPResponse * SOAP_FMAC2 soap_instantiate_Damis__MLPResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct Damis__MLPResponse * soap_new_Damis__MLPResponse(struct soap *soap, int n = -1) { return soap_instantiate_Damis__MLPResponse(soap, n, NULL, NULL, NULL); }

inline struct Damis__MLPResponse * soap_new_req_Damis__MLPResponse(struct soap *soap, std::string& Y, double calcTime, double algorithmError) { struct Damis__MLPResponse *_p = soap_instantiate_Damis__MLPResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__MLPResponse(soap, _p); _p->Y = Y; _p->calcTime = calcTime; _p->algorithmError = algorithmError; } return _p; }

inline struct Damis__MLPResponse * soap_new_set_Damis__MLPResponse(struct soap *soap, std::string& Y, double calcTime, double algorithmError) { struct Damis__MLPResponse *_p = soap_instantiate_Damis__MLPResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__MLPResponse(soap, _p); _p->Y = Y; _p->calcTime = calcTime; _p->algorithmError = algorithmError; } return _p; }

inline void soap_delete_Damis__MLPResponse(struct soap *soap, struct Damis__MLPResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__MLPResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Damis__SOMMDS
#define SOAP_TYPE_Damis__SOMMDS (38)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__SOMMDS(struct soap*, struct Damis__SOMMDS *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__SOMMDS(struct soap*, const struct Damis__SOMMDS *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__SOMMDS(struct soap*, const char*, int, const struct Damis__SOMMDS *, const char*);
SOAP_FMAC3 struct Damis__SOMMDS * SOAP_FMAC4 soap_in_Damis__SOMMDS(struct soap*, const char*, struct Damis__SOMMDS *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__SOMMDS(struct soap*, const struct Damis__SOMMDS *, const char*, const char*);

#ifndef soap_write_Damis__SOMMDS
#define soap_write_Damis__SOMMDS(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_Damis__SOMMDS(soap, data),0) || soap_put_Damis__SOMMDS(soap, data, "Damis:SOMMDS", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct Damis__SOMMDS * SOAP_FMAC4 soap_get_Damis__SOMMDS(struct soap*, struct Damis__SOMMDS *, const char*, const char*);

#ifndef soap_read_Damis__SOMMDS
#define soap_read_Damis__SOMMDS(soap, data) ( soap_begin_recv(soap) || !soap_get_Damis__SOMMDS(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct Damis__SOMMDS * SOAP_FMAC2 soap_instantiate_Damis__SOMMDS(struct soap*, int, const char*, const char*, size_t*);

inline struct Damis__SOMMDS * soap_new_Damis__SOMMDS(struct soap *soap, int n = -1) { return soap_instantiate_Damis__SOMMDS(soap, n, NULL, NULL, NULL); }

inline struct Damis__SOMMDS * soap_new_req_Damis__SOMMDS(struct soap *soap, std::string& X, int rows, int columns, int eHat, int mdsIteration, double eps, int mdsProjection, int maxCalcTime) { struct Damis__SOMMDS *_p = soap_instantiate_Damis__SOMMDS(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__SOMMDS(soap, _p); _p->X = X; _p->rows = rows; _p->columns = columns; _p->eHat = eHat; _p->mdsIteration = mdsIteration; _p->eps = eps; _p->mdsProjection = mdsProjection; _p->maxCalcTime = maxCalcTime; } return _p; }

inline struct Damis__SOMMDS * soap_new_set_Damis__SOMMDS(struct soap *soap, std::string& X, int rows, int columns, int eHat, int mdsIteration, double eps, int mdsProjection, int maxCalcTime) { struct Damis__SOMMDS *_p = soap_instantiate_Damis__SOMMDS(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__SOMMDS(soap, _p); _p->X = X; _p->rows = rows; _p->columns = columns; _p->eHat = eHat; _p->mdsIteration = mdsIteration; _p->eps = eps; _p->mdsProjection = mdsProjection; _p->maxCalcTime = maxCalcTime; } return _p; }

inline void soap_delete_Damis__SOMMDS(struct soap *soap, struct Damis__SOMMDS *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__SOMMDS(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Damis__SOMMDSResponse
#define SOAP_TYPE_Damis__SOMMDSResponse (35)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__SOMMDSResponse(struct soap*, struct Damis__SOMMDSResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__SOMMDSResponse(struct soap*, const struct Damis__SOMMDSResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__SOMMDSResponse(struct soap*, const char*, int, const struct Damis__SOMMDSResponse *, const char*);
SOAP_FMAC3 struct Damis__SOMMDSResponse * SOAP_FMAC4 soap_in_Damis__SOMMDSResponse(struct soap*, const char*, struct Damis__SOMMDSResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__SOMMDSResponse(struct soap*, const struct Damis__SOMMDSResponse *, const char*, const char*);

#ifndef soap_write_Damis__SOMMDSResponse
#define soap_write_Damis__SOMMDSResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_Damis__SOMMDSResponse(soap, data),0) || soap_put_Damis__SOMMDSResponse(soap, data, "Damis:SOMMDSResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct Damis__SOMMDSResponse * SOAP_FMAC4 soap_get_Damis__SOMMDSResponse(struct soap*, struct Damis__SOMMDSResponse *, const char*, const char*);

#ifndef soap_read_Damis__SOMMDSResponse
#define soap_read_Damis__SOMMDSResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_Damis__SOMMDSResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct Damis__SOMMDSResponse * SOAP_FMAC2 soap_instantiate_Damis__SOMMDSResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct Damis__SOMMDSResponse * soap_new_Damis__SOMMDSResponse(struct soap *soap, int n = -1) { return soap_instantiate_Damis__SOMMDSResponse(soap, n, NULL, NULL, NULL); }

inline struct Damis__SOMMDSResponse * soap_new_req_Damis__SOMMDSResponse(struct soap *soap, std::string& Y, double calcTime, double algorithmErrorQuantization, double algorithmErrorMDS) { struct Damis__SOMMDSResponse *_p = soap_instantiate_Damis__SOMMDSResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__SOMMDSResponse(soap, _p); _p->Y = Y; _p->calcTime = calcTime; _p->algorithmErrorQuantization = algorithmErrorQuantization; _p->algorithmErrorMDS = algorithmErrorMDS; } return _p; }

inline struct Damis__SOMMDSResponse * soap_new_set_Damis__SOMMDSResponse(struct soap *soap, std::string& Y, double calcTime, double algorithmErrorQuantization, double algorithmErrorMDS) { struct Damis__SOMMDSResponse *_p = soap_instantiate_Damis__SOMMDSResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__SOMMDSResponse(soap, _p); _p->Y = Y; _p->calcTime = calcTime; _p->algorithmErrorQuantization = algorithmErrorQuantization; _p->algorithmErrorMDS = algorithmErrorMDS; } return _p; }

inline void soap_delete_Damis__SOMMDSResponse(struct soap *soap, struct Damis__SOMMDSResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__SOMMDSResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Damis__SOM
#define SOAP_TYPE_Damis__SOM (34)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__SOM(struct soap*, struct Damis__SOM *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__SOM(struct soap*, const struct Damis__SOM *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__SOM(struct soap*, const char*, int, const struct Damis__SOM *, const char*);
SOAP_FMAC3 struct Damis__SOM * SOAP_FMAC4 soap_in_Damis__SOM(struct soap*, const char*, struct Damis__SOM *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__SOM(struct soap*, const struct Damis__SOM *, const char*, const char*);

#ifndef soap_write_Damis__SOM
#define soap_write_Damis__SOM(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_Damis__SOM(soap, data),0) || soap_put_Damis__SOM(soap, data, "Damis:SOM", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct Damis__SOM * SOAP_FMAC4 soap_get_Damis__SOM(struct soap*, struct Damis__SOM *, const char*, const char*);

#ifndef soap_read_Damis__SOM
#define soap_read_Damis__SOM(soap, data) ( soap_begin_recv(soap) || !soap_get_Damis__SOM(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct Damis__SOM * SOAP_FMAC2 soap_instantiate_Damis__SOM(struct soap*, int, const char*, const char*, size_t*);

inline struct Damis__SOM * soap_new_Damis__SOM(struct soap *soap, int n = -1) { return soap_instantiate_Damis__SOM(soap, n, NULL, NULL, NULL); }

inline struct Damis__SOM * soap_new_req_Damis__SOM(struct soap *soap, std::string& X, int rows, int columns, int eHat, int p, int maxCalcTime) { struct Damis__SOM *_p = soap_instantiate_Damis__SOM(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__SOM(soap, _p); _p->X = X; _p->rows = rows; _p->columns = columns; _p->eHat = eHat; _p->p = p; _p->maxCalcTime = maxCalcTime; } return _p; }

inline struct Damis__SOM * soap_new_set_Damis__SOM(struct soap *soap, std::string& X, int rows, int columns, int eHat, int p, int maxCalcTime) { struct Damis__SOM *_p = soap_instantiate_Damis__SOM(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__SOM(soap, _p); _p->X = X; _p->rows = rows; _p->columns = columns; _p->eHat = eHat; _p->p = p; _p->maxCalcTime = maxCalcTime; } return _p; }

inline void soap_delete_Damis__SOM(struct soap *soap, struct Damis__SOM *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__SOM(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Damis__SOMResponse
#define SOAP_TYPE_Damis__SOMResponse (31)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__SOMResponse(struct soap*, struct Damis__SOMResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__SOMResponse(struct soap*, const struct Damis__SOMResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__SOMResponse(struct soap*, const char*, int, const struct Damis__SOMResponse *, const char*);
SOAP_FMAC3 struct Damis__SOMResponse * SOAP_FMAC4 soap_in_Damis__SOMResponse(struct soap*, const char*, struct Damis__SOMResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__SOMResponse(struct soap*, const struct Damis__SOMResponse *, const char*, const char*);

#ifndef soap_write_Damis__SOMResponse
#define soap_write_Damis__SOMResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_Damis__SOMResponse(soap, data),0) || soap_put_Damis__SOMResponse(soap, data, "Damis:SOMResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct Damis__SOMResponse * SOAP_FMAC4 soap_get_Damis__SOMResponse(struct soap*, struct Damis__SOMResponse *, const char*, const char*);

#ifndef soap_read_Damis__SOMResponse
#define soap_read_Damis__SOMResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_Damis__SOMResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct Damis__SOMResponse * SOAP_FMAC2 soap_instantiate_Damis__SOMResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct Damis__SOMResponse * soap_new_Damis__SOMResponse(struct soap *soap, int n = -1) { return soap_instantiate_Damis__SOMResponse(soap, n, NULL, NULL, NULL); }

inline struct Damis__SOMResponse * soap_new_req_Damis__SOMResponse(struct soap *soap, std::string& Y, double calcTime, double algorithmError) { struct Damis__SOMResponse *_p = soap_instantiate_Damis__SOMResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__SOMResponse(soap, _p); _p->Y = Y; _p->calcTime = calcTime; _p->algorithmError = algorithmError; } return _p; }

inline struct Damis__SOMResponse * soap_new_set_Damis__SOMResponse(struct soap *soap, std::string& Y, double calcTime, double algorithmError) { struct Damis__SOMResponse *_p = soap_instantiate_Damis__SOMResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__SOMResponse(soap, _p); _p->Y = Y; _p->calcTime = calcTime; _p->algorithmError = algorithmError; } return _p; }

inline void soap_delete_Damis__SOMResponse(struct soap *soap, struct Damis__SOMResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__SOMResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Damis__SAMANN
#define SOAP_TYPE_Damis__SAMANN (30)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__SAMANN(struct soap*, struct Damis__SAMANN *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__SAMANN(struct soap*, const struct Damis__SAMANN *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__SAMANN(struct soap*, const char*, int, const struct Damis__SAMANN *, const char*);
SOAP_FMAC3 struct Damis__SAMANN * SOAP_FMAC4 soap_in_Damis__SAMANN(struct soap*, const char*, struct Damis__SAMANN *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__SAMANN(struct soap*, const struct Damis__SAMANN *, const char*, const char*);

#ifndef soap_write_Damis__SAMANN
#define soap_write_Damis__SAMANN(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_Damis__SAMANN(soap, data),0) || soap_put_Damis__SAMANN(soap, data, "Damis:SAMANN", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct Damis__SAMANN * SOAP_FMAC4 soap_get_Damis__SAMANN(struct soap*, struct Damis__SAMANN *, const char*, const char*);

#ifndef soap_read_Damis__SAMANN
#define soap_read_Damis__SAMANN(soap, data) ( soap_begin_recv(soap) || !soap_get_Damis__SAMANN(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct Damis__SAMANN * SOAP_FMAC2 soap_instantiate_Damis__SAMANN(struct soap*, int, const char*, const char*, size_t*);

inline struct Damis__SAMANN * soap_new_Damis__SAMANN(struct soap *soap, int n = -1) { return soap_instantiate_Damis__SAMANN(soap, n, NULL, NULL, NULL); }

inline struct Damis__SAMANN * soap_new_req_Damis__SAMANN(struct soap *soap, std::string& X, int d, int maxIteration, double mTrain, int nNeurons, double eta, int p, int maxCalcTime) { struct Damis__SAMANN *_p = soap_instantiate_Damis__SAMANN(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__SAMANN(soap, _p); _p->X = X; _p->d = d; _p->maxIteration = maxIteration; _p->mTrain = mTrain; _p->nNeurons = nNeurons; _p->eta = eta; _p->p = p; _p->maxCalcTime = maxCalcTime; } return _p; }

inline struct Damis__SAMANN * soap_new_set_Damis__SAMANN(struct soap *soap, std::string& X, int d, int maxIteration, double mTrain, int nNeurons, double eta, int p, int maxCalcTime) { struct Damis__SAMANN *_p = soap_instantiate_Damis__SAMANN(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__SAMANN(soap, _p); _p->X = X; _p->d = d; _p->maxIteration = maxIteration; _p->mTrain = mTrain; _p->nNeurons = nNeurons; _p->eta = eta; _p->p = p; _p->maxCalcTime = maxCalcTime; } return _p; }

inline void soap_delete_Damis__SAMANN(struct soap *soap, struct Damis__SAMANN *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__SAMANN(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Damis__SAMANNResponse
#define SOAP_TYPE_Damis__SAMANNResponse (27)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__SAMANNResponse(struct soap*, struct Damis__SAMANNResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__SAMANNResponse(struct soap*, const struct Damis__SAMANNResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__SAMANNResponse(struct soap*, const char*, int, const struct Damis__SAMANNResponse *, const char*);
SOAP_FMAC3 struct Damis__SAMANNResponse * SOAP_FMAC4 soap_in_Damis__SAMANNResponse(struct soap*, const char*, struct Damis__SAMANNResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__SAMANNResponse(struct soap*, const struct Damis__SAMANNResponse *, const char*, const char*);

#ifndef soap_write_Damis__SAMANNResponse
#define soap_write_Damis__SAMANNResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_Damis__SAMANNResponse(soap, data),0) || soap_put_Damis__SAMANNResponse(soap, data, "Damis:SAMANNResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct Damis__SAMANNResponse * SOAP_FMAC4 soap_get_Damis__SAMANNResponse(struct soap*, struct Damis__SAMANNResponse *, const char*, const char*);

#ifndef soap_read_Damis__SAMANNResponse
#define soap_read_Damis__SAMANNResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_Damis__SAMANNResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct Damis__SAMANNResponse * SOAP_FMAC2 soap_instantiate_Damis__SAMANNResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct Damis__SAMANNResponse * soap_new_Damis__SAMANNResponse(struct soap *soap, int n = -1) { return soap_instantiate_Damis__SAMANNResponse(soap, n, NULL, NULL, NULL); }

inline struct Damis__SAMANNResponse * soap_new_req_Damis__SAMANNResponse(struct soap *soap, std::string& Y, double calcTime, double algorithmError) { struct Damis__SAMANNResponse *_p = soap_instantiate_Damis__SAMANNResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__SAMANNResponse(soap, _p); _p->Y = Y; _p->calcTime = calcTime; _p->algorithmError = algorithmError; } return _p; }

inline struct Damis__SAMANNResponse * soap_new_set_Damis__SAMANNResponse(struct soap *soap, std::string& Y, double calcTime, double algorithmError) { struct Damis__SAMANNResponse *_p = soap_instantiate_Damis__SAMANNResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__SAMANNResponse(soap, _p); _p->Y = Y; _p->calcTime = calcTime; _p->algorithmError = algorithmError; } return _p; }

inline void soap_delete_Damis__SAMANNResponse(struct soap *soap, struct Damis__SAMANNResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__SAMANNResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Damis__RELMDS
#define SOAP_TYPE_Damis__RELMDS (26)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__RELMDS(struct soap*, struct Damis__RELMDS *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__RELMDS(struct soap*, const struct Damis__RELMDS *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__RELMDS(struct soap*, const char*, int, const struct Damis__RELMDS *, const char*);
SOAP_FMAC3 struct Damis__RELMDS * SOAP_FMAC4 soap_in_Damis__RELMDS(struct soap*, const char*, struct Damis__RELMDS *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__RELMDS(struct soap*, const struct Damis__RELMDS *, const char*, const char*);

#ifndef soap_write_Damis__RELMDS
#define soap_write_Damis__RELMDS(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_Damis__RELMDS(soap, data),0) || soap_put_Damis__RELMDS(soap, data, "Damis:RELMDS", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct Damis__RELMDS * SOAP_FMAC4 soap_get_Damis__RELMDS(struct soap*, struct Damis__RELMDS *, const char*, const char*);

#ifndef soap_read_Damis__RELMDS
#define soap_read_Damis__RELMDS(soap, data) ( soap_begin_recv(soap) || !soap_get_Damis__RELMDS(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct Damis__RELMDS * SOAP_FMAC2 soap_instantiate_Damis__RELMDS(struct soap*, int, const char*, const char*, size_t*);

inline struct Damis__RELMDS * soap_new_Damis__RELMDS(struct soap *soap, int n = -1) { return soap_instantiate_Damis__RELMDS(soap, n, NULL, NULL, NULL); }

inline struct Damis__RELMDS * soap_new_req_Damis__RELMDS(struct soap *soap, std::string& X, int d, int maxIteration, double eps, double noOfBaseVectors, int selStrategy, int maxCalcTime) { struct Damis__RELMDS *_p = soap_instantiate_Damis__RELMDS(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__RELMDS(soap, _p); _p->X = X; _p->d = d; _p->maxIteration = maxIteration; _p->eps = eps; _p->noOfBaseVectors = noOfBaseVectors; _p->selStrategy = selStrategy; _p->maxCalcTime = maxCalcTime; } return _p; }

inline struct Damis__RELMDS * soap_new_set_Damis__RELMDS(struct soap *soap, std::string& X, int d, int maxIteration, double eps, double noOfBaseVectors, int selStrategy, int maxCalcTime) { struct Damis__RELMDS *_p = soap_instantiate_Damis__RELMDS(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__RELMDS(soap, _p); _p->X = X; _p->d = d; _p->maxIteration = maxIteration; _p->eps = eps; _p->noOfBaseVectors = noOfBaseVectors; _p->selStrategy = selStrategy; _p->maxCalcTime = maxCalcTime; } return _p; }

inline void soap_delete_Damis__RELMDS(struct soap *soap, struct Damis__RELMDS *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__RELMDS(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Damis__RELMDSResponse
#define SOAP_TYPE_Damis__RELMDSResponse (23)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__RELMDSResponse(struct soap*, struct Damis__RELMDSResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__RELMDSResponse(struct soap*, const struct Damis__RELMDSResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__RELMDSResponse(struct soap*, const char*, int, const struct Damis__RELMDSResponse *, const char*);
SOAP_FMAC3 struct Damis__RELMDSResponse * SOAP_FMAC4 soap_in_Damis__RELMDSResponse(struct soap*, const char*, struct Damis__RELMDSResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__RELMDSResponse(struct soap*, const struct Damis__RELMDSResponse *, const char*, const char*);

#ifndef soap_write_Damis__RELMDSResponse
#define soap_write_Damis__RELMDSResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_Damis__RELMDSResponse(soap, data),0) || soap_put_Damis__RELMDSResponse(soap, data, "Damis:RELMDSResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct Damis__RELMDSResponse * SOAP_FMAC4 soap_get_Damis__RELMDSResponse(struct soap*, struct Damis__RELMDSResponse *, const char*, const char*);

#ifndef soap_read_Damis__RELMDSResponse
#define soap_read_Damis__RELMDSResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_Damis__RELMDSResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct Damis__RELMDSResponse * SOAP_FMAC2 soap_instantiate_Damis__RELMDSResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct Damis__RELMDSResponse * soap_new_Damis__RELMDSResponse(struct soap *soap, int n = -1) { return soap_instantiate_Damis__RELMDSResponse(soap, n, NULL, NULL, NULL); }

inline struct Damis__RELMDSResponse * soap_new_req_Damis__RELMDSResponse(struct soap *soap, std::string& Y, double calcTime, double algorithmError) { struct Damis__RELMDSResponse *_p = soap_instantiate_Damis__RELMDSResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__RELMDSResponse(soap, _p); _p->Y = Y; _p->calcTime = calcTime; _p->algorithmError = algorithmError; } return _p; }

inline struct Damis__RELMDSResponse * soap_new_set_Damis__RELMDSResponse(struct soap *soap, std::string& Y, double calcTime, double algorithmError) { struct Damis__RELMDSResponse *_p = soap_instantiate_Damis__RELMDSResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__RELMDSResponse(soap, _p); _p->Y = Y; _p->calcTime = calcTime; _p->algorithmError = algorithmError; } return _p; }

inline void soap_delete_Damis__RELMDSResponse(struct soap *soap, struct Damis__RELMDSResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__RELMDSResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Damis__DMA
#define SOAP_TYPE_Damis__DMA (22)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__DMA(struct soap*, struct Damis__DMA *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__DMA(struct soap*, const struct Damis__DMA *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__DMA(struct soap*, const char*, int, const struct Damis__DMA *, const char*);
SOAP_FMAC3 struct Damis__DMA * SOAP_FMAC4 soap_in_Damis__DMA(struct soap*, const char*, struct Damis__DMA *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__DMA(struct soap*, const struct Damis__DMA *, const char*, const char*);

#ifndef soap_write_Damis__DMA
#define soap_write_Damis__DMA(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_Damis__DMA(soap, data),0) || soap_put_Damis__DMA(soap, data, "Damis:DMA", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct Damis__DMA * SOAP_FMAC4 soap_get_Damis__DMA(struct soap*, struct Damis__DMA *, const char*, const char*);

#ifndef soap_read_Damis__DMA
#define soap_read_Damis__DMA(soap, data) ( soap_begin_recv(soap) || !soap_get_Damis__DMA(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct Damis__DMA * SOAP_FMAC2 soap_instantiate_Damis__DMA(struct soap*, int, const char*, const char*, size_t*);

inline struct Damis__DMA * soap_new_Damis__DMA(struct soap *soap, int n = -1) { return soap_instantiate_Damis__DMA(soap, n, NULL, NULL, NULL); }

inline struct Damis__DMA * soap_new_req_Damis__DMA(struct soap *soap, std::string& X, int d, int maxIteration, double eps, double neighbour, int maxCalcTime) { struct Damis__DMA *_p = soap_instantiate_Damis__DMA(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__DMA(soap, _p); _p->X = X; _p->d = d; _p->maxIteration = maxIteration; _p->eps = eps; _p->neighbour = neighbour; _p->maxCalcTime = maxCalcTime; } return _p; }

inline struct Damis__DMA * soap_new_set_Damis__DMA(struct soap *soap, std::string& X, int d, int maxIteration, double eps, double neighbour, int maxCalcTime) { struct Damis__DMA *_p = soap_instantiate_Damis__DMA(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__DMA(soap, _p); _p->X = X; _p->d = d; _p->maxIteration = maxIteration; _p->eps = eps; _p->neighbour = neighbour; _p->maxCalcTime = maxCalcTime; } return _p; }

inline void soap_delete_Damis__DMA(struct soap *soap, struct Damis__DMA *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__DMA(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Damis__DMAResponse
#define SOAP_TYPE_Damis__DMAResponse (19)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__DMAResponse(struct soap*, struct Damis__DMAResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__DMAResponse(struct soap*, const struct Damis__DMAResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__DMAResponse(struct soap*, const char*, int, const struct Damis__DMAResponse *, const char*);
SOAP_FMAC3 struct Damis__DMAResponse * SOAP_FMAC4 soap_in_Damis__DMAResponse(struct soap*, const char*, struct Damis__DMAResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__DMAResponse(struct soap*, const struct Damis__DMAResponse *, const char*, const char*);

#ifndef soap_write_Damis__DMAResponse
#define soap_write_Damis__DMAResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_Damis__DMAResponse(soap, data),0) || soap_put_Damis__DMAResponse(soap, data, "Damis:DMAResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct Damis__DMAResponse * SOAP_FMAC4 soap_get_Damis__DMAResponse(struct soap*, struct Damis__DMAResponse *, const char*, const char*);

#ifndef soap_read_Damis__DMAResponse
#define soap_read_Damis__DMAResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_Damis__DMAResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct Damis__DMAResponse * SOAP_FMAC2 soap_instantiate_Damis__DMAResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct Damis__DMAResponse * soap_new_Damis__DMAResponse(struct soap *soap, int n = -1) { return soap_instantiate_Damis__DMAResponse(soap, n, NULL, NULL, NULL); }

inline struct Damis__DMAResponse * soap_new_req_Damis__DMAResponse(struct soap *soap, std::string& Y, double calcTime, double algorithmError) { struct Damis__DMAResponse *_p = soap_instantiate_Damis__DMAResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__DMAResponse(soap, _p); _p->Y = Y; _p->calcTime = calcTime; _p->algorithmError = algorithmError; } return _p; }

inline struct Damis__DMAResponse * soap_new_set_Damis__DMAResponse(struct soap *soap, std::string& Y, double calcTime, double algorithmError) { struct Damis__DMAResponse *_p = soap_instantiate_Damis__DMAResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__DMAResponse(soap, _p); _p->Y = Y; _p->calcTime = calcTime; _p->algorithmError = algorithmError; } return _p; }

inline void soap_delete_Damis__DMAResponse(struct soap *soap, struct Damis__DMAResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__DMAResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Damis__SMACOFMDS
#define SOAP_TYPE_Damis__SMACOFMDS (18)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__SMACOFMDS(struct soap*, struct Damis__SMACOFMDS *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__SMACOFMDS(struct soap*, const struct Damis__SMACOFMDS *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__SMACOFMDS(struct soap*, const char*, int, const struct Damis__SMACOFMDS *, const char*);
SOAP_FMAC3 struct Damis__SMACOFMDS * SOAP_FMAC4 soap_in_Damis__SMACOFMDS(struct soap*, const char*, struct Damis__SMACOFMDS *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__SMACOFMDS(struct soap*, const struct Damis__SMACOFMDS *, const char*, const char*);

#ifndef soap_write_Damis__SMACOFMDS
#define soap_write_Damis__SMACOFMDS(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_Damis__SMACOFMDS(soap, data),0) || soap_put_Damis__SMACOFMDS(soap, data, "Damis:SMACOFMDS", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct Damis__SMACOFMDS * SOAP_FMAC4 soap_get_Damis__SMACOFMDS(struct soap*, struct Damis__SMACOFMDS *, const char*, const char*);

#ifndef soap_read_Damis__SMACOFMDS
#define soap_read_Damis__SMACOFMDS(soap, data) ( soap_begin_recv(soap) || !soap_get_Damis__SMACOFMDS(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct Damis__SMACOFMDS * SOAP_FMAC2 soap_instantiate_Damis__SMACOFMDS(struct soap*, int, const char*, const char*, size_t*);

inline struct Damis__SMACOFMDS * soap_new_Damis__SMACOFMDS(struct soap *soap, int n = -1) { return soap_instantiate_Damis__SMACOFMDS(soap, n, NULL, NULL, NULL); }

inline struct Damis__SMACOFMDS * soap_new_req_Damis__SMACOFMDS(struct soap *soap, std::string& X, int d, int maxIteration, double eps, bool zeidel, int p, int maxCalcTime) { struct Damis__SMACOFMDS *_p = soap_instantiate_Damis__SMACOFMDS(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__SMACOFMDS(soap, _p); _p->X = X; _p->d = d; _p->maxIteration = maxIteration; _p->eps = eps; _p->zeidel = zeidel; _p->p = p; _p->maxCalcTime = maxCalcTime; } return _p; }

inline struct Damis__SMACOFMDS * soap_new_set_Damis__SMACOFMDS(struct soap *soap, std::string& X, int d, int maxIteration, double eps, bool zeidel, int p, int maxCalcTime) { struct Damis__SMACOFMDS *_p = soap_instantiate_Damis__SMACOFMDS(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__SMACOFMDS(soap, _p); _p->X = X; _p->d = d; _p->maxIteration = maxIteration; _p->eps = eps; _p->zeidel = zeidel; _p->p = p; _p->maxCalcTime = maxCalcTime; } return _p; }

inline void soap_delete_Damis__SMACOFMDS(struct soap *soap, struct Damis__SMACOFMDS *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__SMACOFMDS(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Damis__SMACOFMDSResponse
#define SOAP_TYPE_Damis__SMACOFMDSResponse (15)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__SMACOFMDSResponse(struct soap*, struct Damis__SMACOFMDSResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__SMACOFMDSResponse(struct soap*, const struct Damis__SMACOFMDSResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__SMACOFMDSResponse(struct soap*, const char*, int, const struct Damis__SMACOFMDSResponse *, const char*);
SOAP_FMAC3 struct Damis__SMACOFMDSResponse * SOAP_FMAC4 soap_in_Damis__SMACOFMDSResponse(struct soap*, const char*, struct Damis__SMACOFMDSResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__SMACOFMDSResponse(struct soap*, const struct Damis__SMACOFMDSResponse *, const char*, const char*);

#ifndef soap_write_Damis__SMACOFMDSResponse
#define soap_write_Damis__SMACOFMDSResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_Damis__SMACOFMDSResponse(soap, data),0) || soap_put_Damis__SMACOFMDSResponse(soap, data, "Damis:SMACOFMDSResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct Damis__SMACOFMDSResponse * SOAP_FMAC4 soap_get_Damis__SMACOFMDSResponse(struct soap*, struct Damis__SMACOFMDSResponse *, const char*, const char*);

#ifndef soap_read_Damis__SMACOFMDSResponse
#define soap_read_Damis__SMACOFMDSResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_Damis__SMACOFMDSResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct Damis__SMACOFMDSResponse * SOAP_FMAC2 soap_instantiate_Damis__SMACOFMDSResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct Damis__SMACOFMDSResponse * soap_new_Damis__SMACOFMDSResponse(struct soap *soap, int n = -1) { return soap_instantiate_Damis__SMACOFMDSResponse(soap, n, NULL, NULL, NULL); }

inline struct Damis__SMACOFMDSResponse * soap_new_req_Damis__SMACOFMDSResponse(struct soap *soap, std::string& Y, double calcTime, double algorithmError) { struct Damis__SMACOFMDSResponse *_p = soap_instantiate_Damis__SMACOFMDSResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__SMACOFMDSResponse(soap, _p); _p->Y = Y; _p->calcTime = calcTime; _p->algorithmError = algorithmError; } return _p; }

inline struct Damis__SMACOFMDSResponse * soap_new_set_Damis__SMACOFMDSResponse(struct soap *soap, std::string& Y, double calcTime, double algorithmError) { struct Damis__SMACOFMDSResponse *_p = soap_instantiate_Damis__SMACOFMDSResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__SMACOFMDSResponse(soap, _p); _p->Y = Y; _p->calcTime = calcTime; _p->algorithmError = algorithmError; } return _p; }

inline void soap_delete_Damis__SMACOFMDSResponse(struct soap *soap, struct Damis__SMACOFMDSResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__SMACOFMDSResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Damis__PCA
#define SOAP_TYPE_Damis__PCA (14)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__PCA(struct soap*, struct Damis__PCA *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__PCA(struct soap*, const struct Damis__PCA *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__PCA(struct soap*, const char*, int, const struct Damis__PCA *, const char*);
SOAP_FMAC3 struct Damis__PCA * SOAP_FMAC4 soap_in_Damis__PCA(struct soap*, const char*, struct Damis__PCA *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__PCA(struct soap*, const struct Damis__PCA *, const char*, const char*);

#ifndef soap_write_Damis__PCA
#define soap_write_Damis__PCA(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_Damis__PCA(soap, data),0) || soap_put_Damis__PCA(soap, data, "Damis:PCA", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct Damis__PCA * SOAP_FMAC4 soap_get_Damis__PCA(struct soap*, struct Damis__PCA *, const char*, const char*);

#ifndef soap_read_Damis__PCA
#define soap_read_Damis__PCA(soap, data) ( soap_begin_recv(soap) || !soap_get_Damis__PCA(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct Damis__PCA * SOAP_FMAC2 soap_instantiate_Damis__PCA(struct soap*, int, const char*, const char*, size_t*);

inline struct Damis__PCA * soap_new_Damis__PCA(struct soap *soap, int n = -1) { return soap_instantiate_Damis__PCA(soap, n, NULL, NULL, NULL); }

inline struct Damis__PCA * soap_new_req_Damis__PCA(struct soap *soap, std::string& X, bool projType, double d, int maxCalcTime) { struct Damis__PCA *_p = soap_instantiate_Damis__PCA(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__PCA(soap, _p); _p->X = X; _p->projType = projType; _p->d = d; _p->maxCalcTime = maxCalcTime; } return _p; }

inline struct Damis__PCA * soap_new_set_Damis__PCA(struct soap *soap, std::string& X, bool projType, double d, int maxCalcTime) { struct Damis__PCA *_p = soap_instantiate_Damis__PCA(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__PCA(soap, _p); _p->X = X; _p->projType = projType; _p->d = d; _p->maxCalcTime = maxCalcTime; } return _p; }

inline void soap_delete_Damis__PCA(struct soap *soap, struct Damis__PCA *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__PCA(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_Damis__PCAResponse
#define SOAP_TYPE_Damis__PCAResponse (8)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__PCAResponse(struct soap*, struct Damis__PCAResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__PCAResponse(struct soap*, const struct Damis__PCAResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__PCAResponse(struct soap*, const char*, int, const struct Damis__PCAResponse *, const char*);
SOAP_FMAC3 struct Damis__PCAResponse * SOAP_FMAC4 soap_in_Damis__PCAResponse(struct soap*, const char*, struct Damis__PCAResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__PCAResponse(struct soap*, const struct Damis__PCAResponse *, const char*, const char*);

#ifndef soap_write_Damis__PCAResponse
#define soap_write_Damis__PCAResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_Damis__PCAResponse(soap, data),0) || soap_put_Damis__PCAResponse(soap, data, "Damis:PCAResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct Damis__PCAResponse * SOAP_FMAC4 soap_get_Damis__PCAResponse(struct soap*, struct Damis__PCAResponse *, const char*, const char*);

#ifndef soap_read_Damis__PCAResponse
#define soap_read_Damis__PCAResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_Damis__PCAResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct Damis__PCAResponse * SOAP_FMAC2 soap_instantiate_Damis__PCAResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct Damis__PCAResponse * soap_new_Damis__PCAResponse(struct soap *soap, int n = -1) { return soap_instantiate_Damis__PCAResponse(soap, n, NULL, NULL, NULL); }

inline struct Damis__PCAResponse * soap_new_req_Damis__PCAResponse(struct soap *soap, std::string& Y, double calcTime, double algorithmError) { struct Damis__PCAResponse *_p = soap_instantiate_Damis__PCAResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__PCAResponse(soap, _p); _p->Y = Y; _p->calcTime = calcTime; _p->algorithmError = algorithmError; } return _p; }

inline struct Damis__PCAResponse * soap_new_set_Damis__PCAResponse(struct soap *soap, std::string& Y, double calcTime, double algorithmError) { struct Damis__PCAResponse *_p = soap_instantiate_Damis__PCAResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_Damis__PCAResponse(soap, _p); _p->Y = Y; _p->calcTime = calcTime; _p->algorithmError = algorithmError; } return _p; }

inline void soap_delete_Damis__PCAResponse(struct soap *soap, struct Damis__PCAResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__PCAResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (84)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Reason(soap, data),0) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (83)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Detail(soap, data),0) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (77)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Code(soap, data),0) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__QName(soap, data),0) || soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_string(soap, data),0) || soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

/* End of soapH.h */
