// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* DAMIS.h
   Generated by wsdl2h 2.8.16 from http://158.129.140.146/damis/damis.wsdl and typemap.dat
   2014-03-24 19:42:25 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2000-2013 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Usage Notes

NOTE:

 - Run soapcpp2 on DAMIS.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 -j to generate improved proxy and server classes.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

WARNING:

   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following licenses:
GPL or Genivia's license for commercial use.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   DAMIS                                                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to remove STL dependency)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

Damis = "DAMIS"

*/

#define SOAP_NAMESPACE_OF_Damis	"DAMIS"
//gsoap Damis schema namespace:	DAMIS
//gsoap Damis schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/



/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   DAMIS                                                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   DAMIS                                                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   DAMIS                                                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   DAMIS                                                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap Damis service name:	DAMIS 
//gsoap Damis service type:	DAMISPortType 
//gsoap Damis service port:	http://158.129.140.146/Damis/cgi-bin/DAMISserver.cgi 
//gsoap Damis service namespace:	DAMIS 
//gsoap Damis service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage DAMIS Definitions

@section DAMIS_bindings Service Bindings

  - @ref DAMIS

@section DAMIS_more More Information

  - @ref page_notes "Usage Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page DAMIS Binding "DAMIS"

@section DAMIS_service Service Documentation "DAMIS"
Generated service definition 2014-03-24

@section DAMIS_operations Operations of Binding  "DAMIS"

  - @ref Damis__PCA

  - @ref Damis__SMACOFMDS

  - @ref Damis__DMA

  - @ref Damis__RELMDS

  - @ref Damis__SAMANN

  - @ref Damis__SOM

  - @ref Damis__SOMMDS

  - @ref Damis__MLP

  - @ref Damis__C45

  - @ref Damis__KMEANS

  - @ref Damis__STATPRIMITIVES

  - @ref Damis__CLEANDATA

  - @ref Damis__FILTERDATA

  - @ref Damis__SPLITDATA

  - @ref Damis__TRANSPOSEDATA

  - @ref Damis__NORMDATA

@section DAMIS_ports Endpoints of Binding  "DAMIS"

  - http://158.129.140.146/Damis/cgi-bin/DAMISserver.cgi


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   DAMIS                                                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   Damis__PCA                                                               *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "Damis__PCAResponse" of operation "Damis__PCA"
struct Damis__PCAResponse
{
    std::string                         Y;
    double                              calcTime;
    double                              algorithmError;
};

/// Operation "Damis__PCA" of service binding "DAMIS"

/**

Operation details:
Pagrindini komponeni analiz vertinant liekamj dispersij

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_Damis__PCA(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         X,
    bool                                projType,
    double                              d,
    int                                 maxCalcTime,
    // output parameters:
    struct Damis__PCAResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int Damis__PCA(
    struct soap *soap,
    // input parameters:
    std::string                         X,
    bool                                projType,
    double                              d,
    int                                 maxCalcTime,
    // output parameters:
    struct Damis__PCAResponse&
  );
@endcode

C++ proxy class (defined in soapDAMISProxy.h):
@code
  class DAMISProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapDAMISService.h):
@code
  class DAMISService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap Damis service method-protocol:	PCA SOAP
//gsoap Damis service method-style:	PCA rpc
//gsoap Damis service method-encoding:	PCA http://schemas.xmlsoap.org/soap/encoding/
//gsoap Damis service method-action:	PCA ""
//gsoap Damis service method-output-action:	PCA Response
int Damis__PCA(
///  X parameter: Kelias iki pradinių duomenų ARFF failo.
    std::string                         X,	///< Input parameter
///  projType parameter: Projekcijos dimensija
    bool                                projType,	///< Input parameter
///  d parameter: Jei projType = true, d reiškia dispersijos dalį procentais, kurią norima išlaikyti, kitu atveju - projekcijos ervės matas.
    double                              d,	///< Input parameter
///  maxCalcTime parameter: Maksimali numanoma skaičiavimo trukmė sekundėmis
    int                                 maxCalcTime,	///< Input parameter
    struct Damis__PCAResponse          &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   Damis__SMACOFMDS                                                         *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "Damis__SMACOFMDSResponse" of operation "Damis__SMACOFMDS"
struct Damis__SMACOFMDSResponse
{
    std::string                         Y;
    double                              calcTime;
    double                              algorithmError;
};

/// Operation "Damis__SMACOFMDS" of service binding "DAMIS"

/**

Operation details:
SMACOF algoritmas

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_Damis__SMACOFMDS(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         X,
    int                                 d,
    int                                 maxIteration,
    double                              eps,
    bool                                zeidel,
    int                                 p,
    int                                 maxCalcTime,
    // output parameters:
    struct Damis__SMACOFMDSResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int Damis__SMACOFMDS(
    struct soap *soap,
    // input parameters:
    std::string                         X,
    int                                 d,
    int                                 maxIteration,
    double                              eps,
    bool                                zeidel,
    int                                 p,
    int                                 maxCalcTime,
    // output parameters:
    struct Damis__SMACOFMDSResponse&
  );
@endcode

C++ proxy class (defined in soapDAMISProxy.h):
@code
  class DAMISProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapDAMISService.h):
@code
  class DAMISService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap Damis service method-protocol:	SMACOFMDS SOAP
//gsoap Damis service method-style:	SMACOFMDS rpc
//gsoap Damis service method-encoding:	SMACOFMDS http://schemas.xmlsoap.org/soap/encoding/
//gsoap Damis service method-action:	SMACOFMDS ""
//gsoap Damis service method-output-action:	SMACOFMDS Response
int Damis__SMACOFMDS(
///  X parameter: Kelias iki pradinių duomenų ARFF failo. 
    std::string                         X,	///< Input parameter
///  d parameter: Projekcijos dimensija
    int                                 d,	///< Input parameter
///  maxIteration parameter: Maksimalus iteracijų skaičius
    int                                 maxIteration,	///< Input parameter
///  eps parameter: Skirtumas tarp paklaidų
    double                              eps,	///< Input parameter
///  zeidel parameter: Reikšmė True jei vykdoma Zeidel modifikacija, jei nenurodyta kitaip zeidel = false
    bool                                zeidel,	///< Input parameter
///  p parameter: Procesorių skaičius, jei nenurodyta kitaip p = 1
    int                                 p,	///< Input parameter
///  maxCalcTime parameter: Maksimali numanoma skaičiavimo trukmė sekundėmis
    int                                 maxCalcTime,	///< Input parameter
    struct Damis__SMACOFMDSResponse    &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   Damis__DMA                                                               *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "Damis__DMAResponse" of operation "Damis__DMA"
struct Damis__DMAResponse
{
    std::string                         Y;
    double                              calcTime;
    double                              algorithmError;
};

/// Operation "Damis__DMA" of service binding "DAMIS"

/**

Operation details:
Diagonalinio maoravimo algoritmas

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_Damis__DMA(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         X,
    int                                 d,
    int                                 maxIteration,
    double                              eps,
    double                              neighbour,
    int                                 maxCalcTime,
    // output parameters:
    struct Damis__DMAResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int Damis__DMA(
    struct soap *soap,
    // input parameters:
    std::string                         X,
    int                                 d,
    int                                 maxIteration,
    double                              eps,
    double                              neighbour,
    int                                 maxCalcTime,
    // output parameters:
    struct Damis__DMAResponse&
  );
@endcode

C++ proxy class (defined in soapDAMISProxy.h):
@code
  class DAMISProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapDAMISService.h):
@code
  class DAMISService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap Damis service method-protocol:	DMA SOAP
//gsoap Damis service method-style:	DMA rpc
//gsoap Damis service method-encoding:	DMA http://schemas.xmlsoap.org/soap/encoding/
//gsoap Damis service method-action:	DMA ""
//gsoap Damis service method-output-action:	DMA Response
int Damis__DMA(
///  X parameter: Kelias iki pradinių duomenų ARFF failo. 
    std::string                         X,	///< Input parameter
///  d parameter: Projekcijos dimensija
    int                                 d,	///< Input parameter
///  maxIteration parameter: Maksimalus iteracijų skaičius
    int                                 maxIteration,	///< Input parameter
///  eps parameter: Skirtumas tarp paklaidų
    double                              eps,	///< Input parameter
///  neighbour parameter: Santykinis kaimynų skaičius naudojamas matricos V apskaičiavimui.
    double                              neighbour,	///< Input parameter
///  maxCalcTime parameter: Maksimali numanoma skaičiavimo trukmė sekundėmis
    int                                 maxCalcTime,	///< Input parameter
    struct Damis__DMAResponse          &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   Damis__RELMDS                                                            *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "Damis__RELMDSResponse" of operation "Damis__RELMDS"
struct Damis__RELMDSResponse
{
    std::string                         Y;
    double                              calcTime;
    double                              algorithmError;
};

/// Operation "Damis__RELMDS" of service binding "DAMIS"

/**

Operation details:
Santykini daugiamai skali algoritmas

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_Damis__RELMDS(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         X,
    int                                 d,
    int                                 maxIteration,
    double                              eps,
    double                              noOfBaseVectors,
    int                                 selStrategy,
    int                                 maxCalcTime,
    // output parameters:
    struct Damis__RELMDSResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int Damis__RELMDS(
    struct soap *soap,
    // input parameters:
    std::string                         X,
    int                                 d,
    int                                 maxIteration,
    double                              eps,
    double                              noOfBaseVectors,
    int                                 selStrategy,
    int                                 maxCalcTime,
    // output parameters:
    struct Damis__RELMDSResponse&
  );
@endcode

C++ proxy class (defined in soapDAMISProxy.h):
@code
  class DAMISProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapDAMISService.h):
@code
  class DAMISService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap Damis service method-protocol:	RELMDS SOAP
//gsoap Damis service method-style:	RELMDS rpc
//gsoap Damis service method-encoding:	RELMDS http://schemas.xmlsoap.org/soap/encoding/
//gsoap Damis service method-action:	RELMDS ""
//gsoap Damis service method-output-action:	RELMDS Response
int Damis__RELMDS(
///  X parameter: Kelias iki pradinių duomenų ARFF failo
    std::string                         X,	///< Input parameter
///  d parameter: Projekcijos dimensija
    int                                 d,	///< Input parameter
///  maxIteration parameter: Maksimalus iteracijų skaičius
    int                                 maxIteration,	///< Input parameter
///  eps parameter: Skirtumas tarp paklaidų
    double                              eps,	///< Input parameter
///  noOfBaseVectors parameter: Santykinis bazinių vektorių skaičius
    double                              noOfBaseVectors,	///< Input parameter
///  selStrategy parameter: Bazinių vektorių parinkimo strategija 1,2, arba 3
    int                                 selStrategy,	///< Input parameter
///  maxCalcTime parameter: Maksimali numanoma skaičiavimo trukmė sekundėmis
    int                                 maxCalcTime,	///< Input parameter
    struct Damis__RELMDSResponse       &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   Damis__SAMANN                                                            *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "Damis__SAMANNResponse" of operation "Damis__SAMANN"
struct Damis__SAMANNResponse
{
    std::string                         Y;
    double                              calcTime;
    double                              algorithmError;
};

/// Operation "Damis__SAMANN" of service binding "DAMIS"

/**

Operation details:
SAMANN algoritmas

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_Damis__SAMANN(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         X,
    int                                 d,
    int                                 maxIteration,
    double                              mTrain,
    int                                 nNeurons,
    double                              eta,
    int                                 p,
    int                                 maxCalcTime,
    // output parameters:
    struct Damis__SAMANNResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int Damis__SAMANN(
    struct soap *soap,
    // input parameters:
    std::string                         X,
    int                                 d,
    int                                 maxIteration,
    double                              mTrain,
    int                                 nNeurons,
    double                              eta,
    int                                 p,
    int                                 maxCalcTime,
    // output parameters:
    struct Damis__SAMANNResponse&
  );
@endcode

C++ proxy class (defined in soapDAMISProxy.h):
@code
  class DAMISProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapDAMISService.h):
@code
  class DAMISService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap Damis service method-protocol:	SAMANN SOAP
//gsoap Damis service method-style:	SAMANN rpc
//gsoap Damis service method-encoding:	SAMANN http://schemas.xmlsoap.org/soap/encoding/
//gsoap Damis service method-action:	SAMANN ""
//gsoap Damis service method-output-action:	SAMANN Response
int Damis__SAMANN(
///  X parameter: Kelias iki pradinių duomenų ARFF failo
    std::string                         X,	///< Input parameter
///  d parameter: Projekcijos dimensija
    int                                 d,	///< Input parameter
///  maxIteration parameter: Maksimalus iteracijų skaičius
    int                                 maxIteration,	///< Input parameter
///  mTrain parameter: Santykinis mokymo elementų skaičius
    double                              mTrain,	///< Input parameter
///  nNeurons parameter: Paslėpto sliuoksnio neuronų skaičius
    int                                 nNeurons,	///< Input parameter
///  eta parameter: Mokymosi greitį reguliuojančio parametro reikšmė
    double                              eta,	///< Input parameter
///  p parameter: Procesorių skaičius, jei nenurodyta kitaip p = 1
    int                                 p,	///< Input parameter
///  maxCalcTime parameter: Maksimali numanoma skaičiavimo trukmė sekundėmis
    int                                 maxCalcTime,	///< Input parameter
    struct Damis__SAMANNResponse       &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   Damis__SOM                                                               *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "Damis__SOMResponse" of operation "Damis__SOM"
struct Damis__SOMResponse
{
    std::string                         Y;
    double                              calcTime;
    double                              algorithmError;
};

/// Operation "Damis__SOM" of service binding "DAMIS"

/**

Operation details:
Saviorganizuojantis neuroninis tinklas

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_Damis__SOM(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         X,
    int                                 rows,
    int                                 columns,
    int                                 eHat,
    int                                 p,
    int                                 maxCalcTime,
    // output parameters:
    struct Damis__SOMResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int Damis__SOM(
    struct soap *soap,
    // input parameters:
    std::string                         X,
    int                                 rows,
    int                                 columns,
    int                                 eHat,
    int                                 p,
    int                                 maxCalcTime,
    // output parameters:
    struct Damis__SOMResponse&
  );
@endcode

C++ proxy class (defined in soapDAMISProxy.h):
@code
  class DAMISProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapDAMISService.h):
@code
  class DAMISService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap Damis service method-protocol:	SOM SOAP
//gsoap Damis service method-style:	SOM rpc
//gsoap Damis service method-encoding:	SOM http://schemas.xmlsoap.org/soap/encoding/
//gsoap Damis service method-action:	SOM ""
//gsoap Damis service method-output-action:	SOM Response
int Damis__SOM(
///  X parameter: Kelias iki pradinių duomenų ARFF failo
    std::string                         X,	///< Input parameter
///  rows parameter: Objektų skaičius 
    int                                 rows,	///< Input parameter
///  columns parameter: Objekto požymių kiekis (lygus objekto stulpelių skaičiui) 
    int                                 columns,	///< Input parameter
///  eHat parameter: Mokymo epochų skaičius 
    int                                 eHat,	///< Input parameter
///  p parameter: Procesorių skaičius, jei nenurodyta kitaip p = 1
    int                                 p,	///< Input parameter
///  maxCalcTime parameter: Maksimali numanoma skaičiavimo trukmė sekundėmis
    int                                 maxCalcTime,	///< Input parameter
    struct Damis__SOMResponse          &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   Damis__SOMMDS                                                            *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "Damis__SOMMDSResponse" of operation "Damis__SOMMDS"
struct Damis__SOMMDSResponse
{
    std::string                         Y;
    double                              calcTime;
    double                              algorithmError;
};

/// Operation "Damis__SOMMDS" of service binding "DAMIS"

/**

Operation details:

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_Damis__SOMMDS(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         X,
    int                                 rows,
    int                                 columns,
    int                                 eHat,
    int                                 mdsIteration,
    double                              eps,
    int                                 mdsProjection,
    int                                 maxCalcTime,
    // output parameters:
    struct Damis__SOMMDSResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int Damis__SOMMDS(
    struct soap *soap,
    // input parameters:
    std::string                         X,
    int                                 rows,
    int                                 columns,
    int                                 eHat,
    int                                 mdsIteration,
    double                              eps,
    int                                 mdsProjection,
    int                                 maxCalcTime,
    // output parameters:
    struct Damis__SOMMDSResponse&
  );
@endcode

C++ proxy class (defined in soapDAMISProxy.h):
@code
  class DAMISProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapDAMISService.h):
@code
  class DAMISService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap Damis service method-protocol:	SOMMDS SOAP
//gsoap Damis service method-style:	SOMMDS rpc
//gsoap Damis service method-encoding:	SOMMDS http://schemas.xmlsoap.org/soap/encoding/
//gsoap Damis service method-action:	SOMMDS ""
//gsoap Damis service method-output-action:	SOMMDS Response
int Damis__SOMMDS(
///  X parameter: Kelias iki pradinių duomenų ARFF failo
    std::string                         X,	///< Input parameter
///  rows parameter: Eilučių skaičius
    int                                 rows,	///< Input parameter
///  columns parameter: Stulpelių skaičius
    int                                 columns,	///< Input parameter
///  eHat parameter: Mokymo epochų skaičius
    int                                 eHat,	///< Input parameter
///  mdsIteration parameter: MDS iteracijų skaičius
    int                                 mdsIteration,	///< Input parameter
///  eps parameter: Skirtumas tarp paklaidų
    double                              eps,	///< Input parameter
///  mdsProjection parameter: MDS projekcijos dimensija = 2
    int                                 mdsProjection,	///< Input parameter
///  maxCalcTime parameter: Maksimali numanoma skaičiavimo trukmė sekundėmis
    int                                 maxCalcTime,	///< Input parameter
    struct Damis__SOMMDSResponse       &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   Damis__MLP                                                               *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "Damis__MLPResponse" of operation "Damis__MLP"
struct Damis__MLPResponse
{
    std::string                         Y;
    double                              calcTime;
    double                              algorithmError;
};

/// Operation "Damis__MLP" of service binding "DAMIS"

/**

Operation details:
Daugiasluoksnio perceptrono klasifikavimo algoritmas

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_Damis__MLP(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         X,
    int                                 h1pNo,
    int                                 h2pNo,
    int                                 h3pNo,
    double                              dL,
    double                              dT,
    double                              dV,
    int                                 maxIteration,
    int                                 p,
    int                                 maxCalcTime,
    // output parameters:
    struct Damis__MLPResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int Damis__MLP(
    struct soap *soap,
    // input parameters:
    std::string                         X,
    int                                 h1pNo,
    int                                 h2pNo,
    int                                 h3pNo,
    double                              dL,
    double                              dT,
    double                              dV,
    int                                 maxIteration,
    int                                 p,
    int                                 maxCalcTime,
    // output parameters:
    struct Damis__MLPResponse&
  );
@endcode

C++ proxy class (defined in soapDAMISProxy.h):
@code
  class DAMISProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapDAMISService.h):
@code
  class DAMISService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap Damis service method-protocol:	MLP SOAP
//gsoap Damis service method-style:	MLP rpc
//gsoap Damis service method-encoding:	MLP http://schemas.xmlsoap.org/soap/encoding/
//gsoap Damis service method-action:	MLP ""
//gsoap Damis service method-output-action:	MLP Response
int Damis__MLP(
///  X parameter: Kelias iki ARFF failo
    std::string                         X,	///< Input parameter
///  h1pNo parameter: Antrojo paslėpto sluoksnio neuronų skaičius
    int                                 h1pNo,	///< Input parameter
///  h2pNo parameter: Pirmojo paslėpto sluoksnio neuronų skaičius
    int                                 h2pNo,	///< Input parameter
///  h3pNo parameter: Trečiojo paslėpto sluoksnio neuronų skaičius
    int                                 h3pNo,	///< Input parameter
///  dL parameter: Mokymosi vektorių skaičius
    double                              dL,	///< Input parameter
///  dT parameter: Testavimo vektorių skaičius
    double                              dT,	///< Input parameter
///  dV parameter: Validavimo vektorių skaičius
    double                              dV,	///< Input parameter
///  maxIteration parameter: Maksimalus iteracijų skaičius
    int                                 maxIteration,	///< Input parameter
///  p parameter: Procesorių skaičius, jei nenurodyta kitaip p = 1
    int                                 p,	///< Input parameter
///  maxCalcTime parameter: Maksimali numanoma skaičiavimo trukmė sekundėmis
    int                                 maxCalcTime,	///< Input parameter
    struct Damis__MLPResponse          &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   Damis__C45                                                               *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "Damis__C45Response" of operation "Damis__C45"
struct Damis__C45Response
{
    std::string                         Y;
    double                              calcTime;
    double                              algorithmError;
};

/// Operation "Damis__C45" of service binding "DAMIS"

/**

Operation details:
Sprendim medio klasifikavimo algoritmas

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_Damis__C45(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         X,
    double                              q,
    double                              dL,
    double                              dT,
    int                                 maxCalcTime,
    // output parameters:
    struct Damis__C45Response&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int Damis__C45(
    struct soap *soap,
    // input parameters:
    std::string                         X,
    double                              q,
    double                              dL,
    double                              dT,
    int                                 maxCalcTime,
    // output parameters:
    struct Damis__C45Response&
  );
@endcode

C++ proxy class (defined in soapDAMISProxy.h):
@code
  class DAMISProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapDAMISService.h):
@code
  class DAMISService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap Damis service method-protocol:	C45 SOAP
//gsoap Damis service method-style:	C45 rpc
//gsoap Damis service method-encoding:	C45 http://schemas.xmlsoap.org/soap/encoding/
//gsoap Damis service method-action:	C45 ""
//gsoap Damis service method-output-action:	C45 Response
int Damis__C45(
///  X parameter: Kelias iki pradinių duomenų ARFF failo
    std::string                         X,	///< Input parameter
///  q parameter: Pasikliovimo lygmuo, įvertinant klaidos tikimybėsp pasikliautinąjį intervalą
    double                              q,	///< Input parameter
///  dL parameter: Mokymosi vektorių skaičius
    double                              dL,	///< Input parameter
///  dT parameter: Testavimo vektorių skaičius
    double                              dT,	///< Input parameter
///  maxCalcTime parameter: Maksimali numanoma skaičiavimo trukmė sekundėmis
    int                                 maxCalcTime,	///< Input parameter
    struct Damis__C45Response          &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   Damis__KMEANS                                                            *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "Damis__KMEANSResponse" of operation "Damis__KMEANS"
struct Damis__KMEANSResponse
{
    std::string                         Y;
    double                              calcTime;
    int                                 kBest;
};

/// Operation "Damis__KMEANS" of service binding "DAMIS"

/**

Operation details:
K-means vektoriams be nurodytos klasins priklausomybs

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_Damis__KMEANS(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         X,
    int                                 kMax,
    int                                 maxIteration,
    int                                 maxCalcTime,
    // output parameters:
    struct Damis__KMEANSResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int Damis__KMEANS(
    struct soap *soap,
    // input parameters:
    std::string                         X,
    int                                 kMax,
    int                                 maxIteration,
    int                                 maxCalcTime,
    // output parameters:
    struct Damis__KMEANSResponse&
  );
@endcode

C++ proxy class (defined in soapDAMISProxy.h):
@code
  class DAMISProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapDAMISService.h):
@code
  class DAMISService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap Damis service method-protocol:	KMEANS SOAP
//gsoap Damis service method-style:	KMEANS rpc
//gsoap Damis service method-encoding:	KMEANS http://schemas.xmlsoap.org/soap/encoding/
//gsoap Damis service method-action:	KMEANS ""
//gsoap Damis service method-output-action:	KMEANS Response
int Damis__KMEANS(
///  X parameter: Kelias iki pradinių duomenų ARFF failo.
    std::string                         X,	///< Input parameter
///  kMax parameter: Maksimalus galimas grupių skaičius
    int                                 kMax,	///< Input parameter
///  maxIteration parameter: Maksimalus iteracijų skaičius
    int                                 maxIteration,	///< Input parameter
///  maxCalcTime parameter: Maksimali numanoma skaičiavimo trukmė sekundėmis
    int                                 maxCalcTime,	///< Input parameter
    struct Damis__KMEANSResponse       &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   Damis__STATPRIMITIVES                                                    *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "Damis__STATPRIMITIVESResponse" of operation "Damis__STATPRIMITIVES"
struct Damis__STATPRIMITIVESResponse
{
    std::string                         Y;
    double                              calcTime;
};

/// Operation "Damis__STATPRIMITIVES" of service binding "DAMIS"

/**

Operation details:
Statistiniai primityvai (min, max, vidurkis, standartinis nuokrypis, mediana)

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_Damis__STATPRIMITIVES(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         X,
    int                                 maxCalcTime,
    // output parameters:
    struct Damis__STATPRIMITIVESResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int Damis__STATPRIMITIVES(
    struct soap *soap,
    // input parameters:
    std::string                         X,
    int                                 maxCalcTime,
    // output parameters:
    struct Damis__STATPRIMITIVESResponse&
  );
@endcode

C++ proxy class (defined in soapDAMISProxy.h):
@code
  class DAMISProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapDAMISService.h):
@code
  class DAMISService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap Damis service method-protocol:	STATPRIMITIVES SOAP
//gsoap Damis service method-style:	STATPRIMITIVES rpc
//gsoap Damis service method-encoding:	STATPRIMITIVES http://schemas.xmlsoap.org/soap/encoding/
//gsoap Damis service method-action:	STATPRIMITIVES ""
//gsoap Damis service method-output-action:	STATPRIMITIVES Response
int Damis__STATPRIMITIVES(
///  X parameter: Kelias iki pradinių duomenų ARFF failo
    std::string                         X,	///< Input parameter
///  maxCalcTime parameter: Maksimali numanoma skaičiavimo trukmė sekundėmis
    int                                 maxCalcTime,	///< Input parameter
    struct Damis__STATPRIMITIVESResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   Damis__CLEANDATA                                                         *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "Damis__CLEANDATAResponse" of operation "Damis__CLEANDATA"
struct Damis__CLEANDATAResponse
{
    std::string                         Y;
    double                              calcTime;
};

/// Operation "Damis__CLEANDATA" of service binding "DAMIS"

/**

Operation details:
Duomen valymas (paalinami objektai neatitinkantys meta informacijos)

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_Damis__CLEANDATA(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         X,
    int                                 maxCalcTime,
    // output parameters:
    struct Damis__CLEANDATAResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int Damis__CLEANDATA(
    struct soap *soap,
    // input parameters:
    std::string                         X,
    int                                 maxCalcTime,
    // output parameters:
    struct Damis__CLEANDATAResponse&
  );
@endcode

C++ proxy class (defined in soapDAMISProxy.h):
@code
  class DAMISProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapDAMISService.h):
@code
  class DAMISService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap Damis service method-protocol:	CLEANDATA SOAP
//gsoap Damis service method-style:	CLEANDATA rpc
//gsoap Damis service method-encoding:	CLEANDATA http://schemas.xmlsoap.org/soap/encoding/
//gsoap Damis service method-action:	CLEANDATA ""
//gsoap Damis service method-output-action:	CLEANDATA Response
int Damis__CLEANDATA(
///  X parameter: Kelias iki pradinių duomenų ARFF failo
    std::string                         X,	///< Input parameter
///  maxCalcTime parameter: Maksimali numanoma skaičiavimo trukmė sekundėmis
    int                                 maxCalcTime,	///< Input parameter
    struct Damis__CLEANDATAResponse    &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   Damis__FILTERDATA                                                        *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "Damis__FILTERDATAResponse" of operation "Damis__FILTERDATA"
struct Damis__FILTERDATAResponse
{
    std::string                         Y;
    double                              calcTime;
};

/// Operation "Damis__FILTERDATA" of service binding "DAMIS"

/**

Operation details:
Duomen filtravimas

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_Damis__FILTERDATA(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         X,
    bool                                retFilteredData,
    double                              zValue,
    int                                 attrIndex,
    int                                 maxCalcTime,
    // output parameters:
    struct Damis__FILTERDATAResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int Damis__FILTERDATA(
    struct soap *soap,
    // input parameters:
    std::string                         X,
    bool                                retFilteredData,
    double                              zValue,
    int                                 attrIndex,
    int                                 maxCalcTime,
    // output parameters:
    struct Damis__FILTERDATAResponse&
  );
@endcode

C++ proxy class (defined in soapDAMISProxy.h):
@code
  class DAMISProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapDAMISService.h):
@code
  class DAMISService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap Damis service method-protocol:	FILTERDATA SOAP
//gsoap Damis service method-style:	FILTERDATA rpc
//gsoap Damis service method-encoding:	FILTERDATA http://schemas.xmlsoap.org/soap/encoding/
//gsoap Damis service method-action:	FILTERDATA ""
//gsoap Damis service method-output-action:	FILTERDATA Response
int Damis__FILTERDATA(
///  X parameter: Kelias iki pradinių duomenų ARFF failo
    std::string                         X,	///< Input parameter
///  retFilteredData parameter: jei retFilteredData = true, grąžinami filtruoti duomenys, kitu atveju - tik atsiskyrėliai
    bool                                retFilteredData,	///< Input parameter
///  zValue parameter: Nurodoma Z reikšmė (3 reiškia 3 sigma taisyklės taikymą)
    double                              zValue,	///< Input parameter
///  attrIndex parameter: Stulpelio,su kuriuo reikia atlikti skaičiavimus, indeksas
    int                                 attrIndex,	///< Input parameter
///  maxCalcTime parameter: Maksimali numanoma skaičiavimo trukmė sekundėmis
    int                                 maxCalcTime,	///< Input parameter
    struct Damis__FILTERDATAResponse   &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   Damis__SPLITDATA                                                         *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "Damis__SPLITDATAResponse" of operation "Damis__SPLITDATA"
struct Damis__SPLITDATAResponse
{
    std::string                         Y;
    std::string                         Yalt;
    double                              calcTime;
};

/// Operation "Damis__SPLITDATA" of service binding "DAMIS"

/**

Operation details:
Duomen skaidymas

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_Damis__SPLITDATA(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         X,
    bool                                reshufleObjects,
    double                              firstSubsetPerc,
    double                              secondSubsetPerc,
    int                                 maxCalcTime,
    // output parameters:
    struct Damis__SPLITDATAResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int Damis__SPLITDATA(
    struct soap *soap,
    // input parameters:
    std::string                         X,
    bool                                reshufleObjects,
    double                              firstSubsetPerc,
    double                              secondSubsetPerc,
    int                                 maxCalcTime,
    // output parameters:
    struct Damis__SPLITDATAResponse&
  );
@endcode

C++ proxy class (defined in soapDAMISProxy.h):
@code
  class DAMISProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapDAMISService.h):
@code
  class DAMISService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap Damis service method-protocol:	SPLITDATA SOAP
//gsoap Damis service method-style:	SPLITDATA rpc
//gsoap Damis service method-encoding:	SPLITDATA http://schemas.xmlsoap.org/soap/encoding/
//gsoap Damis service method-action:	SPLITDATA ""
//gsoap Damis service method-output-action:	SPLITDATA Response
int Damis__SPLITDATA(
///  X parameter: Kelias iki pradinių duomenų ARFF failo
    std::string                         X,	///< Input parameter
///  reshufleObjects parameter: Jei reshufleObjects = true prieš skirstant juos į failus atliekamas jų sumaišymas, priešingu atveju objektai priskiriami  failams  jų tvarkos faile nekeičiant
    bool                                reshufleObjects,	///< Input parameter
///  firstSubsetPerc parameter: Pirmą duomenų failą sudarančių objektų skaičius atsižvelgiant į nurodytą procentą
    double                              firstSubsetPerc,	///< Input parameter
///  secondSubsetPerc parameter: Antrą duomenų failą sudarančių objektų skaičius atsižvelgiant į nurodytą procentą
    double                              secondSubsetPerc,	///< Input parameter
///  maxCalcTime parameter: Maksimali numanoma skaičiavimo trukmė sekundėmis
    int                                 maxCalcTime,	///< Input parameter
    struct Damis__SPLITDATAResponse    &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   Damis__TRANSPOSEDATA                                                     *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "Damis__TRANSPOSEDATAResponse" of operation "Damis__TRANSPOSEDATA"
struct Damis__TRANSPOSEDATAResponse
{
    std::string                         Y;
    double                              calcTime;
};

/// Operation "Damis__TRANSPOSEDATA" of service binding "DAMIS"

/**

Operation details:
Duomen transponavimas

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_Damis__TRANSPOSEDATA(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         X,
    int                                 maxCalcTime,
    // output parameters:
    struct Damis__TRANSPOSEDATAResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int Damis__TRANSPOSEDATA(
    struct soap *soap,
    // input parameters:
    std::string                         X,
    int                                 maxCalcTime,
    // output parameters:
    struct Damis__TRANSPOSEDATAResponse&
  );
@endcode

C++ proxy class (defined in soapDAMISProxy.h):
@code
  class DAMISProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapDAMISService.h):
@code
  class DAMISService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap Damis service method-protocol:	TRANSPOSEDATA SOAP
//gsoap Damis service method-style:	TRANSPOSEDATA rpc
//gsoap Damis service method-encoding:	TRANSPOSEDATA http://schemas.xmlsoap.org/soap/encoding/
//gsoap Damis service method-action:	TRANSPOSEDATA ""
//gsoap Damis service method-output-action:	TRANSPOSEDATA Response
int Damis__TRANSPOSEDATA(
///  X parameter: Kelias iki pradinių duomenų ARFF failo
    std::string                         X,	///< Input parameter
///  maxCalcTime parameter: Maksimali numanoma skaičiavimo trukmė sekundėmis
    int                                 maxCalcTime,	///< Input parameter
    struct Damis__TRANSPOSEDATAResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   Damis__NORMDATA                                                          *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "Damis__NORMDATAResponse" of operation "Damis__NORMDATA"
struct Damis__NORMDATAResponse
{
    std::string                         Y;
    double                              calcTime;
};

/// Operation "Damis__NORMDATA" of service binding "DAMIS"

/**

Operation details:
Duomen normavimas

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_Damis__NORMDATA(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         X,
    bool                                normMeanStd,
    double                              a,
    double                              b,
    int                                 maxCalcTime,
    // output parameters:
    struct Damis__NORMDATAResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int Damis__NORMDATA(
    struct soap *soap,
    // input parameters:
    std::string                         X,
    bool                                normMeanStd,
    double                              a,
    double                              b,
    int                                 maxCalcTime,
    // output parameters:
    struct Damis__NORMDATAResponse&
  );
@endcode

C++ proxy class (defined in soapDAMISProxy.h):
@code
  class DAMISProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapDAMISService.h):
@code
  class DAMISService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap Damis service method-protocol:	NORMDATA SOAP
//gsoap Damis service method-style:	NORMDATA rpc
//gsoap Damis service method-encoding:	NORMDATA http://schemas.xmlsoap.org/soap/encoding/
//gsoap Damis service method-action:	NORMDATA ""
//gsoap Damis service method-output-action:	NORMDATA Response
int Damis__NORMDATA(
///  X parameter: Kelias iki pradinių duomenų ARFF failo
    std::string                         X,	///< Input parameter
///  normMeanStd parameter: Jei normMeanStd = true nurodyti parametrai reiškia vidurkį ir dispersiją, priešingu atveju normuojama į nurodytą intervalą
    bool                                normMeanStd,	///< Input parameter
///  a parameter: Vidurkis arba intervalo apatinis rėžis
    double                              a,	///< Input parameter
///  b parameter: Dispersija arba intervalo viršutinis rėžis
    double                              b,	///< Input parameter
///  maxCalcTime parameter: Maksimali numanoma skaičiavimo trukmė sekundėmis
    int                                 maxCalcTime,	///< Input parameter
    struct Damis__NORMDATAResponse     &	///< Output response struct parameter
);

/**

@page DAMIS Binding "DAMIS"

@section DAMIS_policy_enablers Policy Enablers of Binding  "DAMIS"

Based on policies, this service imports

  - WS-Policy reminders and enablers:
    - WS-Addressing 1.0 (2005/08, accepts 2004/08):
	@code
	#import "wsa5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-Addressing (2004/08):
	@code
	#import "wsa.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-ReliableMessaging 1.0:
	@code
	#import "wsrm5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-ReliableMessaging 1.1:
	@code
	#import "wsrm.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.0 (accepts 1.1):
	@code
	#import "wsse.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.1 (accepts 1.0):
	@code
	#import "wsse11.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - HTTP Digest Authentication:
	@code
	#include "plugin/httpda.h"
	soap_register_plugin(soap, soap_http_da); // register the HTTP DA plugin in your code
	// See the user guide gsoap/doc/httpda/html/index.html
	@endcode
*/


/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read in XML and deserialized from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

Data can be serialized in XML and written to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section Damis Top-level root elements of schema "DAMIS"

*/

/* End of DAMIS.h */
