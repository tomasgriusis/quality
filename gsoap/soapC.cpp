/* soapC.cpp
   Generated by gSOAP 2.8.16 from damis.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.16 2014-05-30 06:46:01 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_double:
		return soap_in_double(soap, NULL, NULL, "xsd:double");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_Damis__NORMDATA:
		return soap_in_Damis__NORMDATA(soap, NULL, NULL, "Damis:NORMDATA");
	case SOAP_TYPE_Damis__NORMDATAResponse:
		return soap_in_Damis__NORMDATAResponse(soap, NULL, NULL, "Damis:NORMDATAResponse");
	case SOAP_TYPE_Damis__TRANSPOSEDATA:
		return soap_in_Damis__TRANSPOSEDATA(soap, NULL, NULL, "Damis:TRANSPOSEDATA");
	case SOAP_TYPE_Damis__TRANSPOSEDATAResponse:
		return soap_in_Damis__TRANSPOSEDATAResponse(soap, NULL, NULL, "Damis:TRANSPOSEDATAResponse");
	case SOAP_TYPE_Damis__SPLITDATA:
		return soap_in_Damis__SPLITDATA(soap, NULL, NULL, "Damis:SPLITDATA");
	case SOAP_TYPE_Damis__SPLITDATAResponse:
		return soap_in_Damis__SPLITDATAResponse(soap, NULL, NULL, "Damis:SPLITDATAResponse");
	case SOAP_TYPE_Damis__FILTERDATA:
		return soap_in_Damis__FILTERDATA(soap, NULL, NULL, "Damis:FILTERDATA");
	case SOAP_TYPE_Damis__FILTERDATAResponse:
		return soap_in_Damis__FILTERDATAResponse(soap, NULL, NULL, "Damis:FILTERDATAResponse");
	case SOAP_TYPE_Damis__CLEANDATA:
		return soap_in_Damis__CLEANDATA(soap, NULL, NULL, "Damis:CLEANDATA");
	case SOAP_TYPE_Damis__CLEANDATAResponse:
		return soap_in_Damis__CLEANDATAResponse(soap, NULL, NULL, "Damis:CLEANDATAResponse");
	case SOAP_TYPE_Damis__STATPRIMITIVES:
		return soap_in_Damis__STATPRIMITIVES(soap, NULL, NULL, "Damis:STATPRIMITIVES");
	case SOAP_TYPE_Damis__STATPRIMITIVESResponse:
		return soap_in_Damis__STATPRIMITIVESResponse(soap, NULL, NULL, "Damis:STATPRIMITIVESResponse");
	case SOAP_TYPE_Damis__KMEANS:
		return soap_in_Damis__KMEANS(soap, NULL, NULL, "Damis:KMEANS");
	case SOAP_TYPE_Damis__KMEANSResponse:
		return soap_in_Damis__KMEANSResponse(soap, NULL, NULL, "Damis:KMEANSResponse");
	case SOAP_TYPE_Damis__DF:
		return soap_in_Damis__DF(soap, NULL, NULL, "Damis:DF");
	case SOAP_TYPE_Damis__DFResponse:
		return soap_in_Damis__DFResponse(soap, NULL, NULL, "Damis:DFResponse");
	case SOAP_TYPE_Damis__MLP:
		return soap_in_Damis__MLP(soap, NULL, NULL, "Damis:MLP");
	case SOAP_TYPE_Damis__MLPResponse:
		return soap_in_Damis__MLPResponse(soap, NULL, NULL, "Damis:MLPResponse");
	case SOAP_TYPE_Damis__SOMMDS:
		return soap_in_Damis__SOMMDS(soap, NULL, NULL, "Damis:SOMMDS");
	case SOAP_TYPE_Damis__SOMMDSResponse:
		return soap_in_Damis__SOMMDSResponse(soap, NULL, NULL, "Damis:SOMMDSResponse");
	case SOAP_TYPE_Damis__SOM:
		return soap_in_Damis__SOM(soap, NULL, NULL, "Damis:SOM");
	case SOAP_TYPE_Damis__SOMResponse:
		return soap_in_Damis__SOMResponse(soap, NULL, NULL, "Damis:SOMResponse");
	case SOAP_TYPE_Damis__SAMANN:
		return soap_in_Damis__SAMANN(soap, NULL, NULL, "Damis:SAMANN");
	case SOAP_TYPE_Damis__SAMANNResponse:
		return soap_in_Damis__SAMANNResponse(soap, NULL, NULL, "Damis:SAMANNResponse");
	case SOAP_TYPE_Damis__RELMDS:
		return soap_in_Damis__RELMDS(soap, NULL, NULL, "Damis:RELMDS");
	case SOAP_TYPE_Damis__RELMDSResponse:
		return soap_in_Damis__RELMDSResponse(soap, NULL, NULL, "Damis:RELMDSResponse");
	case SOAP_TYPE_Damis__DMA:
		return soap_in_Damis__DMA(soap, NULL, NULL, "Damis:DMA");
	case SOAP_TYPE_Damis__DMAResponse:
		return soap_in_Damis__DMAResponse(soap, NULL, NULL, "Damis:DMAResponse");
	case SOAP_TYPE_Damis__SMACOFMDS:
		return soap_in_Damis__SMACOFMDS(soap, NULL, NULL, "Damis:SMACOFMDS");
	case SOAP_TYPE_Damis__SMACOFMDSResponse:
		return soap_in_Damis__SMACOFMDSResponse(soap, NULL, NULL, "Damis:SMACOFMDSResponse");
	case SOAP_TYPE_Damis__PCA:
		return soap_in_Damis__PCA(soap, NULL, NULL, "Damis:PCA");
	case SOAP_TYPE_Damis__PCAResponse:
		return soap_in_Damis__PCAResponse(soap, NULL, NULL, "Damis:PCAResponse");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_double;
			return soap_in_double(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Damis:NORMDATA"))
		{	*type = SOAP_TYPE_Damis__NORMDATA;
			return soap_in_Damis__NORMDATA(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Damis:NORMDATAResponse"))
		{	*type = SOAP_TYPE_Damis__NORMDATAResponse;
			return soap_in_Damis__NORMDATAResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Damis:TRANSPOSEDATA"))
		{	*type = SOAP_TYPE_Damis__TRANSPOSEDATA;
			return soap_in_Damis__TRANSPOSEDATA(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Damis:TRANSPOSEDATAResponse"))
		{	*type = SOAP_TYPE_Damis__TRANSPOSEDATAResponse;
			return soap_in_Damis__TRANSPOSEDATAResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Damis:SPLITDATA"))
		{	*type = SOAP_TYPE_Damis__SPLITDATA;
			return soap_in_Damis__SPLITDATA(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Damis:SPLITDATAResponse"))
		{	*type = SOAP_TYPE_Damis__SPLITDATAResponse;
			return soap_in_Damis__SPLITDATAResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Damis:FILTERDATA"))
		{	*type = SOAP_TYPE_Damis__FILTERDATA;
			return soap_in_Damis__FILTERDATA(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Damis:FILTERDATAResponse"))
		{	*type = SOAP_TYPE_Damis__FILTERDATAResponse;
			return soap_in_Damis__FILTERDATAResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Damis:CLEANDATA"))
		{	*type = SOAP_TYPE_Damis__CLEANDATA;
			return soap_in_Damis__CLEANDATA(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Damis:CLEANDATAResponse"))
		{	*type = SOAP_TYPE_Damis__CLEANDATAResponse;
			return soap_in_Damis__CLEANDATAResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Damis:STATPRIMITIVES"))
		{	*type = SOAP_TYPE_Damis__STATPRIMITIVES;
			return soap_in_Damis__STATPRIMITIVES(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Damis:STATPRIMITIVESResponse"))
		{	*type = SOAP_TYPE_Damis__STATPRIMITIVESResponse;
			return soap_in_Damis__STATPRIMITIVESResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Damis:KMEANS"))
		{	*type = SOAP_TYPE_Damis__KMEANS;
			return soap_in_Damis__KMEANS(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Damis:KMEANSResponse"))
		{	*type = SOAP_TYPE_Damis__KMEANSResponse;
			return soap_in_Damis__KMEANSResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Damis:DF"))
		{	*type = SOAP_TYPE_Damis__DF;
			return soap_in_Damis__DF(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Damis:DFResponse"))
		{	*type = SOAP_TYPE_Damis__DFResponse;
			return soap_in_Damis__DFResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Damis:MLP"))
		{	*type = SOAP_TYPE_Damis__MLP;
			return soap_in_Damis__MLP(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Damis:MLPResponse"))
		{	*type = SOAP_TYPE_Damis__MLPResponse;
			return soap_in_Damis__MLPResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Damis:SOMMDS"))
		{	*type = SOAP_TYPE_Damis__SOMMDS;
			return soap_in_Damis__SOMMDS(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Damis:SOMMDSResponse"))
		{	*type = SOAP_TYPE_Damis__SOMMDSResponse;
			return soap_in_Damis__SOMMDSResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Damis:SOM"))
		{	*type = SOAP_TYPE_Damis__SOM;
			return soap_in_Damis__SOM(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Damis:SOMResponse"))
		{	*type = SOAP_TYPE_Damis__SOMResponse;
			return soap_in_Damis__SOMResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Damis:SAMANN"))
		{	*type = SOAP_TYPE_Damis__SAMANN;
			return soap_in_Damis__SAMANN(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Damis:SAMANNResponse"))
		{	*type = SOAP_TYPE_Damis__SAMANNResponse;
			return soap_in_Damis__SAMANNResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Damis:RELMDS"))
		{	*type = SOAP_TYPE_Damis__RELMDS;
			return soap_in_Damis__RELMDS(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Damis:RELMDSResponse"))
		{	*type = SOAP_TYPE_Damis__RELMDSResponse;
			return soap_in_Damis__RELMDSResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Damis:DMA"))
		{	*type = SOAP_TYPE_Damis__DMA;
			return soap_in_Damis__DMA(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Damis:DMAResponse"))
		{	*type = SOAP_TYPE_Damis__DMAResponse;
			return soap_in_Damis__DMAResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Damis:SMACOFMDS"))
		{	*type = SOAP_TYPE_Damis__SMACOFMDS;
			return soap_in_Damis__SMACOFMDS(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Damis:SMACOFMDSResponse"))
		{	*type = SOAP_TYPE_Damis__SMACOFMDSResponse;
			return soap_in_Damis__SMACOFMDSResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Damis:PCA"))
		{	*type = SOAP_TYPE_Damis__PCA;
			return soap_in_Damis__PCA(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Damis:PCAResponse"))
		{	*type = SOAP_TYPE_Damis__PCAResponse;
			return soap_in_Damis__PCAResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_double:
		return soap_out_double(soap, tag, id, (const double *)ptr, "xsd:double");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_Damis__NORMDATA:
		return soap_out_Damis__NORMDATA(soap, tag, id, (const struct Damis__NORMDATA *)ptr, "Damis:NORMDATA");
	case SOAP_TYPE_Damis__NORMDATAResponse:
		return soap_out_Damis__NORMDATAResponse(soap, tag, id, (const struct Damis__NORMDATAResponse *)ptr, "Damis:NORMDATAResponse");
	case SOAP_TYPE_Damis__TRANSPOSEDATA:
		return soap_out_Damis__TRANSPOSEDATA(soap, tag, id, (const struct Damis__TRANSPOSEDATA *)ptr, "Damis:TRANSPOSEDATA");
	case SOAP_TYPE_Damis__TRANSPOSEDATAResponse:
		return soap_out_Damis__TRANSPOSEDATAResponse(soap, tag, id, (const struct Damis__TRANSPOSEDATAResponse *)ptr, "Damis:TRANSPOSEDATAResponse");
	case SOAP_TYPE_Damis__SPLITDATA:
		return soap_out_Damis__SPLITDATA(soap, tag, id, (const struct Damis__SPLITDATA *)ptr, "Damis:SPLITDATA");
	case SOAP_TYPE_Damis__SPLITDATAResponse:
		return soap_out_Damis__SPLITDATAResponse(soap, tag, id, (const struct Damis__SPLITDATAResponse *)ptr, "Damis:SPLITDATAResponse");
	case SOAP_TYPE_Damis__FILTERDATA:
		return soap_out_Damis__FILTERDATA(soap, tag, id, (const struct Damis__FILTERDATA *)ptr, "Damis:FILTERDATA");
	case SOAP_TYPE_Damis__FILTERDATAResponse:
		return soap_out_Damis__FILTERDATAResponse(soap, tag, id, (const struct Damis__FILTERDATAResponse *)ptr, "Damis:FILTERDATAResponse");
	case SOAP_TYPE_Damis__CLEANDATA:
		return soap_out_Damis__CLEANDATA(soap, tag, id, (const struct Damis__CLEANDATA *)ptr, "Damis:CLEANDATA");
	case SOAP_TYPE_Damis__CLEANDATAResponse:
		return soap_out_Damis__CLEANDATAResponse(soap, tag, id, (const struct Damis__CLEANDATAResponse *)ptr, "Damis:CLEANDATAResponse");
	case SOAP_TYPE_Damis__STATPRIMITIVES:
		return soap_out_Damis__STATPRIMITIVES(soap, tag, id, (const struct Damis__STATPRIMITIVES *)ptr, "Damis:STATPRIMITIVES");
	case SOAP_TYPE_Damis__STATPRIMITIVESResponse:
		return soap_out_Damis__STATPRIMITIVESResponse(soap, tag, id, (const struct Damis__STATPRIMITIVESResponse *)ptr, "Damis:STATPRIMITIVESResponse");
	case SOAP_TYPE_Damis__KMEANS:
		return soap_out_Damis__KMEANS(soap, tag, id, (const struct Damis__KMEANS *)ptr, "Damis:KMEANS");
	case SOAP_TYPE_Damis__KMEANSResponse:
		return soap_out_Damis__KMEANSResponse(soap, tag, id, (const struct Damis__KMEANSResponse *)ptr, "Damis:KMEANSResponse");
	case SOAP_TYPE_Damis__DF:
		return soap_out_Damis__DF(soap, tag, id, (const struct Damis__DF *)ptr, "Damis:DF");
	case SOAP_TYPE_Damis__DFResponse:
		return soap_out_Damis__DFResponse(soap, tag, id, (const struct Damis__DFResponse *)ptr, "Damis:DFResponse");
	case SOAP_TYPE_Damis__MLP:
		return soap_out_Damis__MLP(soap, tag, id, (const struct Damis__MLP *)ptr, "Damis:MLP");
	case SOAP_TYPE_Damis__MLPResponse:
		return soap_out_Damis__MLPResponse(soap, tag, id, (const struct Damis__MLPResponse *)ptr, "Damis:MLPResponse");
	case SOAP_TYPE_Damis__SOMMDS:
		return soap_out_Damis__SOMMDS(soap, tag, id, (const struct Damis__SOMMDS *)ptr, "Damis:SOMMDS");
	case SOAP_TYPE_Damis__SOMMDSResponse:
		return soap_out_Damis__SOMMDSResponse(soap, tag, id, (const struct Damis__SOMMDSResponse *)ptr, "Damis:SOMMDSResponse");
	case SOAP_TYPE_Damis__SOM:
		return soap_out_Damis__SOM(soap, tag, id, (const struct Damis__SOM *)ptr, "Damis:SOM");
	case SOAP_TYPE_Damis__SOMResponse:
		return soap_out_Damis__SOMResponse(soap, tag, id, (const struct Damis__SOMResponse *)ptr, "Damis:SOMResponse");
	case SOAP_TYPE_Damis__SAMANN:
		return soap_out_Damis__SAMANN(soap, tag, id, (const struct Damis__SAMANN *)ptr, "Damis:SAMANN");
	case SOAP_TYPE_Damis__SAMANNResponse:
		return soap_out_Damis__SAMANNResponse(soap, tag, id, (const struct Damis__SAMANNResponse *)ptr, "Damis:SAMANNResponse");
	case SOAP_TYPE_Damis__RELMDS:
		return soap_out_Damis__RELMDS(soap, tag, id, (const struct Damis__RELMDS *)ptr, "Damis:RELMDS");
	case SOAP_TYPE_Damis__RELMDSResponse:
		return soap_out_Damis__RELMDSResponse(soap, tag, id, (const struct Damis__RELMDSResponse *)ptr, "Damis:RELMDSResponse");
	case SOAP_TYPE_Damis__DMA:
		return soap_out_Damis__DMA(soap, tag, id, (const struct Damis__DMA *)ptr, "Damis:DMA");
	case SOAP_TYPE_Damis__DMAResponse:
		return soap_out_Damis__DMAResponse(soap, tag, id, (const struct Damis__DMAResponse *)ptr, "Damis:DMAResponse");
	case SOAP_TYPE_Damis__SMACOFMDS:
		return soap_out_Damis__SMACOFMDS(soap, tag, id, (const struct Damis__SMACOFMDS *)ptr, "Damis:SMACOFMDS");
	case SOAP_TYPE_Damis__SMACOFMDSResponse:
		return soap_out_Damis__SMACOFMDSResponse(soap, tag, id, (const struct Damis__SMACOFMDSResponse *)ptr, "Damis:SMACOFMDSResponse");
	case SOAP_TYPE_Damis__PCA:
		return soap_out_Damis__PCA(soap, tag, id, (const struct Damis__PCA *)ptr, "Damis:PCA");
	case SOAP_TYPE_Damis__PCAResponse:
		return soap_out_Damis__PCAResponse(soap, tag, id, (const struct Damis__PCAResponse *)ptr, "Damis:PCAResponse");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_Damis__NORMDATA:
		soap_serialize_Damis__NORMDATA(soap, (const struct Damis__NORMDATA *)ptr);
		break;
	case SOAP_TYPE_Damis__NORMDATAResponse:
		soap_serialize_Damis__NORMDATAResponse(soap, (const struct Damis__NORMDATAResponse *)ptr);
		break;
	case SOAP_TYPE_Damis__TRANSPOSEDATA:
		soap_serialize_Damis__TRANSPOSEDATA(soap, (const struct Damis__TRANSPOSEDATA *)ptr);
		break;
	case SOAP_TYPE_Damis__TRANSPOSEDATAResponse:
		soap_serialize_Damis__TRANSPOSEDATAResponse(soap, (const struct Damis__TRANSPOSEDATAResponse *)ptr);
		break;
	case SOAP_TYPE_Damis__SPLITDATA:
		soap_serialize_Damis__SPLITDATA(soap, (const struct Damis__SPLITDATA *)ptr);
		break;
	case SOAP_TYPE_Damis__SPLITDATAResponse:
		soap_serialize_Damis__SPLITDATAResponse(soap, (const struct Damis__SPLITDATAResponse *)ptr);
		break;
	case SOAP_TYPE_Damis__FILTERDATA:
		soap_serialize_Damis__FILTERDATA(soap, (const struct Damis__FILTERDATA *)ptr);
		break;
	case SOAP_TYPE_Damis__FILTERDATAResponse:
		soap_serialize_Damis__FILTERDATAResponse(soap, (const struct Damis__FILTERDATAResponse *)ptr);
		break;
	case SOAP_TYPE_Damis__CLEANDATA:
		soap_serialize_Damis__CLEANDATA(soap, (const struct Damis__CLEANDATA *)ptr);
		break;
	case SOAP_TYPE_Damis__CLEANDATAResponse:
		soap_serialize_Damis__CLEANDATAResponse(soap, (const struct Damis__CLEANDATAResponse *)ptr);
		break;
	case SOAP_TYPE_Damis__STATPRIMITIVES:
		soap_serialize_Damis__STATPRIMITIVES(soap, (const struct Damis__STATPRIMITIVES *)ptr);
		break;
	case SOAP_TYPE_Damis__STATPRIMITIVESResponse:
		soap_serialize_Damis__STATPRIMITIVESResponse(soap, (const struct Damis__STATPRIMITIVESResponse *)ptr);
		break;
	case SOAP_TYPE_Damis__KMEANS:
		soap_serialize_Damis__KMEANS(soap, (const struct Damis__KMEANS *)ptr);
		break;
	case SOAP_TYPE_Damis__KMEANSResponse:
		soap_serialize_Damis__KMEANSResponse(soap, (const struct Damis__KMEANSResponse *)ptr);
		break;
	case SOAP_TYPE_Damis__DF:
		soap_serialize_Damis__DF(soap, (const struct Damis__DF *)ptr);
		break;
	case SOAP_TYPE_Damis__DFResponse:
		soap_serialize_Damis__DFResponse(soap, (const struct Damis__DFResponse *)ptr);
		break;
	case SOAP_TYPE_Damis__MLP:
		soap_serialize_Damis__MLP(soap, (const struct Damis__MLP *)ptr);
		break;
	case SOAP_TYPE_Damis__MLPResponse:
		soap_serialize_Damis__MLPResponse(soap, (const struct Damis__MLPResponse *)ptr);
		break;
	case SOAP_TYPE_Damis__SOMMDS:
		soap_serialize_Damis__SOMMDS(soap, (const struct Damis__SOMMDS *)ptr);
		break;
	case SOAP_TYPE_Damis__SOMMDSResponse:
		soap_serialize_Damis__SOMMDSResponse(soap, (const struct Damis__SOMMDSResponse *)ptr);
		break;
	case SOAP_TYPE_Damis__SOM:
		soap_serialize_Damis__SOM(soap, (const struct Damis__SOM *)ptr);
		break;
	case SOAP_TYPE_Damis__SOMResponse:
		soap_serialize_Damis__SOMResponse(soap, (const struct Damis__SOMResponse *)ptr);
		break;
	case SOAP_TYPE_Damis__SAMANN:
		soap_serialize_Damis__SAMANN(soap, (const struct Damis__SAMANN *)ptr);
		break;
	case SOAP_TYPE_Damis__SAMANNResponse:
		soap_serialize_Damis__SAMANNResponse(soap, (const struct Damis__SAMANNResponse *)ptr);
		break;
	case SOAP_TYPE_Damis__RELMDS:
		soap_serialize_Damis__RELMDS(soap, (const struct Damis__RELMDS *)ptr);
		break;
	case SOAP_TYPE_Damis__RELMDSResponse:
		soap_serialize_Damis__RELMDSResponse(soap, (const struct Damis__RELMDSResponse *)ptr);
		break;
	case SOAP_TYPE_Damis__DMA:
		soap_serialize_Damis__DMA(soap, (const struct Damis__DMA *)ptr);
		break;
	case SOAP_TYPE_Damis__DMAResponse:
		soap_serialize_Damis__DMAResponse(soap, (const struct Damis__DMAResponse *)ptr);
		break;
	case SOAP_TYPE_Damis__SMACOFMDS:
		soap_serialize_Damis__SMACOFMDS(soap, (const struct Damis__SMACOFMDS *)ptr);
		break;
	case SOAP_TYPE_Damis__SMACOFMDSResponse:
		soap_serialize_Damis__SMACOFMDSResponse(soap, (const struct Damis__SMACOFMDSResponse *)ptr);
		break;
	case SOAP_TYPE_Damis__PCA:
		soap_serialize_Damis__PCA(soap, (const struct Damis__PCA *)ptr);
		break;
	case SOAP_TYPE_Damis__PCAResponse:
		soap_serialize_Damis__PCAResponse(soap, (const struct Damis__PCAResponse *)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Damis__PCAResponse:
		return (void*)soap_instantiate_Damis__PCAResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Damis__PCA:
		return (void*)soap_instantiate_Damis__PCA(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Damis__SMACOFMDSResponse:
		return (void*)soap_instantiate_Damis__SMACOFMDSResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Damis__SMACOFMDS:
		return (void*)soap_instantiate_Damis__SMACOFMDS(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Damis__DMAResponse:
		return (void*)soap_instantiate_Damis__DMAResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Damis__DMA:
		return (void*)soap_instantiate_Damis__DMA(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Damis__RELMDSResponse:
		return (void*)soap_instantiate_Damis__RELMDSResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Damis__RELMDS:
		return (void*)soap_instantiate_Damis__RELMDS(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Damis__SAMANNResponse:
		return (void*)soap_instantiate_Damis__SAMANNResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Damis__SAMANN:
		return (void*)soap_instantiate_Damis__SAMANN(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Damis__SOMResponse:
		return (void*)soap_instantiate_Damis__SOMResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Damis__SOM:
		return (void*)soap_instantiate_Damis__SOM(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Damis__SOMMDSResponse:
		return (void*)soap_instantiate_Damis__SOMMDSResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Damis__SOMMDS:
		return (void*)soap_instantiate_Damis__SOMMDS(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Damis__MLPResponse:
		return (void*)soap_instantiate_Damis__MLPResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Damis__MLP:
		return (void*)soap_instantiate_Damis__MLP(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Damis__DFResponse:
		return (void*)soap_instantiate_Damis__DFResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Damis__DF:
		return (void*)soap_instantiate_Damis__DF(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Damis__KMEANSResponse:
		return (void*)soap_instantiate_Damis__KMEANSResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Damis__KMEANS:
		return (void*)soap_instantiate_Damis__KMEANS(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Damis__STATPRIMITIVESResponse:
		return (void*)soap_instantiate_Damis__STATPRIMITIVESResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Damis__STATPRIMITIVES:
		return (void*)soap_instantiate_Damis__STATPRIMITIVES(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Damis__CLEANDATAResponse:
		return (void*)soap_instantiate_Damis__CLEANDATAResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Damis__CLEANDATA:
		return (void*)soap_instantiate_Damis__CLEANDATA(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Damis__FILTERDATAResponse:
		return (void*)soap_instantiate_Damis__FILTERDATAResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Damis__FILTERDATA:
		return (void*)soap_instantiate_Damis__FILTERDATA(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Damis__SPLITDATAResponse:
		return (void*)soap_instantiate_Damis__SPLITDATAResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Damis__SPLITDATA:
		return (void*)soap_instantiate_Damis__SPLITDATA(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Damis__TRANSPOSEDATAResponse:
		return (void*)soap_instantiate_Damis__TRANSPOSEDATAResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Damis__TRANSPOSEDATA:
		return (void*)soap_instantiate_Damis__TRANSPOSEDATA(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Damis__NORMDATAResponse:
		return (void*)soap_instantiate_Damis__NORMDATAResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Damis__NORMDATA:
		return (void*)soap_instantiate_Damis__NORMDATA(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_Damis__PCAResponse:
		if (p->size < 0)
			SOAP_DELETE((struct Damis__PCAResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct Damis__PCAResponse*)p->ptr);
		break;
	case SOAP_TYPE_Damis__PCA:
		if (p->size < 0)
			SOAP_DELETE((struct Damis__PCA*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct Damis__PCA*)p->ptr);
		break;
	case SOAP_TYPE_Damis__SMACOFMDSResponse:
		if (p->size < 0)
			SOAP_DELETE((struct Damis__SMACOFMDSResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct Damis__SMACOFMDSResponse*)p->ptr);
		break;
	case SOAP_TYPE_Damis__SMACOFMDS:
		if (p->size < 0)
			SOAP_DELETE((struct Damis__SMACOFMDS*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct Damis__SMACOFMDS*)p->ptr);
		break;
	case SOAP_TYPE_Damis__DMAResponse:
		if (p->size < 0)
			SOAP_DELETE((struct Damis__DMAResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct Damis__DMAResponse*)p->ptr);
		break;
	case SOAP_TYPE_Damis__DMA:
		if (p->size < 0)
			SOAP_DELETE((struct Damis__DMA*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct Damis__DMA*)p->ptr);
		break;
	case SOAP_TYPE_Damis__RELMDSResponse:
		if (p->size < 0)
			SOAP_DELETE((struct Damis__RELMDSResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct Damis__RELMDSResponse*)p->ptr);
		break;
	case SOAP_TYPE_Damis__RELMDS:
		if (p->size < 0)
			SOAP_DELETE((struct Damis__RELMDS*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct Damis__RELMDS*)p->ptr);
		break;
	case SOAP_TYPE_Damis__SAMANNResponse:
		if (p->size < 0)
			SOAP_DELETE((struct Damis__SAMANNResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct Damis__SAMANNResponse*)p->ptr);
		break;
	case SOAP_TYPE_Damis__SAMANN:
		if (p->size < 0)
			SOAP_DELETE((struct Damis__SAMANN*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct Damis__SAMANN*)p->ptr);
		break;
	case SOAP_TYPE_Damis__SOMResponse:
		if (p->size < 0)
			SOAP_DELETE((struct Damis__SOMResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct Damis__SOMResponse*)p->ptr);
		break;
	case SOAP_TYPE_Damis__SOM:
		if (p->size < 0)
			SOAP_DELETE((struct Damis__SOM*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct Damis__SOM*)p->ptr);
		break;
	case SOAP_TYPE_Damis__SOMMDSResponse:
		if (p->size < 0)
			SOAP_DELETE((struct Damis__SOMMDSResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct Damis__SOMMDSResponse*)p->ptr);
		break;
	case SOAP_TYPE_Damis__SOMMDS:
		if (p->size < 0)
			SOAP_DELETE((struct Damis__SOMMDS*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct Damis__SOMMDS*)p->ptr);
		break;
	case SOAP_TYPE_Damis__MLPResponse:
		if (p->size < 0)
			SOAP_DELETE((struct Damis__MLPResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct Damis__MLPResponse*)p->ptr);
		break;
	case SOAP_TYPE_Damis__MLP:
		if (p->size < 0)
			SOAP_DELETE((struct Damis__MLP*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct Damis__MLP*)p->ptr);
		break;
	case SOAP_TYPE_Damis__DFResponse:
		if (p->size < 0)
			SOAP_DELETE((struct Damis__DFResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct Damis__DFResponse*)p->ptr);
		break;
	case SOAP_TYPE_Damis__DF:
		if (p->size < 0)
			SOAP_DELETE((struct Damis__DF*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct Damis__DF*)p->ptr);
		break;
	case SOAP_TYPE_Damis__KMEANSResponse:
		if (p->size < 0)
			SOAP_DELETE((struct Damis__KMEANSResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct Damis__KMEANSResponse*)p->ptr);
		break;
	case SOAP_TYPE_Damis__KMEANS:
		if (p->size < 0)
			SOAP_DELETE((struct Damis__KMEANS*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct Damis__KMEANS*)p->ptr);
		break;
	case SOAP_TYPE_Damis__STATPRIMITIVESResponse:
		if (p->size < 0)
			SOAP_DELETE((struct Damis__STATPRIMITIVESResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct Damis__STATPRIMITIVESResponse*)p->ptr);
		break;
	case SOAP_TYPE_Damis__STATPRIMITIVES:
		if (p->size < 0)
			SOAP_DELETE((struct Damis__STATPRIMITIVES*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct Damis__STATPRIMITIVES*)p->ptr);
		break;
	case SOAP_TYPE_Damis__CLEANDATAResponse:
		if (p->size < 0)
			SOAP_DELETE((struct Damis__CLEANDATAResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct Damis__CLEANDATAResponse*)p->ptr);
		break;
	case SOAP_TYPE_Damis__CLEANDATA:
		if (p->size < 0)
			SOAP_DELETE((struct Damis__CLEANDATA*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct Damis__CLEANDATA*)p->ptr);
		break;
	case SOAP_TYPE_Damis__FILTERDATAResponse:
		if (p->size < 0)
			SOAP_DELETE((struct Damis__FILTERDATAResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct Damis__FILTERDATAResponse*)p->ptr);
		break;
	case SOAP_TYPE_Damis__FILTERDATA:
		if (p->size < 0)
			SOAP_DELETE((struct Damis__FILTERDATA*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct Damis__FILTERDATA*)p->ptr);
		break;
	case SOAP_TYPE_Damis__SPLITDATAResponse:
		if (p->size < 0)
			SOAP_DELETE((struct Damis__SPLITDATAResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct Damis__SPLITDATAResponse*)p->ptr);
		break;
	case SOAP_TYPE_Damis__SPLITDATA:
		if (p->size < 0)
			SOAP_DELETE((struct Damis__SPLITDATA*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct Damis__SPLITDATA*)p->ptr);
		break;
	case SOAP_TYPE_Damis__TRANSPOSEDATAResponse:
		if (p->size < 0)
			SOAP_DELETE((struct Damis__TRANSPOSEDATAResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct Damis__TRANSPOSEDATAResponse*)p->ptr);
		break;
	case SOAP_TYPE_Damis__TRANSPOSEDATA:
		if (p->size < 0)
			SOAP_DELETE((struct Damis__TRANSPOSEDATA*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct Damis__TRANSPOSEDATA*)p->ptr);
		break;
	case SOAP_TYPE_Damis__NORMDATAResponse:
		if (p->size < 0)
			SOAP_DELETE((struct Damis__NORMDATAResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct Damis__NORMDATAResponse*)p->ptr);
		break;
	case SOAP_TYPE_Damis__NORMDATA:
		if (p->size < 0)
			SOAP_DELETE((struct Damis__NORMDATA*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct Damis__NORMDATA*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{
	(void)soap; (void)st; (void)p; (void)len; (void)q; (void)n; /* appease -Wall -Werror */
	switch (tt)
	{
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap *soap, double *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_double
	*a = SOAP_DEFAULT_double;
#else
	*a = (double)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap *soap, const char *tag, int id, const double *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outdouble(soap, tag, id, a, type, SOAP_TYPE_double);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap *soap, const char *tag, double *a, const char *type)
{	double *p;
	p = soap_indouble(soap, tag, a, type, SOAP_TYPE_double);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap *soap, const double *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_double);
	if (soap_out_double(soap, tag?tag:"double", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap *soap, double *p, const char *tag, const char *type)
{
	if ((p = soap_in_double(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{
	(void)soap; /* appease -Wall -Werror */
return soap_code_str(soap_codes_bool, n!=0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_bool);
	if (soap_out_bool(soap, tag?tag:"boolean", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::string, n);
		if (size)
			*size = n * sizeof(std::string);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__NORMDATA(struct soap *soap, struct Damis__NORMDATA *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->X);
	soap_default_bool(soap, &a->normMeanStd);
	soap_default_double(soap, &a->a);
	soap_default_double(soap, &a->b);
	soap_default_int(soap, &a->maxCalcTime);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__NORMDATA(struct soap *soap, const struct Damis__NORMDATA *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->X);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__NORMDATA(struct soap *soap, const char *tag, int id, const struct Damis__NORMDATA *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Damis__NORMDATA), type))
		return soap->error;
	if (soap_out_std__string(soap, "X", -1, &a->X, ""))
		return soap->error;
	if (soap_out_bool(soap, "normMeanStd", -1, &a->normMeanStd, ""))
		return soap->error;
	if (soap_out_double(soap, "a", -1, &a->a, ""))
		return soap->error;
	if (soap_out_double(soap, "b", -1, &a->b, ""))
		return soap->error;
	if (soap_out_int(soap, "maxCalcTime", -1, &a->maxCalcTime, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct Damis__NORMDATA * SOAP_FMAC4 soap_in_Damis__NORMDATA(struct soap *soap, const char *tag, struct Damis__NORMDATA *a, const char *type)
{
	size_t soap_flag_X = 1;
	size_t soap_flag_normMeanStd = 1;
	size_t soap_flag_a = 1;
	size_t soap_flag_b = 1;
	size_t soap_flag_maxCalcTime = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct Damis__NORMDATA *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Damis__NORMDATA, sizeof(struct Damis__NORMDATA), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_Damis__NORMDATA(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_X && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "X", &a->X, "xsd:string"))
				{	soap_flag_X--;
					continue;
				}
			if (soap_flag_normMeanStd && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "normMeanStd", &a->normMeanStd, "xsd:boolean"))
				{	soap_flag_normMeanStd--;
					continue;
				}
			if (soap_flag_a && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "a", &a->a, "xsd:double"))
				{	soap_flag_a--;
					continue;
				}
			if (soap_flag_b && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "b", &a->b, "xsd:double"))
				{	soap_flag_b--;
					continue;
				}
			if (soap_flag_maxCalcTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "maxCalcTime", &a->maxCalcTime, "xsd:int"))
				{	soap_flag_maxCalcTime--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct Damis__NORMDATA *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Damis__NORMDATA, 0, sizeof(struct Damis__NORMDATA), 0, soap_copy_Damis__NORMDATA);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_X > 0 || soap_flag_normMeanStd > 0 || soap_flag_a > 0 || soap_flag_b > 0 || soap_flag_maxCalcTime > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__NORMDATA(struct soap *soap, const struct Damis__NORMDATA *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Damis__NORMDATA);
	if (soap_out_Damis__NORMDATA(soap, tag?tag:"Damis:NORMDATA", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct Damis__NORMDATA * SOAP_FMAC4 soap_get_Damis__NORMDATA(struct soap *soap, struct Damis__NORMDATA *p, const char *tag, const char *type)
{
	if ((p = soap_in_Damis__NORMDATA(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct Damis__NORMDATA * SOAP_FMAC2 soap_instantiate_Damis__NORMDATA(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Damis__NORMDATA(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Damis__NORMDATA, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct Damis__NORMDATA);
		if (size)
			*size = sizeof(struct Damis__NORMDATA);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct Damis__NORMDATA, n);
		if (size)
			*size = n * sizeof(struct Damis__NORMDATA);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct Damis__NORMDATA*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__NORMDATA(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct Damis__NORMDATA %p -> %p\n", q, p));
	*(struct Damis__NORMDATA*)p = *(struct Damis__NORMDATA*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__NORMDATAResponse(struct soap *soap, struct Damis__NORMDATAResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->Y);
	soap_default_double(soap, &a->calcTime);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__NORMDATAResponse(struct soap *soap, const struct Damis__NORMDATAResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->Y);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__NORMDATAResponse(struct soap *soap, const char *tag, int id, const struct Damis__NORMDATAResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Damis__NORMDATAResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "Y", -1, &a->Y, ""))
		return soap->error;
	if (soap_out_double(soap, "calcTime", -1, &a->calcTime, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct Damis__NORMDATAResponse * SOAP_FMAC4 soap_in_Damis__NORMDATAResponse(struct soap *soap, const char *tag, struct Damis__NORMDATAResponse *a, const char *type)
{
	size_t soap_flag_Y = 1;
	size_t soap_flag_calcTime = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct Damis__NORMDATAResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Damis__NORMDATAResponse, sizeof(struct Damis__NORMDATAResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_Damis__NORMDATAResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Y && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Y", &a->Y, "xsd:string"))
				{	soap_flag_Y--;
					continue;
				}
			if (soap_flag_calcTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "calcTime", &a->calcTime, "xsd:double"))
				{	soap_flag_calcTime--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct Damis__NORMDATAResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Damis__NORMDATAResponse, 0, sizeof(struct Damis__NORMDATAResponse), 0, soap_copy_Damis__NORMDATAResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Y > 0 || soap_flag_calcTime > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__NORMDATAResponse(struct soap *soap, const struct Damis__NORMDATAResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Damis__NORMDATAResponse);
	if (soap_out_Damis__NORMDATAResponse(soap, tag?tag:"Damis:NORMDATAResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct Damis__NORMDATAResponse * SOAP_FMAC4 soap_get_Damis__NORMDATAResponse(struct soap *soap, struct Damis__NORMDATAResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_Damis__NORMDATAResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct Damis__NORMDATAResponse * SOAP_FMAC2 soap_instantiate_Damis__NORMDATAResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Damis__NORMDATAResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Damis__NORMDATAResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct Damis__NORMDATAResponse);
		if (size)
			*size = sizeof(struct Damis__NORMDATAResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct Damis__NORMDATAResponse, n);
		if (size)
			*size = n * sizeof(struct Damis__NORMDATAResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct Damis__NORMDATAResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__NORMDATAResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct Damis__NORMDATAResponse %p -> %p\n", q, p));
	*(struct Damis__NORMDATAResponse*)p = *(struct Damis__NORMDATAResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__TRANSPOSEDATA(struct soap *soap, struct Damis__TRANSPOSEDATA *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->X);
	soap_default_int(soap, &a->maxCalcTime);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__TRANSPOSEDATA(struct soap *soap, const struct Damis__TRANSPOSEDATA *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->X);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__TRANSPOSEDATA(struct soap *soap, const char *tag, int id, const struct Damis__TRANSPOSEDATA *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Damis__TRANSPOSEDATA), type))
		return soap->error;
	if (soap_out_std__string(soap, "X", -1, &a->X, ""))
		return soap->error;
	if (soap_out_int(soap, "maxCalcTime", -1, &a->maxCalcTime, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct Damis__TRANSPOSEDATA * SOAP_FMAC4 soap_in_Damis__TRANSPOSEDATA(struct soap *soap, const char *tag, struct Damis__TRANSPOSEDATA *a, const char *type)
{
	size_t soap_flag_X = 1;
	size_t soap_flag_maxCalcTime = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct Damis__TRANSPOSEDATA *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Damis__TRANSPOSEDATA, sizeof(struct Damis__TRANSPOSEDATA), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_Damis__TRANSPOSEDATA(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_X && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "X", &a->X, "xsd:string"))
				{	soap_flag_X--;
					continue;
				}
			if (soap_flag_maxCalcTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "maxCalcTime", &a->maxCalcTime, "xsd:int"))
				{	soap_flag_maxCalcTime--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct Damis__TRANSPOSEDATA *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Damis__TRANSPOSEDATA, 0, sizeof(struct Damis__TRANSPOSEDATA), 0, soap_copy_Damis__TRANSPOSEDATA);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_X > 0 || soap_flag_maxCalcTime > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__TRANSPOSEDATA(struct soap *soap, const struct Damis__TRANSPOSEDATA *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Damis__TRANSPOSEDATA);
	if (soap_out_Damis__TRANSPOSEDATA(soap, tag?tag:"Damis:TRANSPOSEDATA", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct Damis__TRANSPOSEDATA * SOAP_FMAC4 soap_get_Damis__TRANSPOSEDATA(struct soap *soap, struct Damis__TRANSPOSEDATA *p, const char *tag, const char *type)
{
	if ((p = soap_in_Damis__TRANSPOSEDATA(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct Damis__TRANSPOSEDATA * SOAP_FMAC2 soap_instantiate_Damis__TRANSPOSEDATA(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Damis__TRANSPOSEDATA(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Damis__TRANSPOSEDATA, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct Damis__TRANSPOSEDATA);
		if (size)
			*size = sizeof(struct Damis__TRANSPOSEDATA);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct Damis__TRANSPOSEDATA, n);
		if (size)
			*size = n * sizeof(struct Damis__TRANSPOSEDATA);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct Damis__TRANSPOSEDATA*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__TRANSPOSEDATA(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct Damis__TRANSPOSEDATA %p -> %p\n", q, p));
	*(struct Damis__TRANSPOSEDATA*)p = *(struct Damis__TRANSPOSEDATA*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__TRANSPOSEDATAResponse(struct soap *soap, struct Damis__TRANSPOSEDATAResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->Y);
	soap_default_double(soap, &a->calcTime);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__TRANSPOSEDATAResponse(struct soap *soap, const struct Damis__TRANSPOSEDATAResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->Y);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__TRANSPOSEDATAResponse(struct soap *soap, const char *tag, int id, const struct Damis__TRANSPOSEDATAResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Damis__TRANSPOSEDATAResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "Y", -1, &a->Y, ""))
		return soap->error;
	if (soap_out_double(soap, "calcTime", -1, &a->calcTime, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct Damis__TRANSPOSEDATAResponse * SOAP_FMAC4 soap_in_Damis__TRANSPOSEDATAResponse(struct soap *soap, const char *tag, struct Damis__TRANSPOSEDATAResponse *a, const char *type)
{
	size_t soap_flag_Y = 1;
	size_t soap_flag_calcTime = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct Damis__TRANSPOSEDATAResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Damis__TRANSPOSEDATAResponse, sizeof(struct Damis__TRANSPOSEDATAResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_Damis__TRANSPOSEDATAResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Y && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Y", &a->Y, "xsd:string"))
				{	soap_flag_Y--;
					continue;
				}
			if (soap_flag_calcTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "calcTime", &a->calcTime, "xsd:double"))
				{	soap_flag_calcTime--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct Damis__TRANSPOSEDATAResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Damis__TRANSPOSEDATAResponse, 0, sizeof(struct Damis__TRANSPOSEDATAResponse), 0, soap_copy_Damis__TRANSPOSEDATAResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Y > 0 || soap_flag_calcTime > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__TRANSPOSEDATAResponse(struct soap *soap, const struct Damis__TRANSPOSEDATAResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Damis__TRANSPOSEDATAResponse);
	if (soap_out_Damis__TRANSPOSEDATAResponse(soap, tag?tag:"Damis:TRANSPOSEDATAResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct Damis__TRANSPOSEDATAResponse * SOAP_FMAC4 soap_get_Damis__TRANSPOSEDATAResponse(struct soap *soap, struct Damis__TRANSPOSEDATAResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_Damis__TRANSPOSEDATAResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct Damis__TRANSPOSEDATAResponse * SOAP_FMAC2 soap_instantiate_Damis__TRANSPOSEDATAResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Damis__TRANSPOSEDATAResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Damis__TRANSPOSEDATAResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct Damis__TRANSPOSEDATAResponse);
		if (size)
			*size = sizeof(struct Damis__TRANSPOSEDATAResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct Damis__TRANSPOSEDATAResponse, n);
		if (size)
			*size = n * sizeof(struct Damis__TRANSPOSEDATAResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct Damis__TRANSPOSEDATAResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__TRANSPOSEDATAResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct Damis__TRANSPOSEDATAResponse %p -> %p\n", q, p));
	*(struct Damis__TRANSPOSEDATAResponse*)p = *(struct Damis__TRANSPOSEDATAResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__SPLITDATA(struct soap *soap, struct Damis__SPLITDATA *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->X);
	soap_default_bool(soap, &a->reshufleObjects);
	soap_default_double(soap, &a->firstSubsetPerc);
	soap_default_double(soap, &a->secondSubsetPerc);
	soap_default_int(soap, &a->maxCalcTime);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__SPLITDATA(struct soap *soap, const struct Damis__SPLITDATA *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->X);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__SPLITDATA(struct soap *soap, const char *tag, int id, const struct Damis__SPLITDATA *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Damis__SPLITDATA), type))
		return soap->error;
	if (soap_out_std__string(soap, "X", -1, &a->X, ""))
		return soap->error;
	if (soap_out_bool(soap, "reshufleObjects", -1, &a->reshufleObjects, ""))
		return soap->error;
	if (soap_out_double(soap, "firstSubsetPerc", -1, &a->firstSubsetPerc, ""))
		return soap->error;
	if (soap_out_double(soap, "secondSubsetPerc", -1, &a->secondSubsetPerc, ""))
		return soap->error;
	if (soap_out_int(soap, "maxCalcTime", -1, &a->maxCalcTime, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct Damis__SPLITDATA * SOAP_FMAC4 soap_in_Damis__SPLITDATA(struct soap *soap, const char *tag, struct Damis__SPLITDATA *a, const char *type)
{
	size_t soap_flag_X = 1;
	size_t soap_flag_reshufleObjects = 1;
	size_t soap_flag_firstSubsetPerc = 1;
	size_t soap_flag_secondSubsetPerc = 1;
	size_t soap_flag_maxCalcTime = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct Damis__SPLITDATA *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Damis__SPLITDATA, sizeof(struct Damis__SPLITDATA), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_Damis__SPLITDATA(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_X && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "X", &a->X, "xsd:string"))
				{	soap_flag_X--;
					continue;
				}
			if (soap_flag_reshufleObjects && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "reshufleObjects", &a->reshufleObjects, "xsd:boolean"))
				{	soap_flag_reshufleObjects--;
					continue;
				}
			if (soap_flag_firstSubsetPerc && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "firstSubsetPerc", &a->firstSubsetPerc, "xsd:double"))
				{	soap_flag_firstSubsetPerc--;
					continue;
				}
			if (soap_flag_secondSubsetPerc && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "secondSubsetPerc", &a->secondSubsetPerc, "xsd:double"))
				{	soap_flag_secondSubsetPerc--;
					continue;
				}
			if (soap_flag_maxCalcTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "maxCalcTime", &a->maxCalcTime, "xsd:int"))
				{	soap_flag_maxCalcTime--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct Damis__SPLITDATA *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Damis__SPLITDATA, 0, sizeof(struct Damis__SPLITDATA), 0, soap_copy_Damis__SPLITDATA);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_X > 0 || soap_flag_reshufleObjects > 0 || soap_flag_firstSubsetPerc > 0 || soap_flag_secondSubsetPerc > 0 || soap_flag_maxCalcTime > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__SPLITDATA(struct soap *soap, const struct Damis__SPLITDATA *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Damis__SPLITDATA);
	if (soap_out_Damis__SPLITDATA(soap, tag?tag:"Damis:SPLITDATA", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct Damis__SPLITDATA * SOAP_FMAC4 soap_get_Damis__SPLITDATA(struct soap *soap, struct Damis__SPLITDATA *p, const char *tag, const char *type)
{
	if ((p = soap_in_Damis__SPLITDATA(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct Damis__SPLITDATA * SOAP_FMAC2 soap_instantiate_Damis__SPLITDATA(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Damis__SPLITDATA(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Damis__SPLITDATA, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct Damis__SPLITDATA);
		if (size)
			*size = sizeof(struct Damis__SPLITDATA);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct Damis__SPLITDATA, n);
		if (size)
			*size = n * sizeof(struct Damis__SPLITDATA);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct Damis__SPLITDATA*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__SPLITDATA(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct Damis__SPLITDATA %p -> %p\n", q, p));
	*(struct Damis__SPLITDATA*)p = *(struct Damis__SPLITDATA*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__SPLITDATAResponse(struct soap *soap, struct Damis__SPLITDATAResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->Y);
	soap_default_std__string(soap, &a->Yalt);
	soap_default_double(soap, &a->calcTime);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__SPLITDATAResponse(struct soap *soap, const struct Damis__SPLITDATAResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->Y);
	soap_serialize_std__string(soap, &a->Yalt);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__SPLITDATAResponse(struct soap *soap, const char *tag, int id, const struct Damis__SPLITDATAResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Damis__SPLITDATAResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "Y", -1, &a->Y, ""))
		return soap->error;
	if (soap_out_std__string(soap, "Yalt", -1, &a->Yalt, ""))
		return soap->error;
	if (soap_out_double(soap, "calcTime", -1, &a->calcTime, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct Damis__SPLITDATAResponse * SOAP_FMAC4 soap_in_Damis__SPLITDATAResponse(struct soap *soap, const char *tag, struct Damis__SPLITDATAResponse *a, const char *type)
{
	size_t soap_flag_Y = 1;
	size_t soap_flag_Yalt = 1;
	size_t soap_flag_calcTime = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct Damis__SPLITDATAResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Damis__SPLITDATAResponse, sizeof(struct Damis__SPLITDATAResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_Damis__SPLITDATAResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Y && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Y", &a->Y, "xsd:string"))
				{	soap_flag_Y--;
					continue;
				}
			if (soap_flag_Yalt && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Yalt", &a->Yalt, "xsd:string"))
				{	soap_flag_Yalt--;
					continue;
				}
			if (soap_flag_calcTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "calcTime", &a->calcTime, "xsd:double"))
				{	soap_flag_calcTime--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct Damis__SPLITDATAResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Damis__SPLITDATAResponse, 0, sizeof(struct Damis__SPLITDATAResponse), 0, soap_copy_Damis__SPLITDATAResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Y > 0 || soap_flag_Yalt > 0 || soap_flag_calcTime > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__SPLITDATAResponse(struct soap *soap, const struct Damis__SPLITDATAResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Damis__SPLITDATAResponse);
	if (soap_out_Damis__SPLITDATAResponse(soap, tag?tag:"Damis:SPLITDATAResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct Damis__SPLITDATAResponse * SOAP_FMAC4 soap_get_Damis__SPLITDATAResponse(struct soap *soap, struct Damis__SPLITDATAResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_Damis__SPLITDATAResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct Damis__SPLITDATAResponse * SOAP_FMAC2 soap_instantiate_Damis__SPLITDATAResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Damis__SPLITDATAResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Damis__SPLITDATAResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct Damis__SPLITDATAResponse);
		if (size)
			*size = sizeof(struct Damis__SPLITDATAResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct Damis__SPLITDATAResponse, n);
		if (size)
			*size = n * sizeof(struct Damis__SPLITDATAResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct Damis__SPLITDATAResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__SPLITDATAResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct Damis__SPLITDATAResponse %p -> %p\n", q, p));
	*(struct Damis__SPLITDATAResponse*)p = *(struct Damis__SPLITDATAResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__FILTERDATA(struct soap *soap, struct Damis__FILTERDATA *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->X);
	soap_default_bool(soap, &a->retFilteredData);
	soap_default_double(soap, &a->zValue);
	soap_default_int(soap, &a->attrIndex);
	soap_default_int(soap, &a->maxCalcTime);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__FILTERDATA(struct soap *soap, const struct Damis__FILTERDATA *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->X);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__FILTERDATA(struct soap *soap, const char *tag, int id, const struct Damis__FILTERDATA *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Damis__FILTERDATA), type))
		return soap->error;
	if (soap_out_std__string(soap, "X", -1, &a->X, ""))
		return soap->error;
	if (soap_out_bool(soap, "retFilteredData", -1, &a->retFilteredData, ""))
		return soap->error;
	if (soap_out_double(soap, "zValue", -1, &a->zValue, ""))
		return soap->error;
	if (soap_out_int(soap, "attrIndex", -1, &a->attrIndex, ""))
		return soap->error;
	if (soap_out_int(soap, "maxCalcTime", -1, &a->maxCalcTime, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct Damis__FILTERDATA * SOAP_FMAC4 soap_in_Damis__FILTERDATA(struct soap *soap, const char *tag, struct Damis__FILTERDATA *a, const char *type)
{
	size_t soap_flag_X = 1;
	size_t soap_flag_retFilteredData = 1;
	size_t soap_flag_zValue = 1;
	size_t soap_flag_attrIndex = 1;
	size_t soap_flag_maxCalcTime = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct Damis__FILTERDATA *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Damis__FILTERDATA, sizeof(struct Damis__FILTERDATA), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_Damis__FILTERDATA(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_X && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "X", &a->X, "xsd:string"))
				{	soap_flag_X--;
					continue;
				}
			if (soap_flag_retFilteredData && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "retFilteredData", &a->retFilteredData, "xsd:boolean"))
				{	soap_flag_retFilteredData--;
					continue;
				}
			if (soap_flag_zValue && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "zValue", &a->zValue, "xsd:double"))
				{	soap_flag_zValue--;
					continue;
				}
			if (soap_flag_attrIndex && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "attrIndex", &a->attrIndex, "xsd:int"))
				{	soap_flag_attrIndex--;
					continue;
				}
			if (soap_flag_maxCalcTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "maxCalcTime", &a->maxCalcTime, "xsd:int"))
				{	soap_flag_maxCalcTime--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct Damis__FILTERDATA *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Damis__FILTERDATA, 0, sizeof(struct Damis__FILTERDATA), 0, soap_copy_Damis__FILTERDATA);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_X > 0 || soap_flag_retFilteredData > 0 || soap_flag_zValue > 0 || soap_flag_attrIndex > 0 || soap_flag_maxCalcTime > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__FILTERDATA(struct soap *soap, const struct Damis__FILTERDATA *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Damis__FILTERDATA);
	if (soap_out_Damis__FILTERDATA(soap, tag?tag:"Damis:FILTERDATA", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct Damis__FILTERDATA * SOAP_FMAC4 soap_get_Damis__FILTERDATA(struct soap *soap, struct Damis__FILTERDATA *p, const char *tag, const char *type)
{
	if ((p = soap_in_Damis__FILTERDATA(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct Damis__FILTERDATA * SOAP_FMAC2 soap_instantiate_Damis__FILTERDATA(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Damis__FILTERDATA(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Damis__FILTERDATA, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct Damis__FILTERDATA);
		if (size)
			*size = sizeof(struct Damis__FILTERDATA);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct Damis__FILTERDATA, n);
		if (size)
			*size = n * sizeof(struct Damis__FILTERDATA);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct Damis__FILTERDATA*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__FILTERDATA(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct Damis__FILTERDATA %p -> %p\n", q, p));
	*(struct Damis__FILTERDATA*)p = *(struct Damis__FILTERDATA*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__FILTERDATAResponse(struct soap *soap, struct Damis__FILTERDATAResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->Y);
	soap_default_double(soap, &a->calcTime);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__FILTERDATAResponse(struct soap *soap, const struct Damis__FILTERDATAResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->Y);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__FILTERDATAResponse(struct soap *soap, const char *tag, int id, const struct Damis__FILTERDATAResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Damis__FILTERDATAResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "Y", -1, &a->Y, ""))
		return soap->error;
	if (soap_out_double(soap, "calcTime", -1, &a->calcTime, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct Damis__FILTERDATAResponse * SOAP_FMAC4 soap_in_Damis__FILTERDATAResponse(struct soap *soap, const char *tag, struct Damis__FILTERDATAResponse *a, const char *type)
{
	size_t soap_flag_Y = 1;
	size_t soap_flag_calcTime = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct Damis__FILTERDATAResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Damis__FILTERDATAResponse, sizeof(struct Damis__FILTERDATAResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_Damis__FILTERDATAResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Y && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Y", &a->Y, "xsd:string"))
				{	soap_flag_Y--;
					continue;
				}
			if (soap_flag_calcTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "calcTime", &a->calcTime, "xsd:double"))
				{	soap_flag_calcTime--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct Damis__FILTERDATAResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Damis__FILTERDATAResponse, 0, sizeof(struct Damis__FILTERDATAResponse), 0, soap_copy_Damis__FILTERDATAResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Y > 0 || soap_flag_calcTime > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__FILTERDATAResponse(struct soap *soap, const struct Damis__FILTERDATAResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Damis__FILTERDATAResponse);
	if (soap_out_Damis__FILTERDATAResponse(soap, tag?tag:"Damis:FILTERDATAResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct Damis__FILTERDATAResponse * SOAP_FMAC4 soap_get_Damis__FILTERDATAResponse(struct soap *soap, struct Damis__FILTERDATAResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_Damis__FILTERDATAResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct Damis__FILTERDATAResponse * SOAP_FMAC2 soap_instantiate_Damis__FILTERDATAResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Damis__FILTERDATAResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Damis__FILTERDATAResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct Damis__FILTERDATAResponse);
		if (size)
			*size = sizeof(struct Damis__FILTERDATAResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct Damis__FILTERDATAResponse, n);
		if (size)
			*size = n * sizeof(struct Damis__FILTERDATAResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct Damis__FILTERDATAResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__FILTERDATAResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct Damis__FILTERDATAResponse %p -> %p\n", q, p));
	*(struct Damis__FILTERDATAResponse*)p = *(struct Damis__FILTERDATAResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__CLEANDATA(struct soap *soap, struct Damis__CLEANDATA *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->X);
	soap_default_int(soap, &a->maxCalcTime);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__CLEANDATA(struct soap *soap, const struct Damis__CLEANDATA *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->X);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__CLEANDATA(struct soap *soap, const char *tag, int id, const struct Damis__CLEANDATA *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Damis__CLEANDATA), type))
		return soap->error;
	if (soap_out_std__string(soap, "X", -1, &a->X, ""))
		return soap->error;
	if (soap_out_int(soap, "maxCalcTime", -1, &a->maxCalcTime, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct Damis__CLEANDATA * SOAP_FMAC4 soap_in_Damis__CLEANDATA(struct soap *soap, const char *tag, struct Damis__CLEANDATA *a, const char *type)
{
	size_t soap_flag_X = 1;
	size_t soap_flag_maxCalcTime = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct Damis__CLEANDATA *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Damis__CLEANDATA, sizeof(struct Damis__CLEANDATA), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_Damis__CLEANDATA(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_X && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "X", &a->X, "xsd:string"))
				{	soap_flag_X--;
					continue;
				}
			if (soap_flag_maxCalcTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "maxCalcTime", &a->maxCalcTime, "xsd:int"))
				{	soap_flag_maxCalcTime--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct Damis__CLEANDATA *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Damis__CLEANDATA, 0, sizeof(struct Damis__CLEANDATA), 0, soap_copy_Damis__CLEANDATA);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_X > 0 || soap_flag_maxCalcTime > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__CLEANDATA(struct soap *soap, const struct Damis__CLEANDATA *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Damis__CLEANDATA);
	if (soap_out_Damis__CLEANDATA(soap, tag?tag:"Damis:CLEANDATA", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct Damis__CLEANDATA * SOAP_FMAC4 soap_get_Damis__CLEANDATA(struct soap *soap, struct Damis__CLEANDATA *p, const char *tag, const char *type)
{
	if ((p = soap_in_Damis__CLEANDATA(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct Damis__CLEANDATA * SOAP_FMAC2 soap_instantiate_Damis__CLEANDATA(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Damis__CLEANDATA(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Damis__CLEANDATA, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct Damis__CLEANDATA);
		if (size)
			*size = sizeof(struct Damis__CLEANDATA);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct Damis__CLEANDATA, n);
		if (size)
			*size = n * sizeof(struct Damis__CLEANDATA);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct Damis__CLEANDATA*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__CLEANDATA(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct Damis__CLEANDATA %p -> %p\n", q, p));
	*(struct Damis__CLEANDATA*)p = *(struct Damis__CLEANDATA*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__CLEANDATAResponse(struct soap *soap, struct Damis__CLEANDATAResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->Y);
	soap_default_double(soap, &a->calcTime);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__CLEANDATAResponse(struct soap *soap, const struct Damis__CLEANDATAResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->Y);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__CLEANDATAResponse(struct soap *soap, const char *tag, int id, const struct Damis__CLEANDATAResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Damis__CLEANDATAResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "Y", -1, &a->Y, ""))
		return soap->error;
	if (soap_out_double(soap, "calcTime", -1, &a->calcTime, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct Damis__CLEANDATAResponse * SOAP_FMAC4 soap_in_Damis__CLEANDATAResponse(struct soap *soap, const char *tag, struct Damis__CLEANDATAResponse *a, const char *type)
{
	size_t soap_flag_Y = 1;
	size_t soap_flag_calcTime = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct Damis__CLEANDATAResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Damis__CLEANDATAResponse, sizeof(struct Damis__CLEANDATAResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_Damis__CLEANDATAResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Y && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Y", &a->Y, "xsd:string"))
				{	soap_flag_Y--;
					continue;
				}
			if (soap_flag_calcTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "calcTime", &a->calcTime, "xsd:double"))
				{	soap_flag_calcTime--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct Damis__CLEANDATAResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Damis__CLEANDATAResponse, 0, sizeof(struct Damis__CLEANDATAResponse), 0, soap_copy_Damis__CLEANDATAResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Y > 0 || soap_flag_calcTime > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__CLEANDATAResponse(struct soap *soap, const struct Damis__CLEANDATAResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Damis__CLEANDATAResponse);
	if (soap_out_Damis__CLEANDATAResponse(soap, tag?tag:"Damis:CLEANDATAResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct Damis__CLEANDATAResponse * SOAP_FMAC4 soap_get_Damis__CLEANDATAResponse(struct soap *soap, struct Damis__CLEANDATAResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_Damis__CLEANDATAResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct Damis__CLEANDATAResponse * SOAP_FMAC2 soap_instantiate_Damis__CLEANDATAResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Damis__CLEANDATAResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Damis__CLEANDATAResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct Damis__CLEANDATAResponse);
		if (size)
			*size = sizeof(struct Damis__CLEANDATAResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct Damis__CLEANDATAResponse, n);
		if (size)
			*size = n * sizeof(struct Damis__CLEANDATAResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct Damis__CLEANDATAResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__CLEANDATAResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct Damis__CLEANDATAResponse %p -> %p\n", q, p));
	*(struct Damis__CLEANDATAResponse*)p = *(struct Damis__CLEANDATAResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__STATPRIMITIVES(struct soap *soap, struct Damis__STATPRIMITIVES *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->X);
	soap_default_int(soap, &a->maxCalcTime);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__STATPRIMITIVES(struct soap *soap, const struct Damis__STATPRIMITIVES *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->X);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__STATPRIMITIVES(struct soap *soap, const char *tag, int id, const struct Damis__STATPRIMITIVES *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Damis__STATPRIMITIVES), type))
		return soap->error;
	if (soap_out_std__string(soap, "X", -1, &a->X, ""))
		return soap->error;
	if (soap_out_int(soap, "maxCalcTime", -1, &a->maxCalcTime, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct Damis__STATPRIMITIVES * SOAP_FMAC4 soap_in_Damis__STATPRIMITIVES(struct soap *soap, const char *tag, struct Damis__STATPRIMITIVES *a, const char *type)
{
	size_t soap_flag_X = 1;
	size_t soap_flag_maxCalcTime = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct Damis__STATPRIMITIVES *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Damis__STATPRIMITIVES, sizeof(struct Damis__STATPRIMITIVES), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_Damis__STATPRIMITIVES(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_X && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "X", &a->X, "xsd:string"))
				{	soap_flag_X--;
					continue;
				}
			if (soap_flag_maxCalcTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "maxCalcTime", &a->maxCalcTime, "xsd:int"))
				{	soap_flag_maxCalcTime--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct Damis__STATPRIMITIVES *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Damis__STATPRIMITIVES, 0, sizeof(struct Damis__STATPRIMITIVES), 0, soap_copy_Damis__STATPRIMITIVES);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_X > 0 || soap_flag_maxCalcTime > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__STATPRIMITIVES(struct soap *soap, const struct Damis__STATPRIMITIVES *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Damis__STATPRIMITIVES);
	if (soap_out_Damis__STATPRIMITIVES(soap, tag?tag:"Damis:STATPRIMITIVES", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct Damis__STATPRIMITIVES * SOAP_FMAC4 soap_get_Damis__STATPRIMITIVES(struct soap *soap, struct Damis__STATPRIMITIVES *p, const char *tag, const char *type)
{
	if ((p = soap_in_Damis__STATPRIMITIVES(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct Damis__STATPRIMITIVES * SOAP_FMAC2 soap_instantiate_Damis__STATPRIMITIVES(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Damis__STATPRIMITIVES(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Damis__STATPRIMITIVES, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct Damis__STATPRIMITIVES);
		if (size)
			*size = sizeof(struct Damis__STATPRIMITIVES);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct Damis__STATPRIMITIVES, n);
		if (size)
			*size = n * sizeof(struct Damis__STATPRIMITIVES);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct Damis__STATPRIMITIVES*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__STATPRIMITIVES(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct Damis__STATPRIMITIVES %p -> %p\n", q, p));
	*(struct Damis__STATPRIMITIVES*)p = *(struct Damis__STATPRIMITIVES*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__STATPRIMITIVESResponse(struct soap *soap, struct Damis__STATPRIMITIVESResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->Y);
	soap_default_double(soap, &a->calcTime);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__STATPRIMITIVESResponse(struct soap *soap, const struct Damis__STATPRIMITIVESResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->Y);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__STATPRIMITIVESResponse(struct soap *soap, const char *tag, int id, const struct Damis__STATPRIMITIVESResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Damis__STATPRIMITIVESResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "Y", -1, &a->Y, ""))
		return soap->error;
	if (soap_out_double(soap, "calcTime", -1, &a->calcTime, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct Damis__STATPRIMITIVESResponse * SOAP_FMAC4 soap_in_Damis__STATPRIMITIVESResponse(struct soap *soap, const char *tag, struct Damis__STATPRIMITIVESResponse *a, const char *type)
{
	size_t soap_flag_Y = 1;
	size_t soap_flag_calcTime = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct Damis__STATPRIMITIVESResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Damis__STATPRIMITIVESResponse, sizeof(struct Damis__STATPRIMITIVESResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_Damis__STATPRIMITIVESResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Y && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Y", &a->Y, "xsd:string"))
				{	soap_flag_Y--;
					continue;
				}
			if (soap_flag_calcTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "calcTime", &a->calcTime, "xsd:double"))
				{	soap_flag_calcTime--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct Damis__STATPRIMITIVESResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Damis__STATPRIMITIVESResponse, 0, sizeof(struct Damis__STATPRIMITIVESResponse), 0, soap_copy_Damis__STATPRIMITIVESResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Y > 0 || soap_flag_calcTime > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__STATPRIMITIVESResponse(struct soap *soap, const struct Damis__STATPRIMITIVESResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Damis__STATPRIMITIVESResponse);
	if (soap_out_Damis__STATPRIMITIVESResponse(soap, tag?tag:"Damis:STATPRIMITIVESResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct Damis__STATPRIMITIVESResponse * SOAP_FMAC4 soap_get_Damis__STATPRIMITIVESResponse(struct soap *soap, struct Damis__STATPRIMITIVESResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_Damis__STATPRIMITIVESResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct Damis__STATPRIMITIVESResponse * SOAP_FMAC2 soap_instantiate_Damis__STATPRIMITIVESResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Damis__STATPRIMITIVESResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Damis__STATPRIMITIVESResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct Damis__STATPRIMITIVESResponse);
		if (size)
			*size = sizeof(struct Damis__STATPRIMITIVESResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct Damis__STATPRIMITIVESResponse, n);
		if (size)
			*size = n * sizeof(struct Damis__STATPRIMITIVESResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct Damis__STATPRIMITIVESResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__STATPRIMITIVESResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct Damis__STATPRIMITIVESResponse %p -> %p\n", q, p));
	*(struct Damis__STATPRIMITIVESResponse*)p = *(struct Damis__STATPRIMITIVESResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__KMEANS(struct soap *soap, struct Damis__KMEANS *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->X);
	soap_default_int(soap, &a->kMax);
	soap_default_int(soap, &a->maxIteration);
	soap_default_int(soap, &a->maxCalcTime);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__KMEANS(struct soap *soap, const struct Damis__KMEANS *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->X);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__KMEANS(struct soap *soap, const char *tag, int id, const struct Damis__KMEANS *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Damis__KMEANS), type))
		return soap->error;
	if (soap_out_std__string(soap, "X", -1, &a->X, ""))
		return soap->error;
	if (soap_out_int(soap, "kMax", -1, &a->kMax, ""))
		return soap->error;
	if (soap_out_int(soap, "maxIteration", -1, &a->maxIteration, ""))
		return soap->error;
	if (soap_out_int(soap, "maxCalcTime", -1, &a->maxCalcTime, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct Damis__KMEANS * SOAP_FMAC4 soap_in_Damis__KMEANS(struct soap *soap, const char *tag, struct Damis__KMEANS *a, const char *type)
{
	size_t soap_flag_X = 1;
	size_t soap_flag_kMax = 1;
	size_t soap_flag_maxIteration = 1;
	size_t soap_flag_maxCalcTime = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct Damis__KMEANS *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Damis__KMEANS, sizeof(struct Damis__KMEANS), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_Damis__KMEANS(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_X && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "X", &a->X, "xsd:string"))
				{	soap_flag_X--;
					continue;
				}
			if (soap_flag_kMax && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "kMax", &a->kMax, "xsd:int"))
				{	soap_flag_kMax--;
					continue;
				}
			if (soap_flag_maxIteration && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "maxIteration", &a->maxIteration, "xsd:int"))
				{	soap_flag_maxIteration--;
					continue;
				}
			if (soap_flag_maxCalcTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "maxCalcTime", &a->maxCalcTime, "xsd:int"))
				{	soap_flag_maxCalcTime--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct Damis__KMEANS *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Damis__KMEANS, 0, sizeof(struct Damis__KMEANS), 0, soap_copy_Damis__KMEANS);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_X > 0 || soap_flag_kMax > 0 || soap_flag_maxIteration > 0 || soap_flag_maxCalcTime > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__KMEANS(struct soap *soap, const struct Damis__KMEANS *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Damis__KMEANS);
	if (soap_out_Damis__KMEANS(soap, tag?tag:"Damis:KMEANS", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct Damis__KMEANS * SOAP_FMAC4 soap_get_Damis__KMEANS(struct soap *soap, struct Damis__KMEANS *p, const char *tag, const char *type)
{
	if ((p = soap_in_Damis__KMEANS(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct Damis__KMEANS * SOAP_FMAC2 soap_instantiate_Damis__KMEANS(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Damis__KMEANS(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Damis__KMEANS, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct Damis__KMEANS);
		if (size)
			*size = sizeof(struct Damis__KMEANS);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct Damis__KMEANS, n);
		if (size)
			*size = n * sizeof(struct Damis__KMEANS);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct Damis__KMEANS*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__KMEANS(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct Damis__KMEANS %p -> %p\n", q, p));
	*(struct Damis__KMEANS*)p = *(struct Damis__KMEANS*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__KMEANSResponse(struct soap *soap, struct Damis__KMEANSResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->Y);
	soap_default_double(soap, &a->calcTime);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__KMEANSResponse(struct soap *soap, const struct Damis__KMEANSResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->Y);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__KMEANSResponse(struct soap *soap, const char *tag, int id, const struct Damis__KMEANSResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Damis__KMEANSResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "Y", -1, &a->Y, ""))
		return soap->error;
	if (soap_out_double(soap, "calcTime", -1, &a->calcTime, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct Damis__KMEANSResponse * SOAP_FMAC4 soap_in_Damis__KMEANSResponse(struct soap *soap, const char *tag, struct Damis__KMEANSResponse *a, const char *type)
{
	size_t soap_flag_Y = 1;
	size_t soap_flag_calcTime = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct Damis__KMEANSResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Damis__KMEANSResponse, sizeof(struct Damis__KMEANSResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_Damis__KMEANSResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Y && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Y", &a->Y, "xsd:string"))
				{	soap_flag_Y--;
					continue;
				}
			if (soap_flag_calcTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "calcTime", &a->calcTime, "xsd:double"))
				{	soap_flag_calcTime--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct Damis__KMEANSResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Damis__KMEANSResponse, 0, sizeof(struct Damis__KMEANSResponse), 0, soap_copy_Damis__KMEANSResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Y > 0 || soap_flag_calcTime > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__KMEANSResponse(struct soap *soap, const struct Damis__KMEANSResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Damis__KMEANSResponse);
	if (soap_out_Damis__KMEANSResponse(soap, tag?tag:"Damis:KMEANSResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct Damis__KMEANSResponse * SOAP_FMAC4 soap_get_Damis__KMEANSResponse(struct soap *soap, struct Damis__KMEANSResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_Damis__KMEANSResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct Damis__KMEANSResponse * SOAP_FMAC2 soap_instantiate_Damis__KMEANSResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Damis__KMEANSResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Damis__KMEANSResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct Damis__KMEANSResponse);
		if (size)
			*size = sizeof(struct Damis__KMEANSResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct Damis__KMEANSResponse, n);
		if (size)
			*size = n * sizeof(struct Damis__KMEANSResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct Damis__KMEANSResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__KMEANSResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct Damis__KMEANSResponse %p -> %p\n", q, p));
	*(struct Damis__KMEANSResponse*)p = *(struct Damis__KMEANSResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__DF(struct soap *soap, struct Damis__DF *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->X);
	soap_default_double(soap, &a->r);
	soap_default_double(soap, &a->dL);
	soap_default_double(soap, &a->dT);
	soap_default_int(soap, &a->maxCalcTime);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__DF(struct soap *soap, const struct Damis__DF *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->X);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__DF(struct soap *soap, const char *tag, int id, const struct Damis__DF *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Damis__DF), type))
		return soap->error;
	if (soap_out_std__string(soap, "X", -1, &a->X, ""))
		return soap->error;
	if (soap_out_double(soap, "r", -1, &a->r, ""))
		return soap->error;
	if (soap_out_double(soap, "dL", -1, &a->dL, ""))
		return soap->error;
	if (soap_out_double(soap, "dT", -1, &a->dT, ""))
		return soap->error;
	if (soap_out_int(soap, "maxCalcTime", -1, &a->maxCalcTime, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct Damis__DF * SOAP_FMAC4 soap_in_Damis__DF(struct soap *soap, const char *tag, struct Damis__DF *a, const char *type)
{
	size_t soap_flag_X = 1;
	size_t soap_flag_r = 1;
	size_t soap_flag_dL = 1;
	size_t soap_flag_dT = 1;
	size_t soap_flag_maxCalcTime = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct Damis__DF *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Damis__DF, sizeof(struct Damis__DF), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_Damis__DF(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_X && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "X", &a->X, "xsd:string"))
				{	soap_flag_X--;
					continue;
				}
			if (soap_flag_r && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "r", &a->r, "xsd:double"))
				{	soap_flag_r--;
					continue;
				}
			if (soap_flag_dL && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "dL", &a->dL, "xsd:double"))
				{	soap_flag_dL--;
					continue;
				}
			if (soap_flag_dT && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "dT", &a->dT, "xsd:double"))
				{	soap_flag_dT--;
					continue;
				}
			if (soap_flag_maxCalcTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "maxCalcTime", &a->maxCalcTime, "xsd:int"))
				{	soap_flag_maxCalcTime--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct Damis__DF *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Damis__DF, 0, sizeof(struct Damis__DF), 0, soap_copy_Damis__DF);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_X > 0 || soap_flag_r > 0 || soap_flag_dL > 0 || soap_flag_dT > 0 || soap_flag_maxCalcTime > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__DF(struct soap *soap, const struct Damis__DF *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Damis__DF);
	if (soap_out_Damis__DF(soap, tag?tag:"Damis:DF", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct Damis__DF * SOAP_FMAC4 soap_get_Damis__DF(struct soap *soap, struct Damis__DF *p, const char *tag, const char *type)
{
	if ((p = soap_in_Damis__DF(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct Damis__DF * SOAP_FMAC2 soap_instantiate_Damis__DF(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Damis__DF(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Damis__DF, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct Damis__DF);
		if (size)
			*size = sizeof(struct Damis__DF);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct Damis__DF, n);
		if (size)
			*size = n * sizeof(struct Damis__DF);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct Damis__DF*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__DF(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct Damis__DF %p -> %p\n", q, p));
	*(struct Damis__DF*)p = *(struct Damis__DF*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__DFResponse(struct soap *soap, struct Damis__DFResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->Y);
	soap_default_double(soap, &a->calcTime);
	soap_default_double(soap, &a->algorithmError);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__DFResponse(struct soap *soap, const struct Damis__DFResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->Y);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__DFResponse(struct soap *soap, const char *tag, int id, const struct Damis__DFResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Damis__DFResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "Y", -1, &a->Y, ""))
		return soap->error;
	if (soap_out_double(soap, "calcTime", -1, &a->calcTime, ""))
		return soap->error;
	if (soap_out_double(soap, "algorithmError", -1, &a->algorithmError, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct Damis__DFResponse * SOAP_FMAC4 soap_in_Damis__DFResponse(struct soap *soap, const char *tag, struct Damis__DFResponse *a, const char *type)
{
	size_t soap_flag_Y = 1;
	size_t soap_flag_calcTime = 1;
	size_t soap_flag_algorithmError = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct Damis__DFResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Damis__DFResponse, sizeof(struct Damis__DFResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_Damis__DFResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Y && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Y", &a->Y, "xsd:string"))
				{	soap_flag_Y--;
					continue;
				}
			if (soap_flag_calcTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "calcTime", &a->calcTime, "xsd:double"))
				{	soap_flag_calcTime--;
					continue;
				}
			if (soap_flag_algorithmError && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "algorithmError", &a->algorithmError, "xsd:double"))
				{	soap_flag_algorithmError--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct Damis__DFResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Damis__DFResponse, 0, sizeof(struct Damis__DFResponse), 0, soap_copy_Damis__DFResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Y > 0 || soap_flag_calcTime > 0 || soap_flag_algorithmError > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__DFResponse(struct soap *soap, const struct Damis__DFResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Damis__DFResponse);
	if (soap_out_Damis__DFResponse(soap, tag?tag:"Damis:DFResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct Damis__DFResponse * SOAP_FMAC4 soap_get_Damis__DFResponse(struct soap *soap, struct Damis__DFResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_Damis__DFResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct Damis__DFResponse * SOAP_FMAC2 soap_instantiate_Damis__DFResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Damis__DFResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Damis__DFResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct Damis__DFResponse);
		if (size)
			*size = sizeof(struct Damis__DFResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct Damis__DFResponse, n);
		if (size)
			*size = n * sizeof(struct Damis__DFResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct Damis__DFResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__DFResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct Damis__DFResponse %p -> %p\n", q, p));
	*(struct Damis__DFResponse*)p = *(struct Damis__DFResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__MLP(struct soap *soap, struct Damis__MLP *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->X);
	soap_default_int(soap, &a->h1pNo);
	soap_default_int(soap, &a->h2pNo);
	soap_default_double(soap, &a->qty);
	soap_default_bool(soap, &a->kFoldValidation);
	soap_default_int(soap, &a->maxIteration);
	soap_default_int(soap, &a->p);
	soap_default_int(soap, &a->maxCalcTime);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__MLP(struct soap *soap, const struct Damis__MLP *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->X);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__MLP(struct soap *soap, const char *tag, int id, const struct Damis__MLP *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Damis__MLP), type))
		return soap->error;
	if (soap_out_std__string(soap, "X", -1, &a->X, ""))
		return soap->error;
	if (soap_out_int(soap, "h1pNo", -1, &a->h1pNo, ""))
		return soap->error;
	if (soap_out_int(soap, "h2pNo", -1, &a->h2pNo, ""))
		return soap->error;
	if (soap_out_double(soap, "qty", -1, &a->qty, ""))
		return soap->error;
	if (soap_out_bool(soap, "kFoldValidation", -1, &a->kFoldValidation, ""))
		return soap->error;
	if (soap_out_int(soap, "maxIteration", -1, &a->maxIteration, ""))
		return soap->error;
	if (soap_out_int(soap, "p", -1, &a->p, ""))
		return soap->error;
	if (soap_out_int(soap, "maxCalcTime", -1, &a->maxCalcTime, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct Damis__MLP * SOAP_FMAC4 soap_in_Damis__MLP(struct soap *soap, const char *tag, struct Damis__MLP *a, const char *type)
{
	size_t soap_flag_X = 1;
	size_t soap_flag_h1pNo = 1;
	size_t soap_flag_h2pNo = 1;
	size_t soap_flag_qty = 1;
	size_t soap_flag_kFoldValidation = 1;
	size_t soap_flag_maxIteration = 1;
	size_t soap_flag_p = 1;
	size_t soap_flag_maxCalcTime = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct Damis__MLP *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Damis__MLP, sizeof(struct Damis__MLP), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_Damis__MLP(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_X && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "X", &a->X, "xsd:string"))
				{	soap_flag_X--;
					continue;
				}
			if (soap_flag_h1pNo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "h1pNo", &a->h1pNo, "xsd:int"))
				{	soap_flag_h1pNo--;
					continue;
				}
			if (soap_flag_h2pNo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "h2pNo", &a->h2pNo, "xsd:int"))
				{	soap_flag_h2pNo--;
					continue;
				}
			if (soap_flag_qty && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "qty", &a->qty, "xsd:double"))
				{	soap_flag_qty--;
					continue;
				}
			if (soap_flag_kFoldValidation && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "kFoldValidation", &a->kFoldValidation, "xsd:boolean"))
				{	soap_flag_kFoldValidation--;
					continue;
				}
			if (soap_flag_maxIteration && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "maxIteration", &a->maxIteration, "xsd:int"))
				{	soap_flag_maxIteration--;
					continue;
				}
			if (soap_flag_p && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "p", &a->p, "xsd:int"))
				{	soap_flag_p--;
					continue;
				}
			if (soap_flag_maxCalcTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "maxCalcTime", &a->maxCalcTime, "xsd:int"))
				{	soap_flag_maxCalcTime--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct Damis__MLP *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Damis__MLP, 0, sizeof(struct Damis__MLP), 0, soap_copy_Damis__MLP);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_X > 0 || soap_flag_h1pNo > 0 || soap_flag_h2pNo > 0 || soap_flag_qty > 0 || soap_flag_kFoldValidation > 0 || soap_flag_maxIteration > 0 || soap_flag_p > 0 || soap_flag_maxCalcTime > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__MLP(struct soap *soap, const struct Damis__MLP *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Damis__MLP);
	if (soap_out_Damis__MLP(soap, tag?tag:"Damis:MLP", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct Damis__MLP * SOAP_FMAC4 soap_get_Damis__MLP(struct soap *soap, struct Damis__MLP *p, const char *tag, const char *type)
{
	if ((p = soap_in_Damis__MLP(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct Damis__MLP * SOAP_FMAC2 soap_instantiate_Damis__MLP(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Damis__MLP(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Damis__MLP, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct Damis__MLP);
		if (size)
			*size = sizeof(struct Damis__MLP);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct Damis__MLP, n);
		if (size)
			*size = n * sizeof(struct Damis__MLP);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct Damis__MLP*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__MLP(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct Damis__MLP %p -> %p\n", q, p));
	*(struct Damis__MLP*)p = *(struct Damis__MLP*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__MLPResponse(struct soap *soap, struct Damis__MLPResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->Y);
	soap_default_double(soap, &a->calcTime);
	soap_default_double(soap, &a->algorithmError);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__MLPResponse(struct soap *soap, const struct Damis__MLPResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->Y);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__MLPResponse(struct soap *soap, const char *tag, int id, const struct Damis__MLPResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Damis__MLPResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "Y", -1, &a->Y, ""))
		return soap->error;
	if (soap_out_double(soap, "calcTime", -1, &a->calcTime, ""))
		return soap->error;
	if (soap_out_double(soap, "algorithmError", -1, &a->algorithmError, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct Damis__MLPResponse * SOAP_FMAC4 soap_in_Damis__MLPResponse(struct soap *soap, const char *tag, struct Damis__MLPResponse *a, const char *type)
{
	size_t soap_flag_Y = 1;
	size_t soap_flag_calcTime = 1;
	size_t soap_flag_algorithmError = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct Damis__MLPResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Damis__MLPResponse, sizeof(struct Damis__MLPResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_Damis__MLPResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Y && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Y", &a->Y, "xsd:string"))
				{	soap_flag_Y--;
					continue;
				}
			if (soap_flag_calcTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "calcTime", &a->calcTime, "xsd:double"))
				{	soap_flag_calcTime--;
					continue;
				}
			if (soap_flag_algorithmError && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "algorithmError", &a->algorithmError, "xsd:double"))
				{	soap_flag_algorithmError--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct Damis__MLPResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Damis__MLPResponse, 0, sizeof(struct Damis__MLPResponse), 0, soap_copy_Damis__MLPResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Y > 0 || soap_flag_calcTime > 0 || soap_flag_algorithmError > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__MLPResponse(struct soap *soap, const struct Damis__MLPResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Damis__MLPResponse);
	if (soap_out_Damis__MLPResponse(soap, tag?tag:"Damis:MLPResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct Damis__MLPResponse * SOAP_FMAC4 soap_get_Damis__MLPResponse(struct soap *soap, struct Damis__MLPResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_Damis__MLPResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct Damis__MLPResponse * SOAP_FMAC2 soap_instantiate_Damis__MLPResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Damis__MLPResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Damis__MLPResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct Damis__MLPResponse);
		if (size)
			*size = sizeof(struct Damis__MLPResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct Damis__MLPResponse, n);
		if (size)
			*size = n * sizeof(struct Damis__MLPResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct Damis__MLPResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__MLPResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct Damis__MLPResponse %p -> %p\n", q, p));
	*(struct Damis__MLPResponse*)p = *(struct Damis__MLPResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__SOMMDS(struct soap *soap, struct Damis__SOMMDS *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->X);
	soap_default_int(soap, &a->rows);
	soap_default_int(soap, &a->columns);
	soap_default_int(soap, &a->eHat);
	soap_default_int(soap, &a->mdsIteration);
	soap_default_double(soap, &a->eps);
	soap_default_int(soap, &a->mdsProjection);
	soap_default_int(soap, &a->maxCalcTime);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__SOMMDS(struct soap *soap, const struct Damis__SOMMDS *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->X);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__SOMMDS(struct soap *soap, const char *tag, int id, const struct Damis__SOMMDS *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Damis__SOMMDS), type))
		return soap->error;
	if (soap_out_std__string(soap, "X", -1, &a->X, ""))
		return soap->error;
	if (soap_out_int(soap, "rows", -1, &a->rows, ""))
		return soap->error;
	if (soap_out_int(soap, "columns", -1, &a->columns, ""))
		return soap->error;
	if (soap_out_int(soap, "eHat", -1, &a->eHat, ""))
		return soap->error;
	if (soap_out_int(soap, "mdsIteration", -1, &a->mdsIteration, ""))
		return soap->error;
	if (soap_out_double(soap, "eps", -1, &a->eps, ""))
		return soap->error;
	if (soap_out_int(soap, "mdsProjection", -1, &a->mdsProjection, ""))
		return soap->error;
	if (soap_out_int(soap, "maxCalcTime", -1, &a->maxCalcTime, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct Damis__SOMMDS * SOAP_FMAC4 soap_in_Damis__SOMMDS(struct soap *soap, const char *tag, struct Damis__SOMMDS *a, const char *type)
{
	size_t soap_flag_X = 1;
	size_t soap_flag_rows = 1;
	size_t soap_flag_columns = 1;
	size_t soap_flag_eHat = 1;
	size_t soap_flag_mdsIteration = 1;
	size_t soap_flag_eps = 1;
	size_t soap_flag_mdsProjection = 1;
	size_t soap_flag_maxCalcTime = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct Damis__SOMMDS *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Damis__SOMMDS, sizeof(struct Damis__SOMMDS), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_Damis__SOMMDS(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_X && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "X", &a->X, "xsd:string"))
				{	soap_flag_X--;
					continue;
				}
			if (soap_flag_rows && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "rows", &a->rows, "xsd:int"))
				{	soap_flag_rows--;
					continue;
				}
			if (soap_flag_columns && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "columns", &a->columns, "xsd:int"))
				{	soap_flag_columns--;
					continue;
				}
			if (soap_flag_eHat && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "eHat", &a->eHat, "xsd:int"))
				{	soap_flag_eHat--;
					continue;
				}
			if (soap_flag_mdsIteration && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "mdsIteration", &a->mdsIteration, "xsd:int"))
				{	soap_flag_mdsIteration--;
					continue;
				}
			if (soap_flag_eps && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "eps", &a->eps, "xsd:double"))
				{	soap_flag_eps--;
					continue;
				}
			if (soap_flag_mdsProjection && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "mdsProjection", &a->mdsProjection, "xsd:int"))
				{	soap_flag_mdsProjection--;
					continue;
				}
			if (soap_flag_maxCalcTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "maxCalcTime", &a->maxCalcTime, "xsd:int"))
				{	soap_flag_maxCalcTime--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct Damis__SOMMDS *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Damis__SOMMDS, 0, sizeof(struct Damis__SOMMDS), 0, soap_copy_Damis__SOMMDS);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_X > 0 || soap_flag_rows > 0 || soap_flag_columns > 0 || soap_flag_eHat > 0 || soap_flag_mdsIteration > 0 || soap_flag_eps > 0 || soap_flag_mdsProjection > 0 || soap_flag_maxCalcTime > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__SOMMDS(struct soap *soap, const struct Damis__SOMMDS *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Damis__SOMMDS);
	if (soap_out_Damis__SOMMDS(soap, tag?tag:"Damis:SOMMDS", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct Damis__SOMMDS * SOAP_FMAC4 soap_get_Damis__SOMMDS(struct soap *soap, struct Damis__SOMMDS *p, const char *tag, const char *type)
{
	if ((p = soap_in_Damis__SOMMDS(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct Damis__SOMMDS * SOAP_FMAC2 soap_instantiate_Damis__SOMMDS(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Damis__SOMMDS(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Damis__SOMMDS, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct Damis__SOMMDS);
		if (size)
			*size = sizeof(struct Damis__SOMMDS);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct Damis__SOMMDS, n);
		if (size)
			*size = n * sizeof(struct Damis__SOMMDS);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct Damis__SOMMDS*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__SOMMDS(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct Damis__SOMMDS %p -> %p\n", q, p));
	*(struct Damis__SOMMDS*)p = *(struct Damis__SOMMDS*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__SOMMDSResponse(struct soap *soap, struct Damis__SOMMDSResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->Y);
	soap_default_double(soap, &a->calcTime);
	soap_default_double(soap, &a->algorithmError);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__SOMMDSResponse(struct soap *soap, const struct Damis__SOMMDSResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->Y);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__SOMMDSResponse(struct soap *soap, const char *tag, int id, const struct Damis__SOMMDSResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Damis__SOMMDSResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "Y", -1, &a->Y, ""))
		return soap->error;
	if (soap_out_double(soap, "calcTime", -1, &a->calcTime, ""))
		return soap->error;
	if (soap_out_double(soap, "algorithmError", -1, &a->algorithmError, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct Damis__SOMMDSResponse * SOAP_FMAC4 soap_in_Damis__SOMMDSResponse(struct soap *soap, const char *tag, struct Damis__SOMMDSResponse *a, const char *type)
{
	size_t soap_flag_Y = 1;
	size_t soap_flag_calcTime = 1;
	size_t soap_flag_algorithmError = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct Damis__SOMMDSResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Damis__SOMMDSResponse, sizeof(struct Damis__SOMMDSResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_Damis__SOMMDSResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Y && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Y", &a->Y, "xsd:string"))
				{	soap_flag_Y--;
					continue;
				}
			if (soap_flag_calcTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "calcTime", &a->calcTime, "xsd:double"))
				{	soap_flag_calcTime--;
					continue;
				}
			if (soap_flag_algorithmError && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "algorithmError", &a->algorithmError, "xsd:double"))
				{	soap_flag_algorithmError--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct Damis__SOMMDSResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Damis__SOMMDSResponse, 0, sizeof(struct Damis__SOMMDSResponse), 0, soap_copy_Damis__SOMMDSResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Y > 0 || soap_flag_calcTime > 0 || soap_flag_algorithmError > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__SOMMDSResponse(struct soap *soap, const struct Damis__SOMMDSResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Damis__SOMMDSResponse);
	if (soap_out_Damis__SOMMDSResponse(soap, tag?tag:"Damis:SOMMDSResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct Damis__SOMMDSResponse * SOAP_FMAC4 soap_get_Damis__SOMMDSResponse(struct soap *soap, struct Damis__SOMMDSResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_Damis__SOMMDSResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct Damis__SOMMDSResponse * SOAP_FMAC2 soap_instantiate_Damis__SOMMDSResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Damis__SOMMDSResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Damis__SOMMDSResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct Damis__SOMMDSResponse);
		if (size)
			*size = sizeof(struct Damis__SOMMDSResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct Damis__SOMMDSResponse, n);
		if (size)
			*size = n * sizeof(struct Damis__SOMMDSResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct Damis__SOMMDSResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__SOMMDSResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct Damis__SOMMDSResponse %p -> %p\n", q, p));
	*(struct Damis__SOMMDSResponse*)p = *(struct Damis__SOMMDSResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__SOM(struct soap *soap, struct Damis__SOM *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->X);
	soap_default_int(soap, &a->rows);
	soap_default_int(soap, &a->columns);
	soap_default_int(soap, &a->eHat);
	soap_default_int(soap, &a->p);
	soap_default_int(soap, &a->maxCalcTime);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__SOM(struct soap *soap, const struct Damis__SOM *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->X);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__SOM(struct soap *soap, const char *tag, int id, const struct Damis__SOM *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Damis__SOM), type))
		return soap->error;
	if (soap_out_std__string(soap, "X", -1, &a->X, ""))
		return soap->error;
	if (soap_out_int(soap, "rows", -1, &a->rows, ""))
		return soap->error;
	if (soap_out_int(soap, "columns", -1, &a->columns, ""))
		return soap->error;
	if (soap_out_int(soap, "eHat", -1, &a->eHat, ""))
		return soap->error;
	if (soap_out_int(soap, "p", -1, &a->p, ""))
		return soap->error;
	if (soap_out_int(soap, "maxCalcTime", -1, &a->maxCalcTime, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct Damis__SOM * SOAP_FMAC4 soap_in_Damis__SOM(struct soap *soap, const char *tag, struct Damis__SOM *a, const char *type)
{
	size_t soap_flag_X = 1;
	size_t soap_flag_rows = 1;
	size_t soap_flag_columns = 1;
	size_t soap_flag_eHat = 1;
	size_t soap_flag_p = 1;
	size_t soap_flag_maxCalcTime = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct Damis__SOM *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Damis__SOM, sizeof(struct Damis__SOM), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_Damis__SOM(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_X && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "X", &a->X, "xsd:string"))
				{	soap_flag_X--;
					continue;
				}
			if (soap_flag_rows && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "rows", &a->rows, "xsd:int"))
				{	soap_flag_rows--;
					continue;
				}
			if (soap_flag_columns && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "columns", &a->columns, "xsd:int"))
				{	soap_flag_columns--;
					continue;
				}
			if (soap_flag_eHat && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "eHat", &a->eHat, "xsd:int"))
				{	soap_flag_eHat--;
					continue;
				}
			if (soap_flag_p && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "p", &a->p, "xsd:int"))
				{	soap_flag_p--;
					continue;
				}
			if (soap_flag_maxCalcTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "maxCalcTime", &a->maxCalcTime, "xsd:int"))
				{	soap_flag_maxCalcTime--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct Damis__SOM *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Damis__SOM, 0, sizeof(struct Damis__SOM), 0, soap_copy_Damis__SOM);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_X > 0 || soap_flag_rows > 0 || soap_flag_columns > 0 || soap_flag_eHat > 0 || soap_flag_p > 0 || soap_flag_maxCalcTime > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__SOM(struct soap *soap, const struct Damis__SOM *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Damis__SOM);
	if (soap_out_Damis__SOM(soap, tag?tag:"Damis:SOM", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct Damis__SOM * SOAP_FMAC4 soap_get_Damis__SOM(struct soap *soap, struct Damis__SOM *p, const char *tag, const char *type)
{
	if ((p = soap_in_Damis__SOM(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct Damis__SOM * SOAP_FMAC2 soap_instantiate_Damis__SOM(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Damis__SOM(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Damis__SOM, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct Damis__SOM);
		if (size)
			*size = sizeof(struct Damis__SOM);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct Damis__SOM, n);
		if (size)
			*size = n * sizeof(struct Damis__SOM);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct Damis__SOM*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__SOM(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct Damis__SOM %p -> %p\n", q, p));
	*(struct Damis__SOM*)p = *(struct Damis__SOM*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__SOMResponse(struct soap *soap, struct Damis__SOMResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->Y);
	soap_default_double(soap, &a->calcTime);
	soap_default_double(soap, &a->algorithmError);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__SOMResponse(struct soap *soap, const struct Damis__SOMResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->Y);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__SOMResponse(struct soap *soap, const char *tag, int id, const struct Damis__SOMResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Damis__SOMResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "Y", -1, &a->Y, ""))
		return soap->error;
	if (soap_out_double(soap, "calcTime", -1, &a->calcTime, ""))
		return soap->error;
	if (soap_out_double(soap, "algorithmError", -1, &a->algorithmError, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct Damis__SOMResponse * SOAP_FMAC4 soap_in_Damis__SOMResponse(struct soap *soap, const char *tag, struct Damis__SOMResponse *a, const char *type)
{
	size_t soap_flag_Y = 1;
	size_t soap_flag_calcTime = 1;
	size_t soap_flag_algorithmError = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct Damis__SOMResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Damis__SOMResponse, sizeof(struct Damis__SOMResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_Damis__SOMResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Y && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Y", &a->Y, "xsd:string"))
				{	soap_flag_Y--;
					continue;
				}
			if (soap_flag_calcTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "calcTime", &a->calcTime, "xsd:double"))
				{	soap_flag_calcTime--;
					continue;
				}
			if (soap_flag_algorithmError && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "algorithmError", &a->algorithmError, "xsd:double"))
				{	soap_flag_algorithmError--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct Damis__SOMResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Damis__SOMResponse, 0, sizeof(struct Damis__SOMResponse), 0, soap_copy_Damis__SOMResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Y > 0 || soap_flag_calcTime > 0 || soap_flag_algorithmError > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__SOMResponse(struct soap *soap, const struct Damis__SOMResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Damis__SOMResponse);
	if (soap_out_Damis__SOMResponse(soap, tag?tag:"Damis:SOMResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct Damis__SOMResponse * SOAP_FMAC4 soap_get_Damis__SOMResponse(struct soap *soap, struct Damis__SOMResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_Damis__SOMResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct Damis__SOMResponse * SOAP_FMAC2 soap_instantiate_Damis__SOMResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Damis__SOMResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Damis__SOMResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct Damis__SOMResponse);
		if (size)
			*size = sizeof(struct Damis__SOMResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct Damis__SOMResponse, n);
		if (size)
			*size = n * sizeof(struct Damis__SOMResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct Damis__SOMResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__SOMResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct Damis__SOMResponse %p -> %p\n", q, p));
	*(struct Damis__SOMResponse*)p = *(struct Damis__SOMResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__SAMANN(struct soap *soap, struct Damis__SAMANN *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->X);
	soap_default_int(soap, &a->d);
	soap_default_int(soap, &a->maxIteration);
	soap_default_double(soap, &a->mTrain);
	soap_default_int(soap, &a->nNeurons);
	soap_default_double(soap, &a->eta);
	soap_default_int(soap, &a->p);
	soap_default_int(soap, &a->maxCalcTime);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__SAMANN(struct soap *soap, const struct Damis__SAMANN *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->X);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__SAMANN(struct soap *soap, const char *tag, int id, const struct Damis__SAMANN *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Damis__SAMANN), type))
		return soap->error;
	if (soap_out_std__string(soap, "X", -1, &a->X, ""))
		return soap->error;
	if (soap_out_int(soap, "d", -1, &a->d, ""))
		return soap->error;
	if (soap_out_int(soap, "maxIteration", -1, &a->maxIteration, ""))
		return soap->error;
	if (soap_out_double(soap, "mTrain", -1, &a->mTrain, ""))
		return soap->error;
	if (soap_out_int(soap, "nNeurons", -1, &a->nNeurons, ""))
		return soap->error;
	if (soap_out_double(soap, "eta", -1, &a->eta, ""))
		return soap->error;
	if (soap_out_int(soap, "p", -1, &a->p, ""))
		return soap->error;
	if (soap_out_int(soap, "maxCalcTime", -1, &a->maxCalcTime, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct Damis__SAMANN * SOAP_FMAC4 soap_in_Damis__SAMANN(struct soap *soap, const char *tag, struct Damis__SAMANN *a, const char *type)
{
	size_t soap_flag_X = 1;
	size_t soap_flag_d = 1;
	size_t soap_flag_maxIteration = 1;
	size_t soap_flag_mTrain = 1;
	size_t soap_flag_nNeurons = 1;
	size_t soap_flag_eta = 1;
	size_t soap_flag_p = 1;
	size_t soap_flag_maxCalcTime = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct Damis__SAMANN *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Damis__SAMANN, sizeof(struct Damis__SAMANN), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_Damis__SAMANN(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_X && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "X", &a->X, "xsd:string"))
				{	soap_flag_X--;
					continue;
				}
			if (soap_flag_d && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "d", &a->d, "xsd:int"))
				{	soap_flag_d--;
					continue;
				}
			if (soap_flag_maxIteration && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "maxIteration", &a->maxIteration, "xsd:int"))
				{	soap_flag_maxIteration--;
					continue;
				}
			if (soap_flag_mTrain && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "mTrain", &a->mTrain, "xsd:double"))
				{	soap_flag_mTrain--;
					continue;
				}
			if (soap_flag_nNeurons && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nNeurons", &a->nNeurons, "xsd:int"))
				{	soap_flag_nNeurons--;
					continue;
				}
			if (soap_flag_eta && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "eta", &a->eta, "xsd:double"))
				{	soap_flag_eta--;
					continue;
				}
			if (soap_flag_p && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "p", &a->p, "xsd:int"))
				{	soap_flag_p--;
					continue;
				}
			if (soap_flag_maxCalcTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "maxCalcTime", &a->maxCalcTime, "xsd:int"))
				{	soap_flag_maxCalcTime--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct Damis__SAMANN *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Damis__SAMANN, 0, sizeof(struct Damis__SAMANN), 0, soap_copy_Damis__SAMANN);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_X > 0 || soap_flag_d > 0 || soap_flag_maxIteration > 0 || soap_flag_mTrain > 0 || soap_flag_nNeurons > 0 || soap_flag_eta > 0 || soap_flag_p > 0 || soap_flag_maxCalcTime > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__SAMANN(struct soap *soap, const struct Damis__SAMANN *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Damis__SAMANN);
	if (soap_out_Damis__SAMANN(soap, tag?tag:"Damis:SAMANN", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct Damis__SAMANN * SOAP_FMAC4 soap_get_Damis__SAMANN(struct soap *soap, struct Damis__SAMANN *p, const char *tag, const char *type)
{
	if ((p = soap_in_Damis__SAMANN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct Damis__SAMANN * SOAP_FMAC2 soap_instantiate_Damis__SAMANN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Damis__SAMANN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Damis__SAMANN, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct Damis__SAMANN);
		if (size)
			*size = sizeof(struct Damis__SAMANN);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct Damis__SAMANN, n);
		if (size)
			*size = n * sizeof(struct Damis__SAMANN);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct Damis__SAMANN*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__SAMANN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct Damis__SAMANN %p -> %p\n", q, p));
	*(struct Damis__SAMANN*)p = *(struct Damis__SAMANN*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__SAMANNResponse(struct soap *soap, struct Damis__SAMANNResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->Y);
	soap_default_double(soap, &a->calcTime);
	soap_default_double(soap, &a->algorithmError);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__SAMANNResponse(struct soap *soap, const struct Damis__SAMANNResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->Y);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__SAMANNResponse(struct soap *soap, const char *tag, int id, const struct Damis__SAMANNResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Damis__SAMANNResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "Y", -1, &a->Y, ""))
		return soap->error;
	if (soap_out_double(soap, "calcTime", -1, &a->calcTime, ""))
		return soap->error;
	if (soap_out_double(soap, "algorithmError", -1, &a->algorithmError, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct Damis__SAMANNResponse * SOAP_FMAC4 soap_in_Damis__SAMANNResponse(struct soap *soap, const char *tag, struct Damis__SAMANNResponse *a, const char *type)
{
	size_t soap_flag_Y = 1;
	size_t soap_flag_calcTime = 1;
	size_t soap_flag_algorithmError = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct Damis__SAMANNResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Damis__SAMANNResponse, sizeof(struct Damis__SAMANNResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_Damis__SAMANNResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Y && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Y", &a->Y, "xsd:string"))
				{	soap_flag_Y--;
					continue;
				}
			if (soap_flag_calcTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "calcTime", &a->calcTime, "xsd:double"))
				{	soap_flag_calcTime--;
					continue;
				}
			if (soap_flag_algorithmError && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "algorithmError", &a->algorithmError, "xsd:double"))
				{	soap_flag_algorithmError--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct Damis__SAMANNResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Damis__SAMANNResponse, 0, sizeof(struct Damis__SAMANNResponse), 0, soap_copy_Damis__SAMANNResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Y > 0 || soap_flag_calcTime > 0 || soap_flag_algorithmError > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__SAMANNResponse(struct soap *soap, const struct Damis__SAMANNResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Damis__SAMANNResponse);
	if (soap_out_Damis__SAMANNResponse(soap, tag?tag:"Damis:SAMANNResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct Damis__SAMANNResponse * SOAP_FMAC4 soap_get_Damis__SAMANNResponse(struct soap *soap, struct Damis__SAMANNResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_Damis__SAMANNResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct Damis__SAMANNResponse * SOAP_FMAC2 soap_instantiate_Damis__SAMANNResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Damis__SAMANNResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Damis__SAMANNResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct Damis__SAMANNResponse);
		if (size)
			*size = sizeof(struct Damis__SAMANNResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct Damis__SAMANNResponse, n);
		if (size)
			*size = n * sizeof(struct Damis__SAMANNResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct Damis__SAMANNResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__SAMANNResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct Damis__SAMANNResponse %p -> %p\n", q, p));
	*(struct Damis__SAMANNResponse*)p = *(struct Damis__SAMANNResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__RELMDS(struct soap *soap, struct Damis__RELMDS *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->X);
	soap_default_int(soap, &a->d);
	soap_default_int(soap, &a->maxIteration);
	soap_default_double(soap, &a->eps);
	soap_default_double(soap, &a->noOfBaseVectors);
	soap_default_int(soap, &a->selStrategy);
	soap_default_int(soap, &a->maxCalcTime);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__RELMDS(struct soap *soap, const struct Damis__RELMDS *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->X);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__RELMDS(struct soap *soap, const char *tag, int id, const struct Damis__RELMDS *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Damis__RELMDS), type))
		return soap->error;
	if (soap_out_std__string(soap, "X", -1, &a->X, ""))
		return soap->error;
	if (soap_out_int(soap, "d", -1, &a->d, ""))
		return soap->error;
	if (soap_out_int(soap, "maxIteration", -1, &a->maxIteration, ""))
		return soap->error;
	if (soap_out_double(soap, "eps", -1, &a->eps, ""))
		return soap->error;
	if (soap_out_double(soap, "noOfBaseVectors", -1, &a->noOfBaseVectors, ""))
		return soap->error;
	if (soap_out_int(soap, "selStrategy", -1, &a->selStrategy, ""))
		return soap->error;
	if (soap_out_int(soap, "maxCalcTime", -1, &a->maxCalcTime, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct Damis__RELMDS * SOAP_FMAC4 soap_in_Damis__RELMDS(struct soap *soap, const char *tag, struct Damis__RELMDS *a, const char *type)
{
	size_t soap_flag_X = 1;
	size_t soap_flag_d = 1;
	size_t soap_flag_maxIteration = 1;
	size_t soap_flag_eps = 1;
	size_t soap_flag_noOfBaseVectors = 1;
	size_t soap_flag_selStrategy = 1;
	size_t soap_flag_maxCalcTime = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct Damis__RELMDS *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Damis__RELMDS, sizeof(struct Damis__RELMDS), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_Damis__RELMDS(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_X && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "X", &a->X, "xsd:string"))
				{	soap_flag_X--;
					continue;
				}
			if (soap_flag_d && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "d", &a->d, "xsd:int"))
				{	soap_flag_d--;
					continue;
				}
			if (soap_flag_maxIteration && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "maxIteration", &a->maxIteration, "xsd:int"))
				{	soap_flag_maxIteration--;
					continue;
				}
			if (soap_flag_eps && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "eps", &a->eps, "xsd:double"))
				{	soap_flag_eps--;
					continue;
				}
			if (soap_flag_noOfBaseVectors && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "noOfBaseVectors", &a->noOfBaseVectors, "xsd:double"))
				{	soap_flag_noOfBaseVectors--;
					continue;
				}
			if (soap_flag_selStrategy && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "selStrategy", &a->selStrategy, "xsd:int"))
				{	soap_flag_selStrategy--;
					continue;
				}
			if (soap_flag_maxCalcTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "maxCalcTime", &a->maxCalcTime, "xsd:int"))
				{	soap_flag_maxCalcTime--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct Damis__RELMDS *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Damis__RELMDS, 0, sizeof(struct Damis__RELMDS), 0, soap_copy_Damis__RELMDS);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_X > 0 || soap_flag_d > 0 || soap_flag_maxIteration > 0 || soap_flag_eps > 0 || soap_flag_noOfBaseVectors > 0 || soap_flag_selStrategy > 0 || soap_flag_maxCalcTime > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__RELMDS(struct soap *soap, const struct Damis__RELMDS *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Damis__RELMDS);
	if (soap_out_Damis__RELMDS(soap, tag?tag:"Damis:RELMDS", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct Damis__RELMDS * SOAP_FMAC4 soap_get_Damis__RELMDS(struct soap *soap, struct Damis__RELMDS *p, const char *tag, const char *type)
{
	if ((p = soap_in_Damis__RELMDS(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct Damis__RELMDS * SOAP_FMAC2 soap_instantiate_Damis__RELMDS(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Damis__RELMDS(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Damis__RELMDS, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct Damis__RELMDS);
		if (size)
			*size = sizeof(struct Damis__RELMDS);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct Damis__RELMDS, n);
		if (size)
			*size = n * sizeof(struct Damis__RELMDS);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct Damis__RELMDS*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__RELMDS(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct Damis__RELMDS %p -> %p\n", q, p));
	*(struct Damis__RELMDS*)p = *(struct Damis__RELMDS*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__RELMDSResponse(struct soap *soap, struct Damis__RELMDSResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->Y);
	soap_default_double(soap, &a->calcTime);
	soap_default_double(soap, &a->algorithmError);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__RELMDSResponse(struct soap *soap, const struct Damis__RELMDSResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->Y);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__RELMDSResponse(struct soap *soap, const char *tag, int id, const struct Damis__RELMDSResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Damis__RELMDSResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "Y", -1, &a->Y, ""))
		return soap->error;
	if (soap_out_double(soap, "calcTime", -1, &a->calcTime, ""))
		return soap->error;
	if (soap_out_double(soap, "algorithmError", -1, &a->algorithmError, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct Damis__RELMDSResponse * SOAP_FMAC4 soap_in_Damis__RELMDSResponse(struct soap *soap, const char *tag, struct Damis__RELMDSResponse *a, const char *type)
{
	size_t soap_flag_Y = 1;
	size_t soap_flag_calcTime = 1;
	size_t soap_flag_algorithmError = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct Damis__RELMDSResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Damis__RELMDSResponse, sizeof(struct Damis__RELMDSResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_Damis__RELMDSResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Y && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Y", &a->Y, "xsd:string"))
				{	soap_flag_Y--;
					continue;
				}
			if (soap_flag_calcTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "calcTime", &a->calcTime, "xsd:double"))
				{	soap_flag_calcTime--;
					continue;
				}
			if (soap_flag_algorithmError && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "algorithmError", &a->algorithmError, "xsd:double"))
				{	soap_flag_algorithmError--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct Damis__RELMDSResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Damis__RELMDSResponse, 0, sizeof(struct Damis__RELMDSResponse), 0, soap_copy_Damis__RELMDSResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Y > 0 || soap_flag_calcTime > 0 || soap_flag_algorithmError > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__RELMDSResponse(struct soap *soap, const struct Damis__RELMDSResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Damis__RELMDSResponse);
	if (soap_out_Damis__RELMDSResponse(soap, tag?tag:"Damis:RELMDSResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct Damis__RELMDSResponse * SOAP_FMAC4 soap_get_Damis__RELMDSResponse(struct soap *soap, struct Damis__RELMDSResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_Damis__RELMDSResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct Damis__RELMDSResponse * SOAP_FMAC2 soap_instantiate_Damis__RELMDSResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Damis__RELMDSResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Damis__RELMDSResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct Damis__RELMDSResponse);
		if (size)
			*size = sizeof(struct Damis__RELMDSResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct Damis__RELMDSResponse, n);
		if (size)
			*size = n * sizeof(struct Damis__RELMDSResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct Damis__RELMDSResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__RELMDSResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct Damis__RELMDSResponse %p -> %p\n", q, p));
	*(struct Damis__RELMDSResponse*)p = *(struct Damis__RELMDSResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__DMA(struct soap *soap, struct Damis__DMA *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->X);
	soap_default_int(soap, &a->d);
	soap_default_int(soap, &a->maxIteration);
	soap_default_double(soap, &a->eps);
	soap_default_double(soap, &a->neighbour);
	soap_default_int(soap, &a->maxCalcTime);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__DMA(struct soap *soap, const struct Damis__DMA *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->X);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__DMA(struct soap *soap, const char *tag, int id, const struct Damis__DMA *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Damis__DMA), type))
		return soap->error;
	if (soap_out_std__string(soap, "X", -1, &a->X, ""))
		return soap->error;
	if (soap_out_int(soap, "d", -1, &a->d, ""))
		return soap->error;
	if (soap_out_int(soap, "maxIteration", -1, &a->maxIteration, ""))
		return soap->error;
	if (soap_out_double(soap, "eps", -1, &a->eps, ""))
		return soap->error;
	if (soap_out_double(soap, "neighbour", -1, &a->neighbour, ""))
		return soap->error;
	if (soap_out_int(soap, "maxCalcTime", -1, &a->maxCalcTime, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct Damis__DMA * SOAP_FMAC4 soap_in_Damis__DMA(struct soap *soap, const char *tag, struct Damis__DMA *a, const char *type)
{
	size_t soap_flag_X = 1;
	size_t soap_flag_d = 1;
	size_t soap_flag_maxIteration = 1;
	size_t soap_flag_eps = 1;
	size_t soap_flag_neighbour = 1;
	size_t soap_flag_maxCalcTime = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct Damis__DMA *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Damis__DMA, sizeof(struct Damis__DMA), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_Damis__DMA(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_X && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "X", &a->X, "xsd:string"))
				{	soap_flag_X--;
					continue;
				}
			if (soap_flag_d && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "d", &a->d, "xsd:int"))
				{	soap_flag_d--;
					continue;
				}
			if (soap_flag_maxIteration && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "maxIteration", &a->maxIteration, "xsd:int"))
				{	soap_flag_maxIteration--;
					continue;
				}
			if (soap_flag_eps && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "eps", &a->eps, "xsd:double"))
				{	soap_flag_eps--;
					continue;
				}
			if (soap_flag_neighbour && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "neighbour", &a->neighbour, "xsd:double"))
				{	soap_flag_neighbour--;
					continue;
				}
			if (soap_flag_maxCalcTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "maxCalcTime", &a->maxCalcTime, "xsd:int"))
				{	soap_flag_maxCalcTime--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct Damis__DMA *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Damis__DMA, 0, sizeof(struct Damis__DMA), 0, soap_copy_Damis__DMA);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_X > 0 || soap_flag_d > 0 || soap_flag_maxIteration > 0 || soap_flag_eps > 0 || soap_flag_neighbour > 0 || soap_flag_maxCalcTime > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__DMA(struct soap *soap, const struct Damis__DMA *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Damis__DMA);
	if (soap_out_Damis__DMA(soap, tag?tag:"Damis:DMA", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct Damis__DMA * SOAP_FMAC4 soap_get_Damis__DMA(struct soap *soap, struct Damis__DMA *p, const char *tag, const char *type)
{
	if ((p = soap_in_Damis__DMA(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct Damis__DMA * SOAP_FMAC2 soap_instantiate_Damis__DMA(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Damis__DMA(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Damis__DMA, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct Damis__DMA);
		if (size)
			*size = sizeof(struct Damis__DMA);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct Damis__DMA, n);
		if (size)
			*size = n * sizeof(struct Damis__DMA);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct Damis__DMA*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__DMA(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct Damis__DMA %p -> %p\n", q, p));
	*(struct Damis__DMA*)p = *(struct Damis__DMA*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__DMAResponse(struct soap *soap, struct Damis__DMAResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->Y);
	soap_default_double(soap, &a->calcTime);
	soap_default_double(soap, &a->algorithmError);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__DMAResponse(struct soap *soap, const struct Damis__DMAResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->Y);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__DMAResponse(struct soap *soap, const char *tag, int id, const struct Damis__DMAResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Damis__DMAResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "Y", -1, &a->Y, ""))
		return soap->error;
	if (soap_out_double(soap, "calcTime", -1, &a->calcTime, ""))
		return soap->error;
	if (soap_out_double(soap, "algorithmError", -1, &a->algorithmError, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct Damis__DMAResponse * SOAP_FMAC4 soap_in_Damis__DMAResponse(struct soap *soap, const char *tag, struct Damis__DMAResponse *a, const char *type)
{
	size_t soap_flag_Y = 1;
	size_t soap_flag_calcTime = 1;
	size_t soap_flag_algorithmError = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct Damis__DMAResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Damis__DMAResponse, sizeof(struct Damis__DMAResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_Damis__DMAResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Y && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Y", &a->Y, "xsd:string"))
				{	soap_flag_Y--;
					continue;
				}
			if (soap_flag_calcTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "calcTime", &a->calcTime, "xsd:double"))
				{	soap_flag_calcTime--;
					continue;
				}
			if (soap_flag_algorithmError && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "algorithmError", &a->algorithmError, "xsd:double"))
				{	soap_flag_algorithmError--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct Damis__DMAResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Damis__DMAResponse, 0, sizeof(struct Damis__DMAResponse), 0, soap_copy_Damis__DMAResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Y > 0 || soap_flag_calcTime > 0 || soap_flag_algorithmError > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__DMAResponse(struct soap *soap, const struct Damis__DMAResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Damis__DMAResponse);
	if (soap_out_Damis__DMAResponse(soap, tag?tag:"Damis:DMAResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct Damis__DMAResponse * SOAP_FMAC4 soap_get_Damis__DMAResponse(struct soap *soap, struct Damis__DMAResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_Damis__DMAResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct Damis__DMAResponse * SOAP_FMAC2 soap_instantiate_Damis__DMAResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Damis__DMAResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Damis__DMAResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct Damis__DMAResponse);
		if (size)
			*size = sizeof(struct Damis__DMAResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct Damis__DMAResponse, n);
		if (size)
			*size = n * sizeof(struct Damis__DMAResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct Damis__DMAResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__DMAResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct Damis__DMAResponse %p -> %p\n", q, p));
	*(struct Damis__DMAResponse*)p = *(struct Damis__DMAResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__SMACOFMDS(struct soap *soap, struct Damis__SMACOFMDS *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->X);
	soap_default_int(soap, &a->d);
	soap_default_int(soap, &a->maxIteration);
	soap_default_double(soap, &a->eps);
	soap_default_bool(soap, &a->zeidel);
	soap_default_int(soap, &a->p);
	soap_default_int(soap, &a->maxCalcTime);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__SMACOFMDS(struct soap *soap, const struct Damis__SMACOFMDS *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->X);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__SMACOFMDS(struct soap *soap, const char *tag, int id, const struct Damis__SMACOFMDS *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Damis__SMACOFMDS), type))
		return soap->error;
	if (soap_out_std__string(soap, "X", -1, &a->X, ""))
		return soap->error;
	if (soap_out_int(soap, "d", -1, &a->d, ""))
		return soap->error;
	if (soap_out_int(soap, "maxIteration", -1, &a->maxIteration, ""))
		return soap->error;
	if (soap_out_double(soap, "eps", -1, &a->eps, ""))
		return soap->error;
	if (soap_out_bool(soap, "zeidel", -1, &a->zeidel, ""))
		return soap->error;
	if (soap_out_int(soap, "p", -1, &a->p, ""))
		return soap->error;
	if (soap_out_int(soap, "maxCalcTime", -1, &a->maxCalcTime, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct Damis__SMACOFMDS * SOAP_FMAC4 soap_in_Damis__SMACOFMDS(struct soap *soap, const char *tag, struct Damis__SMACOFMDS *a, const char *type)
{
	size_t soap_flag_X = 1;
	size_t soap_flag_d = 1;
	size_t soap_flag_maxIteration = 1;
	size_t soap_flag_eps = 1;
	size_t soap_flag_zeidel = 1;
	size_t soap_flag_p = 1;
	size_t soap_flag_maxCalcTime = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct Damis__SMACOFMDS *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Damis__SMACOFMDS, sizeof(struct Damis__SMACOFMDS), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_Damis__SMACOFMDS(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_X && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "X", &a->X, "xsd:string"))
				{	soap_flag_X--;
					continue;
				}
			if (soap_flag_d && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "d", &a->d, "xsd:int"))
				{	soap_flag_d--;
					continue;
				}
			if (soap_flag_maxIteration && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "maxIteration", &a->maxIteration, "xsd:int"))
				{	soap_flag_maxIteration--;
					continue;
				}
			if (soap_flag_eps && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "eps", &a->eps, "xsd:double"))
				{	soap_flag_eps--;
					continue;
				}
			if (soap_flag_zeidel && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "zeidel", &a->zeidel, "xsd:boolean"))
				{	soap_flag_zeidel--;
					continue;
				}
			if (soap_flag_p && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "p", &a->p, "xsd:int"))
				{	soap_flag_p--;
					continue;
				}
			if (soap_flag_maxCalcTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "maxCalcTime", &a->maxCalcTime, "xsd:int"))
				{	soap_flag_maxCalcTime--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct Damis__SMACOFMDS *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Damis__SMACOFMDS, 0, sizeof(struct Damis__SMACOFMDS), 0, soap_copy_Damis__SMACOFMDS);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_X > 0 || soap_flag_d > 0 || soap_flag_maxIteration > 0 || soap_flag_eps > 0 || soap_flag_zeidel > 0 || soap_flag_p > 0 || soap_flag_maxCalcTime > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__SMACOFMDS(struct soap *soap, const struct Damis__SMACOFMDS *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Damis__SMACOFMDS);
	if (soap_out_Damis__SMACOFMDS(soap, tag?tag:"Damis:SMACOFMDS", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct Damis__SMACOFMDS * SOAP_FMAC4 soap_get_Damis__SMACOFMDS(struct soap *soap, struct Damis__SMACOFMDS *p, const char *tag, const char *type)
{
	if ((p = soap_in_Damis__SMACOFMDS(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct Damis__SMACOFMDS * SOAP_FMAC2 soap_instantiate_Damis__SMACOFMDS(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Damis__SMACOFMDS(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Damis__SMACOFMDS, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct Damis__SMACOFMDS);
		if (size)
			*size = sizeof(struct Damis__SMACOFMDS);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct Damis__SMACOFMDS, n);
		if (size)
			*size = n * sizeof(struct Damis__SMACOFMDS);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct Damis__SMACOFMDS*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__SMACOFMDS(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct Damis__SMACOFMDS %p -> %p\n", q, p));
	*(struct Damis__SMACOFMDS*)p = *(struct Damis__SMACOFMDS*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__SMACOFMDSResponse(struct soap *soap, struct Damis__SMACOFMDSResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->Y);
	soap_default_double(soap, &a->calcTime);
	soap_default_double(soap, &a->algorithmError);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__SMACOFMDSResponse(struct soap *soap, const struct Damis__SMACOFMDSResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->Y);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__SMACOFMDSResponse(struct soap *soap, const char *tag, int id, const struct Damis__SMACOFMDSResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Damis__SMACOFMDSResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "Y", -1, &a->Y, ""))
		return soap->error;
	if (soap_out_double(soap, "calcTime", -1, &a->calcTime, ""))
		return soap->error;
	if (soap_out_double(soap, "algorithmError", -1, &a->algorithmError, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct Damis__SMACOFMDSResponse * SOAP_FMAC4 soap_in_Damis__SMACOFMDSResponse(struct soap *soap, const char *tag, struct Damis__SMACOFMDSResponse *a, const char *type)
{
	size_t soap_flag_Y = 1;
	size_t soap_flag_calcTime = 1;
	size_t soap_flag_algorithmError = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct Damis__SMACOFMDSResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Damis__SMACOFMDSResponse, sizeof(struct Damis__SMACOFMDSResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_Damis__SMACOFMDSResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Y && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Y", &a->Y, "xsd:string"))
				{	soap_flag_Y--;
					continue;
				}
			if (soap_flag_calcTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "calcTime", &a->calcTime, "xsd:double"))
				{	soap_flag_calcTime--;
					continue;
				}
			if (soap_flag_algorithmError && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "algorithmError", &a->algorithmError, "xsd:double"))
				{	soap_flag_algorithmError--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct Damis__SMACOFMDSResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Damis__SMACOFMDSResponse, 0, sizeof(struct Damis__SMACOFMDSResponse), 0, soap_copy_Damis__SMACOFMDSResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Y > 0 || soap_flag_calcTime > 0 || soap_flag_algorithmError > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__SMACOFMDSResponse(struct soap *soap, const struct Damis__SMACOFMDSResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Damis__SMACOFMDSResponse);
	if (soap_out_Damis__SMACOFMDSResponse(soap, tag?tag:"Damis:SMACOFMDSResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct Damis__SMACOFMDSResponse * SOAP_FMAC4 soap_get_Damis__SMACOFMDSResponse(struct soap *soap, struct Damis__SMACOFMDSResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_Damis__SMACOFMDSResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct Damis__SMACOFMDSResponse * SOAP_FMAC2 soap_instantiate_Damis__SMACOFMDSResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Damis__SMACOFMDSResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Damis__SMACOFMDSResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct Damis__SMACOFMDSResponse);
		if (size)
			*size = sizeof(struct Damis__SMACOFMDSResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct Damis__SMACOFMDSResponse, n);
		if (size)
			*size = n * sizeof(struct Damis__SMACOFMDSResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct Damis__SMACOFMDSResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__SMACOFMDSResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct Damis__SMACOFMDSResponse %p -> %p\n", q, p));
	*(struct Damis__SMACOFMDSResponse*)p = *(struct Damis__SMACOFMDSResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__PCA(struct soap *soap, struct Damis__PCA *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->X);
	soap_default_bool(soap, &a->projType);
	soap_default_double(soap, &a->d);
	soap_default_int(soap, &a->maxCalcTime);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__PCA(struct soap *soap, const struct Damis__PCA *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->X);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__PCA(struct soap *soap, const char *tag, int id, const struct Damis__PCA *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Damis__PCA), type))
		return soap->error;
	if (soap_out_std__string(soap, "X", -1, &a->X, ""))
		return soap->error;
	if (soap_out_bool(soap, "projType", -1, &a->projType, ""))
		return soap->error;
	if (soap_out_double(soap, "d", -1, &a->d, ""))
		return soap->error;
	if (soap_out_int(soap, "maxCalcTime", -1, &a->maxCalcTime, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct Damis__PCA * SOAP_FMAC4 soap_in_Damis__PCA(struct soap *soap, const char *tag, struct Damis__PCA *a, const char *type)
{
	size_t soap_flag_X = 1;
	size_t soap_flag_projType = 1;
	size_t soap_flag_d = 1;
	size_t soap_flag_maxCalcTime = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct Damis__PCA *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Damis__PCA, sizeof(struct Damis__PCA), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_Damis__PCA(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_X && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "X", &a->X, "xsd:string"))
				{	soap_flag_X--;
					continue;
				}
			if (soap_flag_projType && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "projType", &a->projType, "xsd:boolean"))
				{	soap_flag_projType--;
					continue;
				}
			if (soap_flag_d && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "d", &a->d, "xsd:double"))
				{	soap_flag_d--;
					continue;
				}
			if (soap_flag_maxCalcTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "maxCalcTime", &a->maxCalcTime, "xsd:int"))
				{	soap_flag_maxCalcTime--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct Damis__PCA *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Damis__PCA, 0, sizeof(struct Damis__PCA), 0, soap_copy_Damis__PCA);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_X > 0 || soap_flag_projType > 0 || soap_flag_d > 0 || soap_flag_maxCalcTime > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__PCA(struct soap *soap, const struct Damis__PCA *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Damis__PCA);
	if (soap_out_Damis__PCA(soap, tag?tag:"Damis:PCA", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct Damis__PCA * SOAP_FMAC4 soap_get_Damis__PCA(struct soap *soap, struct Damis__PCA *p, const char *tag, const char *type)
{
	if ((p = soap_in_Damis__PCA(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct Damis__PCA * SOAP_FMAC2 soap_instantiate_Damis__PCA(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Damis__PCA(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Damis__PCA, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct Damis__PCA);
		if (size)
			*size = sizeof(struct Damis__PCA);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct Damis__PCA, n);
		if (size)
			*size = n * sizeof(struct Damis__PCA);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct Damis__PCA*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__PCA(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct Damis__PCA %p -> %p\n", q, p));
	*(struct Damis__PCA*)p = *(struct Damis__PCA*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_Damis__PCAResponse(struct soap *soap, struct Damis__PCAResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->Y);
	soap_default_double(soap, &a->calcTime);
	soap_default_double(soap, &a->algorithmError);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Damis__PCAResponse(struct soap *soap, const struct Damis__PCAResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->Y);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Damis__PCAResponse(struct soap *soap, const char *tag, int id, const struct Damis__PCAResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Damis__PCAResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "Y", -1, &a->Y, ""))
		return soap->error;
	if (soap_out_double(soap, "calcTime", -1, &a->calcTime, ""))
		return soap->error;
	if (soap_out_double(soap, "algorithmError", -1, &a->algorithmError, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct Damis__PCAResponse * SOAP_FMAC4 soap_in_Damis__PCAResponse(struct soap *soap, const char *tag, struct Damis__PCAResponse *a, const char *type)
{
	size_t soap_flag_Y = 1;
	size_t soap_flag_calcTime = 1;
	size_t soap_flag_algorithmError = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct Damis__PCAResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Damis__PCAResponse, sizeof(struct Damis__PCAResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_Damis__PCAResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Y && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Y", &a->Y, "xsd:string"))
				{	soap_flag_Y--;
					continue;
				}
			if (soap_flag_calcTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "calcTime", &a->calcTime, "xsd:double"))
				{	soap_flag_calcTime--;
					continue;
				}
			if (soap_flag_algorithmError && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "algorithmError", &a->algorithmError, "xsd:double"))
				{	soap_flag_algorithmError--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct Damis__PCAResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Damis__PCAResponse, 0, sizeof(struct Damis__PCAResponse), 0, soap_copy_Damis__PCAResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Y > 0 || soap_flag_calcTime > 0 || soap_flag_algorithmError > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Damis__PCAResponse(struct soap *soap, const struct Damis__PCAResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Damis__PCAResponse);
	if (soap_out_Damis__PCAResponse(soap, tag?tag:"Damis:PCAResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct Damis__PCAResponse * SOAP_FMAC4 soap_get_Damis__PCAResponse(struct soap *soap, struct Damis__PCAResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_Damis__PCAResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct Damis__PCAResponse * SOAP_FMAC2 soap_instantiate_Damis__PCAResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Damis__PCAResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Damis__PCAResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct Damis__PCAResponse);
		if (size)
			*size = sizeof(struct Damis__PCAResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct Damis__PCAResponse, n);
		if (size)
			*size = n * sizeof(struct Damis__PCAResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct Damis__PCAResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Damis__PCAResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct Damis__PCAResponse %p -> %p\n", q, p));
	*(struct Damis__PCAResponse*)p = *(struct Damis__PCAResponse*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
